{
  "version": 3,
  "sources": ["../../use-sync-external-store/cjs/use-sync-external-store-shim.development.js", "../../use-sync-external-store/shim/index.js", "../../use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js", "../../use-sync-external-store/shim/with-selector.js", "../../wagmi/src/context.ts", "../../@wagmi/core/src/utils/getAction.ts", "../../@wagmi/core/src/actions/call.ts", "../../@wagmi/core/src/version.ts", "../../@wagmi/core/src/utils/getVersion.ts", "../../@wagmi/core/src/errors/base.ts", "../../@wagmi/core/src/errors/config.ts", "../../@wagmi/core/src/actions/connect.ts", "../../@wagmi/core/src/actions/getConnectorClient.ts", "../../@wagmi/core/src/actions/deployContract.ts", "../../@wagmi/core/src/actions/disconnect.ts", "../../@wagmi/core/src/actions/estimateGas.ts", "../../@wagmi/core/src/utils/getUnit.ts", "../../@wagmi/core/src/actions/estimateFeesPerGas.ts", "../../@wagmi/core/src/actions/estimateMaxPriorityFeePerGas.ts", "../../@wagmi/core/src/actions/getAccount.ts", "../../@wagmi/core/src/actions/multicall.ts", "../../@wagmi/core/src/actions/readContract.ts", "../../@wagmi/core/src/actions/readContracts.ts", "../../@wagmi/core/src/actions/getBalance.ts", "../../@wagmi/core/src/actions/getBlock.ts", "../../@wagmi/core/src/actions/getBlockNumber.ts", "../../@wagmi/core/src/actions/getBlockTransactionCount.ts", "../../@wagmi/core/src/actions/getBytecode.ts", "../../@wagmi/core/src/actions/getChainId.ts", "../../@wagmi/core/src/utils/deepEqual.ts", "../../@wagmi/core/src/actions/getChains.ts", "../../@wagmi/core/src/actions/getClient.ts", "../../@wagmi/core/src/actions/getConnections.ts", "../../@wagmi/core/src/actions/getConnectors.ts", "../../@wagmi/core/src/actions/getEnsAddress.ts", "../../@wagmi/core/src/actions/getEnsAvatar.ts", "../../@wagmi/core/src/actions/getEnsName.ts", "../../@wagmi/core/src/actions/getEnsResolver.ts", "../../@wagmi/core/src/actions/getEnsText.ts", "../../@wagmi/core/src/actions/getFeeHistory.ts", "../../@wagmi/core/src/actions/getGasPrice.ts", "../../@wagmi/core/src/actions/getProof.ts", "../../@wagmi/core/src/actions/getPublicClient.ts", "../../@wagmi/core/src/actions/getStorageAt.ts", "../../@wagmi/core/src/actions/getToken.ts", "../../@wagmi/core/src/actions/getTransaction.ts", "../../@wagmi/core/src/actions/getTransactionConfirmations.ts", "../../@wagmi/core/src/actions/getTransactionCount.ts", "../../@wagmi/core/src/actions/getTransactionReceipt.ts", "../../@wagmi/core/src/actions/getWalletClient.ts", "../../@wagmi/core/src/actions/prepareTransactionRequest.ts", "../../@wagmi/core/src/actions/reconnect.ts", "../../@wagmi/core/src/actions/sendTransaction.ts", "../../@wagmi/core/src/actions/signMessage.ts", "../../@wagmi/core/src/actions/signTypedData.ts", "../../@wagmi/core/src/actions/simulateContract.ts", "../../@wagmi/core/src/actions/switchAccount.ts", "../../@wagmi/core/src/errors/connector.ts", "../../@wagmi/core/src/actions/switchChain.ts", "../../@wagmi/core/src/actions/verifyMessage.ts", "../../@wagmi/core/src/actions/verifyTypedData.ts", "../../@wagmi/core/src/actions/watchAccount.ts", "../../@wagmi/core/src/actions/watchAsset.ts", "../../@wagmi/core/src/actions/watchBlocks.ts", "../../@wagmi/core/src/actions/watchBlockNumber.ts", "../../@wagmi/core/src/actions/watchChainId.ts", "../../@wagmi/core/src/actions/watchClient.ts", "../../@wagmi/core/src/actions/watchConnections.ts", "../../@wagmi/core/src/actions/watchConnectors.ts", "../../@wagmi/core/src/actions/watchContractEvent.ts", "../../@wagmi/core/src/actions/watchPendingTransactions.ts", "../../@wagmi/core/src/actions/watchPublicClient.ts", "../../@wagmi/core/src/actions/waitForTransactionReceipt.ts", "../../@wagmi/core/src/actions/writeContract.ts", "../../@wagmi/core/src/connectors/createConnector.ts", "../../@wagmi/core/src/connectors/injected.ts", "../../@wagmi/core/src/connectors/mock.ts", "../../mipd/src/utils.ts", "../../mipd/src/store.ts", "../../zustand/esm/middleware.mjs", "../../zustand/esm/vanilla.mjs", "../../@wagmi/core/src/createEmitter.ts", "../../@wagmi/core/src/utils/deserialize.ts", "../../@wagmi/core/src/utils/serialize.ts", "../../@wagmi/core/src/createStorage.ts", "../../@wagmi/core/src/utils/uid.ts", "../../@wagmi/core/src/createConfig.ts", "../../@wagmi/core/src/hydrate.ts", "../../@wagmi/core/src/transports/connector.ts", "../../@wagmi/core/src/transports/fallback.ts", "../../@wagmi/core/src/utils/cookie.ts", "../../@wagmi/core/src/utils/extractRpcUrls.ts", "../../@wagmi/core/src/utils/normalizeChainId.ts", "../../wagmi/src/hydrate.ts", "../../wagmi/src/version.ts", "../../wagmi/src/utils/getVersion.ts", "../../wagmi/src/errors/base.ts", "../../wagmi/src/errors/context.ts", "../../wagmi/src/hooks/useConfig.ts", "../../@wagmi/core/src/actions/watchChains.ts", "../../wagmi/src/hooks/useSyncExternalStoreWithTracked.ts", "../../wagmi/src/hooks/useAccount.ts", "../../wagmi/src/hooks/useAccountEffect.ts", "../../@wagmi/core/src/query/utils.ts", "../../@wagmi/core/src/query/call.ts", "../../@wagmi/core/src/query/connect.ts", "../../@wagmi/core/src/query/deployContract.ts", "../../@wagmi/core/src/query/disconnect.ts", "../../@wagmi/core/src/query/estimateFeesPerGas.ts", "../../@wagmi/core/src/query/estimateGas.ts", "../../@wagmi/core/src/query/estimateMaxPriorityFeePerGas.ts", "../../@wagmi/core/src/query/getBalance.ts", "../../@wagmi/core/src/query/getBlock.ts", "../../@wagmi/core/src/query/getBlockNumber.ts", "../../@wagmi/core/src/query/getBlockTransactionCount.ts", "../../@wagmi/core/src/query/getBytecode.ts", "../../@wagmi/core/src/query/getConnectorClient.ts", "../../@wagmi/core/src/query/getEnsAddress.ts", "../../@wagmi/core/src/query/getEnsAvatar.ts", "../../@wagmi/core/src/query/getEnsName.ts", "../../@wagmi/core/src/query/getEnsResolver.ts", "../../@wagmi/core/src/query/getEnsText.ts", "../../@wagmi/core/src/query/getFeeHistory.ts", "../../@wagmi/core/src/query/getGasPrice.ts", "../../@wagmi/core/src/query/getProof.ts", "../../@wagmi/core/src/query/getStorageAt.ts", "../../@wagmi/core/src/query/getToken.ts", "../../@wagmi/core/src/query/getTransaction.ts", "../../@wagmi/core/src/query/getTransactionConfirmations.ts", "../../@wagmi/core/src/query/getTransactionCount.ts", "../../@wagmi/core/src/query/getTransactionReceipt.ts", "../../@wagmi/core/src/query/getWalletClient.ts", "../../@wagmi/core/src/query/infiniteReadContracts.ts", "../../@wagmi/core/src/query/prepareTransactionRequest.ts", "../../@wagmi/core/src/query/readContract.ts", "../../@wagmi/core/src/query/readContracts.ts", "../../@wagmi/core/src/query/reconnect.ts", "../../@wagmi/core/src/query/sendTransaction.ts", "../../@wagmi/core/src/query/signMessage.ts", "../../@wagmi/core/src/query/signTypedData.ts", "../../@wagmi/core/src/query/switchAccount.ts", "../../@wagmi/core/src/query/simulateContract.ts", "../../@wagmi/core/src/query/switchChain.ts", "../../@wagmi/core/src/query/verifyMessage.ts", "../../@wagmi/core/src/query/verifyTypedData.ts", "../../@wagmi/core/src/query/waitForTransactionReceipt.ts", "../../@wagmi/core/src/query/watchAsset.ts", "../../@wagmi/core/src/query/writeContract.ts", "../../wagmi/src/utils/query.ts", "../../wagmi/src/hooks/useChainId.ts", "../../wagmi/src/hooks/useBalance.ts", "../../wagmi/src/hooks/useWatchBlocks.ts", "../../wagmi/src/hooks/useBlock.ts", "../../wagmi/src/hooks/useWatchBlockNumber.ts", "../../wagmi/src/hooks/useBlockNumber.ts", "../../wagmi/src/hooks/useBlockTransactionCount.ts", "../../wagmi/src/hooks/useBytecode.ts", "../../wagmi/src/hooks/useCall.ts", "../../wagmi/src/hooks/useChains.ts", "../../wagmi/src/hooks/useClient.ts", "../../wagmi/src/hooks/useConnect.ts", "../../wagmi/src/hooks/useConnectors.ts", "../../wagmi/src/hooks/useConnections.ts", "../../wagmi/src/hooks/useConnectorClient.ts", "../../wagmi/src/hooks/useDeployContract.ts", "../../wagmi/src/hooks/useDisconnect.ts", "../../wagmi/src/hooks/useEnsAddress.ts", "../../wagmi/src/hooks/useEnsAvatar.ts", "../../wagmi/src/hooks/useEnsName.ts", "../../wagmi/src/hooks/useEnsResolver.ts", "../../wagmi/src/hooks/useEnsText.ts", "../../wagmi/src/hooks/useEstimateFeesPerGas.ts", "../../wagmi/src/hooks/useEstimateGas.ts", "../../wagmi/src/hooks/useEstimateMaxPriorityFeePerGas.ts", "../../wagmi/src/hooks/useFeeHistory.ts", "../../wagmi/src/hooks/useGasPrice.ts", "../../wagmi/src/hooks/useInfiniteReadContracts.ts", "../../wagmi/src/hooks/usePrepareTransactionRequest.ts", "../../wagmi/src/hooks/useProof.ts", "../../wagmi/src/hooks/usePublicClient.ts", "../../wagmi/src/hooks/useReadContract.ts", "../../wagmi/src/hooks/useReadContracts.ts", "../../wagmi/src/hooks/useReconnect.ts", "../../wagmi/src/hooks/useSendTransaction.ts", "../../wagmi/src/hooks/useSignMessage.ts", "../../wagmi/src/hooks/useSignTypedData.ts", "../../wagmi/src/hooks/useSimulateContract.ts", "../../wagmi/src/hooks/useStorageAt.ts", "../../wagmi/src/hooks/useSwitchAccount.ts", "../../wagmi/src/hooks/useSwitchChain.ts", "../../wagmi/src/hooks/useToken.ts", "../../wagmi/src/hooks/useTransaction.ts", "../../wagmi/src/hooks/useTransactionConfirmations.ts", "../../wagmi/src/hooks/useTransactionCount.ts", "../../wagmi/src/hooks/useTransactionReceipt.ts", "../../wagmi/src/hooks/useVerifyMessage.ts", "../../wagmi/src/hooks/useVerifyTypedData.ts", "../../wagmi/src/hooks/useWalletClient.ts", "../../wagmi/src/hooks/useWaitForTransactionReceipt.ts", "../../wagmi/src/hooks/useWatchAsset.ts", "../../wagmi/src/hooks/useWatchContractEvent.ts", "../../wagmi/src/hooks/useWatchPendingTransactions.ts", "../../wagmi/src/hooks/useWriteContract.ts"],
  "sourcesContent": ["/**\r\n * @license React\r\n * use-sync-external-store-shim.development.js\r\n *\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\"use strict\";\r\n\"production\" !== process.env.NODE_ENV &&\r\n  (function () {\r\n    function is(x, y) {\r\n      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\r\n    }\r\n    function useSyncExternalStore$2(subscribe, getSnapshot) {\r\n      didWarnOld18Alpha ||\r\n        void 0 === React.startTransition ||\r\n        ((didWarnOld18Alpha = !0),\r\n        console.error(\r\n          \"You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.\"\r\n        ));\r\n      var value = getSnapshot();\r\n      if (!didWarnUncachedGetSnapshot) {\r\n        var cachedValue = getSnapshot();\r\n        objectIs(value, cachedValue) ||\r\n          (console.error(\r\n            \"The result of getSnapshot should be cached to avoid an infinite loop\"\r\n          ),\r\n          (didWarnUncachedGetSnapshot = !0));\r\n      }\r\n      cachedValue = useState({\r\n        inst: { value: value, getSnapshot: getSnapshot }\r\n      });\r\n      var inst = cachedValue[0].inst,\r\n        forceUpdate = cachedValue[1];\r\n      useLayoutEffect(\r\n        function () {\r\n          inst.value = value;\r\n          inst.getSnapshot = getSnapshot;\r\n          checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\r\n        },\r\n        [subscribe, value, getSnapshot]\r\n      );\r\n      useEffect(\r\n        function () {\r\n          checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\r\n          return subscribe(function () {\r\n            checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\r\n          });\r\n        },\r\n        [subscribe]\r\n      );\r\n      useDebugValue(value);\r\n      return value;\r\n    }\r\n    function checkIfSnapshotChanged(inst) {\r\n      var latestGetSnapshot = inst.getSnapshot;\r\n      inst = inst.value;\r\n      try {\r\n        var nextValue = latestGetSnapshot();\r\n        return !objectIs(inst, nextValue);\r\n      } catch (error) {\r\n        return !0;\r\n      }\r\n    }\r\n    function useSyncExternalStore$1(subscribe, getSnapshot) {\r\n      return getSnapshot();\r\n    }\r\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\r\n      \"function\" ===\r\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&\r\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\r\n    var React = require(\"react\"),\r\n      objectIs = \"function\" === typeof Object.is ? Object.is : is,\r\n      useState = React.useState,\r\n      useEffect = React.useEffect,\r\n      useLayoutEffect = React.useLayoutEffect,\r\n      useDebugValue = React.useDebugValue,\r\n      didWarnOld18Alpha = !1,\r\n      didWarnUncachedGetSnapshot = !1,\r\n      shim =\r\n        \"undefined\" === typeof window ||\r\n        \"undefined\" === typeof window.document ||\r\n        \"undefined\" === typeof window.document.createElement\r\n          ? useSyncExternalStore$1\r\n          : useSyncExternalStore$2;\r\n    exports.useSyncExternalStore =\r\n      void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\r\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\r\n      \"function\" ===\r\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&\r\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\r\n  })();\r\n", "'use strict';\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('../cjs/use-sync-external-store-shim.production.js');\r\n} else {\r\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\r\n}\r\n", "/**\r\n * @license React\r\n * use-sync-external-store-shim/with-selector.development.js\r\n *\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\"use strict\";\r\n\"production\" !== process.env.NODE_ENV &&\r\n  (function () {\r\n    function is(x, y) {\r\n      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\r\n    }\r\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\r\n      \"function\" ===\r\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&\r\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());\r\n    var React = require(\"react\"),\r\n      shim = require(\"use-sync-external-store/shim\"),\r\n      objectIs = \"function\" === typeof Object.is ? Object.is : is,\r\n      useSyncExternalStore = shim.useSyncExternalStore,\r\n      useRef = React.useRef,\r\n      useEffect = React.useEffect,\r\n      useMemo = React.useMemo,\r\n      useDebugValue = React.useDebugValue;\r\n    exports.useSyncExternalStoreWithSelector = function (\r\n      subscribe,\r\n      getSnapshot,\r\n      getServerSnapshot,\r\n      selector,\r\n      isEqual\r\n    ) {\r\n      var instRef = useRef(null);\r\n      if (null === instRef.current) {\r\n        var inst = { hasValue: !1, value: null };\r\n        instRef.current = inst;\r\n      } else inst = instRef.current;\r\n      instRef = useMemo(\r\n        function () {\r\n          function memoizedSelector(nextSnapshot) {\r\n            if (!hasMemo) {\r\n              hasMemo = !0;\r\n              memoizedSnapshot = nextSnapshot;\r\n              nextSnapshot = selector(nextSnapshot);\r\n              if (void 0 !== isEqual && inst.hasValue) {\r\n                var currentSelection = inst.value;\r\n                if (isEqual(currentSelection, nextSnapshot))\r\n                  return (memoizedSelection = currentSelection);\r\n              }\r\n              return (memoizedSelection = nextSnapshot);\r\n            }\r\n            currentSelection = memoizedSelection;\r\n            if (objectIs(memoizedSnapshot, nextSnapshot))\r\n              return currentSelection;\r\n            var nextSelection = selector(nextSnapshot);\r\n            if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))\r\n              return (memoizedSnapshot = nextSnapshot), currentSelection;\r\n            memoizedSnapshot = nextSnapshot;\r\n            return (memoizedSelection = nextSelection);\r\n          }\r\n          var hasMemo = !1,\r\n            memoizedSnapshot,\r\n            memoizedSelection,\r\n            maybeGetServerSnapshot =\r\n              void 0 === getServerSnapshot ? null : getServerSnapshot;\r\n          return [\r\n            function () {\r\n              return memoizedSelector(getSnapshot());\r\n            },\r\n            null === maybeGetServerSnapshot\r\n              ? void 0\r\n              : function () {\r\n                  return memoizedSelector(maybeGetServerSnapshot());\r\n                }\r\n          ];\r\n        },\r\n        [getSnapshot, getServerSnapshot, selector, isEqual]\r\n      );\r\n      var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);\r\n      useEffect(\r\n        function () {\r\n          inst.hasValue = !0;\r\n          inst.value = value;\r\n        },\r\n        [value]\r\n      );\r\n      useDebugValue(value);\r\n      return value;\r\n    };\r\n    \"undefined\" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&\r\n      \"function\" ===\r\n        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&\r\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());\r\n  })();\r\n", "'use strict';\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.production.js');\r\n} else {\r\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.development.js');\r\n}\r\n", "'use client'\r\n\r\nimport type { ResolvedRegister, State } from '@wagmi/core'\r\nimport { createContext, createElement } from 'react'\r\nimport { Hydrate } from './hydrate.js'\r\n\r\nexport const WagmiContext = createContext<\r\n  ResolvedRegister['config'] | undefined\r\n>(undefined)\r\n\r\nexport type WagmiProviderProps = {\r\n  config: ResolvedRegister['config']\r\n  initialState?: State | undefined\r\n  reconnectOnMount?: boolean | undefined\r\n}\r\n\r\nexport function WagmiProvider(\r\n  parameters: React.PropsWithChildren<WagmiProviderProps>,\r\n) {\r\n  const { children, config } = parameters\r\n\r\n  const props = { value: config }\r\n  return createElement(\r\n    Hydrate,\r\n    parameters,\r\n    createElement(WagmiContext.Provider, props, children),\r\n  )\r\n}\r\n", "import type {\r\n  Account,\r\n  Chain,\r\n  Client,\r\n  PublicActions,\r\n  RpcSchema,\r\n  Transport,\r\n  WalletActions,\r\n} from 'viem'\r\n\r\n/**\r\n * Retrieves and returns an action from the client (if exists), and falls\r\n * back to the tree-shakable action.\r\n *\r\n * Useful for extracting overridden actions from a client (ie. if a consumer\r\n * wants to override the `sendTransaction` implementation).\r\n */\r\nexport function getAction<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  rpcSchema extends RpcSchema | undefined,\r\n  extended extends { [key: string]: unknown },\r\n  client extends Client<transport, chain, account, rpcSchema, extended>,\r\n  parameters,\r\n  returnType,\r\n>(\r\n  client: client,\r\n  actionFn: (_: any, parameters: parameters) => returnType,\r\n  // Some minifiers drop `Function.prototype.name`, or replace it with short letters,\r\n  // meaning that `actionFn.name` will not always work. For that case, the consumer\r\n  // needs to pass the name explicitly.\r\n  name: keyof PublicActions | keyof WalletActions,\r\n): (parameters: parameters) => returnType {\r\n  const action_implicit = client[actionFn.name]\r\n  if (typeof action_implicit === 'function')\r\n    return action_implicit as (params: parameters) => returnType\r\n\r\n  const action_explicit = client[name]\r\n  if (typeof action_explicit === 'function')\r\n    return action_explicit as (params: parameters) => returnType\r\n\r\n  return (params) => actionFn(client, params)\r\n}\r\n", "import type {\r\n  CallErrorType as viem_CallErrorType,\r\n  CallParameters as viem_CallParameters,\r\n  CallReturnType as viem_CallReturnType,\r\n} from 'viem'\r\nimport { call as viem_call } from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type CallParameters<config extends Config = Config> =\r\n  viem_CallParameters & ChainIdParameter<config>\r\n\r\nexport type CallReturnType = viem_CallReturnType\r\n\r\nexport type CallErrorType = viem_CallErrorType\r\n\r\nexport async function call<config extends Config>(\r\n  config: config,\r\n  parameters: CallParameters<config>,\r\n): Promise<CallReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_call, 'call')\r\n  return action(rest)\r\n}\r\n", "export const version = '2.16.7'\r\n", "import { version } from '../version.js'\r\n\r\nexport const getVersion = () => `@wagmi/core@${version}`\r\n", "import type { Compute, OneOf } from '../types/utils.js'\r\nimport { getVersion } from '../utils/getVersion.js'\r\n\r\nexport type ErrorType<name extends string = 'Error'> = Error & { name: name }\r\n\r\ntype BaseErrorOptions = Compute<\r\n  OneOf<{ details?: string | undefined } | { cause: BaseError | Error }> & {\r\n    docsPath?: string | undefined\r\n    docsSlug?: string | undefined\r\n    metaMessages?: string[] | undefined\r\n  }\r\n>\r\n\r\nexport type BaseErrorType = BaseError & { name: 'WagmiCoreError' }\r\nexport class BaseError extends Error {\r\n  details: string\r\n  docsPath?: string | undefined\r\n  metaMessages?: string[] | undefined\r\n  shortMessage: string\r\n\r\n  override name = 'WagmiCoreError'\r\n  get docsBaseUrl() {\r\n    return 'https://wagmi.sh/core'\r\n  }\r\n  get version() {\r\n    return getVersion()\r\n  }\r\n\r\n  constructor(shortMessage: string, options: BaseErrorOptions = {}) {\r\n    super()\r\n\r\n    const details =\r\n      options.cause instanceof BaseError\r\n        ? options.cause.details\r\n        : options.cause?.message\r\n          ? options.cause.message\r\n          : options.details!\r\n    const docsPath =\r\n      options.cause instanceof BaseError\r\n        ? options.cause.docsPath || options.docsPath\r\n        : options.docsPath\r\n\r\n    this.message = [\r\n      shortMessage || 'An error occurred.',\r\n      '',\r\n      ...(options.metaMessages ? [...options.metaMessages, ''] : []),\r\n      ...(docsPath\r\n        ? [\r\n            `Docs: ${this.docsBaseUrl}${docsPath}.html${\r\n              options.docsSlug ? `#${options.docsSlug}` : ''\r\n            }`,\r\n          ]\r\n        : []),\r\n      ...(details ? [`Details: ${details}`] : []),\r\n      `Version: ${this.version}`,\r\n    ].join('\\n')\r\n\r\n    if (options.cause) this.cause = options.cause\r\n    this.details = details\r\n    this.docsPath = docsPath\r\n    this.metaMessages = options.metaMessages\r\n    this.shortMessage = shortMessage\r\n  }\r\n\r\n  walk(fn?: (err: unknown) => boolean) {\r\n    return this.#walk(this, fn)\r\n  }\r\n\r\n  #walk(err: unknown, fn?: (err: unknown) => boolean): unknown {\r\n    if (fn?.(err)) return err\r\n    if ((err as Error).cause) return this.#walk((err as Error).cause, fn)\r\n    return err\r\n  }\r\n}\r\n", "import type { Address } from 'viem'\r\n\r\nimport type { Connector } from '../createConfig.js'\r\nimport { BaseError } from './base.js'\r\n\r\nexport type ChainNotConfiguredErrorType = ChainNotConfiguredError & {\r\n  name: 'ChainNotConfiguredError'\r\n}\r\nexport class ChainNotConfiguredError extends BaseError {\r\n  override name = 'ChainNotConfiguredError'\r\n  constructor() {\r\n    super('Chain not configured.')\r\n  }\r\n}\r\n\r\nexport type ConnectorAlreadyConnectedErrorType =\r\n  ConnectorAlreadyConnectedError & {\r\n    name: 'ConnectorAlreadyConnectedError'\r\n  }\r\nexport class ConnectorAlreadyConnectedError extends BaseError {\r\n  override name = 'ConnectorAlreadyConnectedError'\r\n  constructor() {\r\n    super('Connector already connected.')\r\n  }\r\n}\r\n\r\nexport type ConnectorNotConnectedErrorType = ConnectorNotConnectedError & {\r\n  name: 'ConnectorNotConnectedError'\r\n}\r\nexport class ConnectorNotConnectedError extends BaseError {\r\n  override name = 'ConnectorNotConnectedError'\r\n  constructor() {\r\n    super('Connector not connected.')\r\n  }\r\n}\r\n\r\nexport type ConnectorNotFoundErrorType = ConnectorNotFoundError & {\r\n  name: 'ConnectorNotFoundError'\r\n}\r\nexport class ConnectorNotFoundError extends BaseError {\r\n  override name = 'ConnectorNotFoundError'\r\n  constructor() {\r\n    super('Connector not found.')\r\n  }\r\n}\r\n\r\nexport type ConnectorAccountNotFoundErrorType =\r\n  ConnectorAccountNotFoundError & {\r\n    name: 'ConnectorAccountNotFoundError'\r\n  }\r\nexport class ConnectorAccountNotFoundError extends BaseError {\r\n  override name = 'ConnectorAccountNotFoundError'\r\n  constructor({\r\n    address,\r\n    connector,\r\n  }: {\r\n    address: Address\r\n    connector: Connector\r\n  }) {\r\n    super(`Account \"${address}\" not found for connector \"${connector.name}\".`)\r\n  }\r\n}\r\n\r\nexport type ConnectorChainMismatchErrorType = ConnectorAccountNotFoundError & {\r\n  name: 'ConnectorChainMismatchError'\r\n}\r\nexport class ConnectorChainMismatchError extends BaseError {\r\n  override name = 'ConnectorChainMismatchError'\r\n  constructor({\r\n    connectionChainId,\r\n    connectorChainId,\r\n  }: {\r\n    connectionChainId: number\r\n    connectorChainId: number\r\n  }) {\r\n    super(\r\n      `The current chain of the connector (id: ${connectorChainId}) does not match the connection's chain (id: ${connectionChainId}).`,\r\n      {\r\n        metaMessages: [\r\n          `Current Chain ID:  ${connectorChainId}`,\r\n          `Expected Chain ID: ${connectionChainId}`,\r\n        ],\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type ConnectorUnavailableReconnectingErrorType =\r\n  ConnectorUnavailableReconnectingError & {\r\n    name: 'ConnectorUnavailableReconnectingError'\r\n  }\r\nexport class ConnectorUnavailableReconnectingError extends BaseError {\r\n  override name = 'ConnectorUnavailableReconnectingError'\r\n  constructor({ connector }: { connector: { name: string } }) {\r\n    super(`Connector \"${connector.name}\" unavailable while reconnecting.`, {\r\n      details: [\r\n        'During the reconnection step, the only connector methods guaranteed to be available are: `id`, `name`, `type`, `uid`.',\r\n        'All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored.',\r\n        'This error commonly occurs for connectors that asynchronously inject after reconnection has already started.',\r\n      ].join(' '),\r\n    })\r\n  }\r\n}\r\n", "import type {\r\n  Address,\r\n  ResourceUnavailableRpcErrorType,\r\n  UserRejectedRequestErrorType,\r\n} from 'viem'\r\n\r\nimport type { CreateConnectorFn } from '../connectors/createConnector.js'\r\nimport type { Config, Connector } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport {\r\n  ConnectorAlreadyConnectedError,\r\n  type ConnectorAlreadyConnectedErrorType,\r\n} from '../errors/config.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport type ConnectParameters<\r\n  config extends Config = Config,\r\n  connector extends Connector | CreateConnectorFn =\r\n    | Connector\r\n    | CreateConnectorFn,\r\n  ///\r\n  parameters extends unknown | undefined =\r\n    | (connector extends CreateConnectorFn\r\n        ? Omit<\r\n            NonNullable<Parameters<ReturnType<connector>['connect']>[0]>,\r\n            'isReconnecting'\r\n          >\r\n        : never)\r\n    | (connector extends Connector\r\n        ? Omit<\r\n            NonNullable<Parameters<connector['connect']>[0]>,\r\n            'isReconnecting'\r\n          >\r\n        : never),\r\n> = Compute<\r\n  ChainIdParameter<config> & {\r\n    connector: connector | CreateConnectorFn\r\n  }\r\n> &\r\n  parameters\r\n\r\nexport type ConnectReturnType<config extends Config = Config> = {\r\n  accounts: readonly [Address, ...Address[]]\r\n  chainId:\r\n    | config['chains'][number]['id']\r\n    | (number extends config['chains'][number]['id'] ? number : number & {})\r\n}\r\n\r\nexport type ConnectErrorType =\r\n  | ConnectorAlreadyConnectedErrorType\r\n  // connector.connect()\r\n  | UserRejectedRequestErrorType\r\n  | ResourceUnavailableRpcErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/connect */\r\nexport async function connect<\r\n  config extends Config,\r\n  connector extends Connector | CreateConnectorFn,\r\n>(\r\n  config: config,\r\n  parameters: ConnectParameters<config, connector>,\r\n): Promise<ConnectReturnType<config>> {\r\n  // \"Register\" connector if not already created\r\n  let connector: Connector\r\n  if (typeof parameters.connector === 'function') {\r\n    connector = config._internal.connectors.setup(parameters.connector)\r\n  } else connector = parameters.connector\r\n\r\n  // Check if connector is already connected\r\n  if (connector.uid === config.state.current)\r\n    throw new ConnectorAlreadyConnectedError()\r\n\r\n  try {\r\n    config.setState((x) => ({ ...x, status: 'connecting' }))\r\n    connector.emitter.emit('message', { type: 'connecting' })\r\n\r\n    const { connector: _, ...rest } = parameters\r\n    const data = await connector.connect(rest)\r\n    const accounts = data.accounts as readonly [Address, ...Address[]]\r\n\r\n    connector.emitter.off('connect', config._internal.events.connect)\r\n    connector.emitter.on('change', config._internal.events.change)\r\n    connector.emitter.on('disconnect', config._internal.events.disconnect)\r\n\r\n    await config.storage?.setItem('recentConnectorId', connector.id)\r\n    config.setState((x) => ({\r\n      ...x,\r\n      connections: new Map(x.connections).set(connector.uid, {\r\n        accounts,\r\n        chainId: data.chainId,\r\n        connector: connector,\r\n      }),\r\n      current: connector.uid,\r\n      status: 'connected',\r\n    }))\r\n\r\n    return { accounts, chainId: data.chainId }\r\n  } catch (error) {\r\n    config.setState((x) => ({\r\n      ...x,\r\n      // Keep existing connector connected in case of error\r\n      status: x.current ? 'connected' : 'disconnected',\r\n    }))\r\n    throw error\r\n  }\r\n}\r\n", "import {\r\n  type Account,\r\n  type Address,\r\n  type BaseErrorType,\r\n  type Client,\r\n  createClient,\r\n  custom,\r\n} from 'viem'\r\nimport { getAddress, parseAccount } from 'viem/utils'\r\n\r\nimport type { Config, Connection } from '../createConfig.js'\r\nimport type { ErrorType } from '../errors/base.js'\r\nimport {\r\n  ConnectorAccountNotFoundError,\r\n  type ConnectorAccountNotFoundErrorType,\r\n  ConnectorChainMismatchError,\r\n  type ConnectorChainMismatchErrorType,\r\n  ConnectorNotConnectedError,\r\n  type ConnectorNotConnectedErrorType,\r\n  ConnectorUnavailableReconnectingError,\r\n  type ConnectorUnavailableReconnectingErrorType,\r\n} from '../errors/config.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  ConnectorParameter,\r\n} from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport type GetConnectorClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  ChainIdParameter<config, chainId> &\r\n    ConnectorParameter & {\r\n      /**\r\n       * Account to use for the client.\r\n       *\r\n       * - `Account | Address`: An Account MUST exist on the connector.\r\n       * - `null`: Account MAY NOT exist on the connector. This is useful for\r\n       *   actions that can infer the account from the connector (e.g. sending a\r\n       *   call without a connected account – the user will be prompted to select\r\n       *   an account within the wallet).\r\n       */\r\n      account?: Address | Account | null | undefined\r\n    }\r\n>\r\n\r\nexport type GetConnectorClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  Client<\r\n    config['_internal']['transports'][chainId],\r\n    Extract<config['chains'][number], { id: chainId }>,\r\n    Account\r\n  >\r\n>\r\n\r\nexport type GetConnectorClientErrorType =\r\n  | ConnectorAccountNotFoundErrorType\r\n  | ConnectorChainMismatchErrorType\r\n  | ConnectorNotConnectedErrorType\r\n  | ConnectorUnavailableReconnectingErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getConnectorClient */\r\nexport async function getConnectorClient<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetConnectorClientParameters<config, chainId> = {},\r\n): Promise<GetConnectorClientReturnType<config, chainId>> {\r\n  // Get connection\r\n  let connection: Connection | undefined\r\n  if (parameters.connector) {\r\n    const { connector } = parameters\r\n    if (\r\n      config.state.status === 'reconnecting' &&\r\n      !connector.getAccounts &&\r\n      !connector.getChainId\r\n    )\r\n      throw new ConnectorUnavailableReconnectingError({ connector })\r\n\r\n    const [accounts, chainId] = await Promise.all([\r\n      connector.getAccounts().catch((e) => {\r\n        if (parameters.account === null) return []\r\n        throw e\r\n      }),\r\n      connector.getChainId(),\r\n    ])\r\n    connection = {\r\n      accounts: accounts as readonly [Address, ...Address[]],\r\n      chainId,\r\n      connector,\r\n    }\r\n  } else connection = config.state.connections.get(config.state.current!)\r\n  if (!connection) throw new ConnectorNotConnectedError()\r\n\r\n  const chainId = parameters.chainId ?? connection.chainId\r\n\r\n  // Check connector using same chainId as connection\r\n  const connectorChainId = await connection.connector.getChainId()\r\n  if (connectorChainId !== connection.chainId)\r\n    throw new ConnectorChainMismatchError({\r\n      connectionChainId: connection.chainId,\r\n      connectorChainId,\r\n    })\r\n\r\n  // If connector has custom `getClient` implementation\r\n  type Return = GetConnectorClientReturnType<config, chainId>\r\n  const connector = connection.connector\r\n  if (connector.getClient)\r\n    return connector.getClient({ chainId }) as unknown as Return\r\n\r\n  // Default using `custom` transport\r\n  const account = parseAccount(parameters.account ?? connection.accounts[0]!)\r\n  if (account) account.address = getAddress(account.address) // TODO: Checksum address as part of `parseAccount`?\r\n\r\n  // If account was provided, check that it exists on the connector\r\n  if (\r\n    parameters.account &&\r\n    !connection.accounts.some(\r\n      (x) => x.toLowerCase() === account.address.toLowerCase(),\r\n    )\r\n  )\r\n    throw new ConnectorAccountNotFoundError({\r\n      address: account.address,\r\n      connector,\r\n    })\r\n\r\n  const chain = config.chains.find((chain) => chain.id === chainId)\r\n  const provider = (await connection.connector.getProvider({ chainId })) as {\r\n    request(...args: any): Promise<any>\r\n  }\r\n\r\n  return createClient({\r\n    account,\r\n    chain,\r\n    name: 'Connector Client',\r\n    transport: (opts) => custom(provider)({ ...opts, retryCount: 0 }),\r\n  }) as Return\r\n}\r\n", "import type { Abi, Account, Chain, Client, ContractConstructorArgs } from 'viem'\r\nimport {\r\n  type DeployContractErrorType as viem_DeployContractErrorType,\r\n  type DeployContractParameters as viem_DeployContractParameters,\r\n  type DeployContractReturnType as viem_DeployContractReturnType,\r\n  deployContract as viem_deployContract,\r\n} from 'viem/actions'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  ConnectorParameter,\r\n} from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type DeployContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  allArgs = ContractConstructorArgs<abi>,\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: Compute<\r\n    Omit<\r\n      viem_DeployContractParameters<\r\n        abi,\r\n        chains[key],\r\n        Account,\r\n        chains[key],\r\n        allArgs\r\n      >,\r\n      'chain'\r\n    > &\r\n      ChainIdParameter<config, chainId> &\r\n      ConnectorParameter\r\n  >\r\n}[number]\r\n\r\nexport type DeployContractReturnType = viem_DeployContractReturnType\r\n\r\nexport type DeployContractErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_DeployContractErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/deployContract */\r\nexport async function deployContract<\r\n  config extends Config,\r\n  const abi extends Abi | readonly unknown[],\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: DeployContractParameters<abi, config, chainId>,\r\n): Promise<DeployContractReturnType> {\r\n  const { account, chainId, connector, ...rest } = parameters\r\n\r\n  let client: Client\r\n  if (typeof account === 'object' && account?.type === 'local')\r\n    client = config.getClient({ chainId })\r\n  else\r\n    client = await getConnectorClient(config, {\r\n      account: account ?? undefined,\r\n      chainId,\r\n      connector,\r\n    })\r\n\r\n  const action = getAction(client, viem_deployContract, 'deployContract')\r\n  const hash = await action({\r\n    ...(rest as any),\r\n    ...(account ? { account } : {}),\r\n    chain: chainId ? { id: chainId } : null,\r\n  })\r\n\r\n  return hash\r\n}\r\n", "import type { Config, Connection, Connector } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type {\r\n  ConnectorNotConnectedErrorType,\r\n  ConnectorNotFoundErrorType,\r\n} from '../errors/config.js'\r\nimport type { ConnectorParameter } from '../types/properties.js'\r\n\r\nexport type DisconnectParameters = ConnectorParameter\r\n\r\nexport type DisconnectReturnType = void\r\n\r\nexport type DisconnectErrorType =\r\n  | ConnectorNotFoundErrorType\r\n  | ConnectorNotConnectedErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/disconnect */\r\nexport async function disconnect(\r\n  config: Config,\r\n  parameters: DisconnectParameters = {},\r\n): Promise<DisconnectReturnType> {\r\n  let connector: Connector | undefined\r\n  if (parameters.connector) connector = parameters.connector\r\n  else {\r\n    const { connections, current } = config.state\r\n    const connection = connections.get(current!)\r\n    connector = connection?.connector\r\n  }\r\n\r\n  const connections = config.state.connections\r\n\r\n  if (connector) {\r\n    await connector.disconnect()\r\n    connector.emitter.off('change', config._internal.events.change)\r\n    connector.emitter.off('disconnect', config._internal.events.disconnect)\r\n    connector.emitter.on('connect', config._internal.events.connect)\r\n\r\n    connections.delete(connector.uid)\r\n  }\r\n\r\n  config.setState((x) => {\r\n    // if no connections exist, move to disconnected state\r\n    if (connections.size === 0)\r\n      return {\r\n        ...x,\r\n        connections: new Map(),\r\n        current: null,\r\n        status: 'disconnected',\r\n      }\r\n\r\n    // switch over to another connection\r\n    const nextConnection = connections.values().next().value as Connection\r\n    return {\r\n      ...x,\r\n      connections: new Map(connections),\r\n      current: nextConnection.connector.uid,\r\n    }\r\n  })\r\n\r\n  // Set recent connector if exists\r\n  {\r\n    const current = config.state.current\r\n    if (!current) return\r\n    const connector = config.state.connections.get(current)?.connector\r\n    if (!connector) return\r\n    await config.storage?.setItem('recentConnectorId', connector.id)\r\n  }\r\n}\r\n", "import type { Account, Address, Chain } from 'viem'\r\nimport {\r\n  type EstimateGasErrorType as viem_EstimateGasErrorType,\r\n  type EstimateGasParameters as viem_EstimateGasParameters,\r\n  type EstimateGasReturnType as viem_EstimateGasReturnType,\r\n  estimateGas as viem_estimateGas,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  ConnectorParameter,\r\n} from '../types/properties.js'\r\nimport type { UnionCompute, UnionLooseOmit } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type EstimateGasParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: UnionCompute<\r\n    UnionLooseOmit<viem_EstimateGasParameters<chains[key]>, 'chain'> &\r\n      ChainIdParameter<config, chainId> &\r\n      ConnectorParameter\r\n  >\r\n}[number]\r\n\r\nexport type EstimateGasReturnType = viem_EstimateGasReturnType\r\n\r\nexport type EstimateGasErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_EstimateGasErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/estimateGas */\r\nexport async function estimateGas<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n>(\r\n  config: config,\r\n  parameters: EstimateGasParameters<config, chainId>,\r\n): Promise<EstimateGasReturnType> {\r\n  const { chainId, connector, ...rest } = parameters\r\n\r\n  let account: Address | Account\r\n  if (parameters.account) account = parameters.account\r\n  else {\r\n    const connectorClient = await getConnectorClient(config, {\r\n      account: parameters.account,\r\n      chainId,\r\n      connector,\r\n    })\r\n    account = connectorClient.account\r\n  }\r\n\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_estimateGas, 'estimateGas')\r\n  return action({ ...(rest as viem_EstimateGasParameters), account })\r\n}\r\n", "import { weiUnits } from 'viem'\r\n\r\nimport type { Unit } from '../types/unit.js'\r\n\r\nexport function getUnit(unit: Unit) {\r\n  if (typeof unit === 'number') return unit\r\n  if (unit === 'wei') return 0\r\n  return Math.abs(weiUnits[unit])\r\n}\r\n", "import {\r\n  type Chain,\r\n  type FeeValuesEIP1559,\r\n  type FeeValuesLegacy,\r\n  type FeeValuesType,\r\n  formatUnits,\r\n} from 'viem'\r\nimport {\r\n  type EstimateFeesPerGasErrorType as viem_EstimateFeesPerGasErrorType,\r\n  type EstimateFeesPerGasParameters as viem_EstimateFeesPerGasParameters,\r\n  type EstimateFeesPerGasReturnType as viem_EstimateFeesPerGasReturnType,\r\n  estimateFeesPerGas as viem_estimateFeesPerGas,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Unit } from '../types/unit.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport type { UnionCompute, UnionLooseOmit } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport { getUnit } from '../utils/getUnit.js'\r\n\r\nexport type EstimateFeesPerGasParameters<\r\n  type extends FeeValuesType = FeeValuesType,\r\n  config extends Config = Config,\r\n> = UnionCompute<\r\n  UnionLooseOmit<\r\n    viem_EstimateFeesPerGasParameters<Chain, Chain, type>,\r\n    'chain'\r\n  > &\r\n    ChainIdParameter<config> & {\r\n      /** @deprecated */\r\n      formatUnits?: Unit | undefined\r\n    }\r\n>\r\n\r\nexport type EstimateFeesPerGasReturnType<\r\n  type extends FeeValuesType = FeeValuesType,\r\n> = Compute<\r\n  viem_EstimateFeesPerGasReturnType<type> & {\r\n    /** @deprecated */\r\n    formatted: UnionCompute<\r\n      | (type extends 'legacy' ? FeeValuesLegacy<string> : never)\r\n      | (type extends 'eip1559' ? FeeValuesEIP1559<string> : never)\r\n    >\r\n  }\r\n>\r\n\r\nexport type EstimateFeesPerGasErrorType = viem_EstimateFeesPerGasErrorType\r\n\r\nexport async function estimateFeesPerGas<\r\n  config extends Config,\r\n  type extends FeeValuesType = 'eip1559',\r\n>(\r\n  config: config,\r\n  parameters: EstimateFeesPerGasParameters<type, config> = {},\r\n): Promise<EstimateFeesPerGasReturnType<type>> {\r\n  const { chainId, formatUnits: units = 'gwei', ...rest } = parameters\r\n\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(\r\n    client,\r\n    viem_estimateFeesPerGas,\r\n    'estimateFeesPerGas',\r\n  )\r\n\r\n  const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = await action({\r\n    ...rest,\r\n    chain: client.chain,\r\n  })\r\n\r\n  const unit = getUnit(units)\r\n  const formatted = {\r\n    gasPrice: gasPrice ? formatUnits(gasPrice, unit) : undefined,\r\n    maxFeePerGas: maxFeePerGas ? formatUnits(maxFeePerGas, unit) : undefined,\r\n    maxPriorityFeePerGas: maxPriorityFeePerGas\r\n      ? formatUnits(maxPriorityFeePerGas, unit)\r\n      : undefined,\r\n  }\r\n\r\n  return {\r\n    formatted,\r\n    gasPrice,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n  } as EstimateFeesPerGasReturnType<type>\r\n}\r\n", "import type { Chain } from 'viem'\r\nimport {\r\n  type EstimateMaxPriorityFeePerGasErrorType as viem_EstimateMaxPriorityFeePerGasErrorType,\r\n  type EstimateMaxPriorityFeePerGasParameters as viem_EstimateMaxPriorityFeePerGasParameters,\r\n  type EstimateMaxPriorityFeePerGasReturnType as viem_EstimateMaxPriorityFeePerGasReturnType,\r\n  estimateMaxPriorityFeePerGas as viem_estimateMaxPriorityFeePerGas,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute, UnionLooseOmit } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type EstimateMaxPriorityFeePerGasParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  UnionLooseOmit<\r\n    viem_EstimateMaxPriorityFeePerGasParameters<Chain, Chain> &\r\n      ChainIdParameter<config, chainId>,\r\n    'chain'\r\n  >\r\n>\r\n\r\nexport type EstimateMaxPriorityFeePerGasReturnType =\r\n  viem_EstimateMaxPriorityFeePerGasReturnType\r\n\r\nexport type EstimateMaxPriorityFeePerGasErrorType =\r\n  viem_EstimateMaxPriorityFeePerGasErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/estimateMaxPriorityFeePerGas */\r\nexport async function estimateMaxPriorityFeePerGas<\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: EstimateMaxPriorityFeePerGasParameters<config, chainId> = {},\r\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\r\n  const { chainId } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(\r\n    client,\r\n    viem_estimateMaxPriorityFeePerGas,\r\n    'estimateMaxPriorityFeePerGas',\r\n  )\r\n  return action({ chain: client.chain })\r\n}\r\n", "import type { Address, Chain } from 'viem'\r\n\r\nimport type { Config, Connector } from '../createConfig.js'\r\n\r\nexport type GetAccountReturnType<\r\n  config extends Config = Config,\r\n  ///\r\n  chain = Config extends config ? Chain : config['chains'][number],\r\n> =\r\n  | {\r\n      address: Address\r\n      addresses: readonly [Address, ...Address[]]\r\n      chain: chain | undefined\r\n      chainId: number\r\n      connector: Connector\r\n      isConnected: true\r\n      isConnecting: false\r\n      isDisconnected: false\r\n      isReconnecting: false\r\n      status: 'connected'\r\n    }\r\n  | {\r\n      address: Address | undefined\r\n      addresses: readonly Address[] | undefined\r\n      chain: chain | undefined\r\n      chainId: number | undefined\r\n      connector: Connector | undefined\r\n      isConnected: boolean\r\n      isConnecting: false\r\n      isDisconnected: false\r\n      isReconnecting: true\r\n      status: 'reconnecting'\r\n    }\r\n  | {\r\n      address: Address | undefined\r\n      addresses: readonly Address[] | undefined\r\n      chain: chain | undefined\r\n      chainId: number | undefined\r\n      connector: Connector | undefined\r\n      isConnected: false\r\n      isReconnecting: false\r\n      isConnecting: true\r\n      isDisconnected: false\r\n      status: 'connecting'\r\n    }\r\n  | {\r\n      address: undefined\r\n      addresses: undefined\r\n      chain: undefined\r\n      chainId: undefined\r\n      connector: undefined\r\n      isConnected: false\r\n      isReconnecting: false\r\n      isConnecting: false\r\n      isDisconnected: true\r\n      status: 'disconnected'\r\n    }\r\n\r\n/** https://wagmi.sh/core/api/actions/getAccount */\r\nexport function getAccount<config extends Config>(\r\n  config: config,\r\n): GetAccountReturnType<config> {\r\n  const uid = config.state.current!\r\n  const connection = config.state.connections.get(uid)\r\n  const addresses = connection?.accounts\r\n  const address = addresses?.[0]\r\n  const chain = config.chains.find(\r\n    (chain) => chain.id === connection?.chainId,\r\n  ) as GetAccountReturnType<config>['chain']\r\n  const status = config.state.status\r\n\r\n  switch (status) {\r\n    case 'connected':\r\n      return {\r\n        address: address!,\r\n        addresses: addresses!,\r\n        chain,\r\n        chainId: connection?.chainId!,\r\n        connector: connection?.connector!,\r\n        isConnected: true,\r\n        isConnecting: false,\r\n        isDisconnected: false,\r\n        isReconnecting: false,\r\n        status,\r\n      }\r\n    case 'reconnecting':\r\n      return {\r\n        address,\r\n        addresses,\r\n        chain,\r\n        chainId: connection?.chainId,\r\n        connector: connection?.connector,\r\n        isConnected: !!address,\r\n        isConnecting: false,\r\n        isDisconnected: false,\r\n        isReconnecting: true,\r\n        status,\r\n      }\r\n    case 'connecting':\r\n      return {\r\n        address,\r\n        addresses,\r\n        chain,\r\n        chainId: connection?.chainId,\r\n        connector: connection?.connector,\r\n        isConnected: false,\r\n        isConnecting: true,\r\n        isDisconnected: false,\r\n        isReconnecting: false,\r\n        status,\r\n      }\r\n    case 'disconnected':\r\n      return {\r\n        address: undefined,\r\n        addresses: undefined,\r\n        chain: undefined,\r\n        chainId: undefined,\r\n        connector: undefined,\r\n        isConnected: false,\r\n        isConnecting: false,\r\n        isDisconnected: true,\r\n        isReconnecting: false,\r\n        status,\r\n      }\r\n  }\r\n}\r\n", "import type {\r\n  ContractFunctionParameters,\r\n  MulticallErrorType as viem_MulticallErrorType,\r\n  MulticallParameters as viem_MulticallParameters,\r\n  MulticallReturnType as viem_MulticallReturnType,\r\n} from 'viem'\r\nimport { multicall as viem_multicall } from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type MulticallParameters<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  config extends Config = Config,\r\n> = viem_MulticallParameters<contracts, allowFailure> & ChainIdParameter<config>\r\n\r\nexport type MulticallReturnType<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n> = viem_MulticallReturnType<contracts, allowFailure>\r\n\r\nexport type MulticallErrorType = viem_MulticallErrorType\r\n\r\nexport async function multicall<\r\n  config extends Config,\r\n  const contracts extends readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n>(\r\n  config: config,\r\n  parameters: MulticallParameters<contracts, allowFailure, config>,\r\n): Promise<MulticallReturnType<contracts, allowFailure>> {\r\n  const { allowFailure = true, chainId, contracts, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_multicall, 'multicall')\r\n  return action({\r\n    allowFailure,\r\n    contracts,\r\n    ...rest,\r\n  }) as Promise<MulticallReturnType<contracts, allowFailure>>\r\n}\r\n", "import type { Abi } from 'viem'\r\nimport type { ContractFunctionArgs, ContractFunctionName } from 'viem'\r\nimport {\r\n  type ReadContractErrorType as viem_ReadContractErrorType,\r\n  type ReadContractParameters as viem_ReadContractParameters,\r\n  type ReadContractReturnType as viem_ReadContractReturnType,\r\n  readContract as viem_readContract,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type ReadContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'pure' | 'view'\r\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'pure' | 'view',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  config extends Config = Config,\r\n> = viem_ReadContractParameters<abi, functionName, args> &\r\n  ChainIdParameter<config>\r\n\r\nexport type ReadContractReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'pure' | 'view'\r\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'pure' | 'view',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n> = viem_ReadContractReturnType<abi, functionName, args>\r\n\r\nexport type ReadContractErrorType = viem_ReadContractErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/readContract */\r\nexport function readContract<\r\n  config extends Config,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n>(\r\n  config: config,\r\n  parameters: ReadContractParameters<abi, functionName, args, config>,\r\n): Promise<ReadContractReturnType<abi, functionName, args>> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_readContract, 'readContract')\r\n  return action(rest as any)\r\n}\r\n", "import type {\r\n  ContractFunctionParameters,\r\n  MulticallParameters as viem_MulticallParameters,\r\n  MulticallReturnType as viem_MulticallReturnType,\r\n} from 'viem'\r\nimport { ContractFunctionExecutionError } from 'viem'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport { type MulticallErrorType, multicall } from './multicall.js'\r\nimport { type ReadContractErrorType, readContract } from './readContract.js'\r\n\r\nexport type ReadContractsParameters<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  config extends Config = Config,\r\n> = viem_MulticallParameters<\r\n  contracts,\r\n  allowFailure,\r\n  { properties: ChainIdParameter<config> }\r\n>\r\n\r\nexport type ReadContractsReturnType<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n> = viem_MulticallReturnType<contracts, allowFailure>\r\n\r\nexport type ReadContractsErrorType = MulticallErrorType | ReadContractErrorType\r\n\r\nexport async function readContracts<\r\n  config extends Config,\r\n  const contracts extends readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n>(\r\n  config: config,\r\n  parameters: ReadContractsParameters<contracts, allowFailure, config>,\r\n): Promise<ReadContractsReturnType<contracts, allowFailure>> {\r\n  const { allowFailure = true, blockNumber, blockTag, ...rest } = parameters\r\n  const contracts = parameters.contracts as (ContractFunctionParameters & {\r\n    chainId?: number | undefined\r\n  })[]\r\n\r\n  try {\r\n    const contractsByChainId: {\r\n      [chainId: number]: {\r\n        contract: ContractFunctionParameters\r\n        index: number\r\n      }[]\r\n    } = {}\r\n    for (const [index, contract] of contracts.entries()) {\r\n      const chainId = contract.chainId ?? config.state.chainId\r\n      if (!contractsByChainId[chainId]) contractsByChainId[chainId] = []\r\n      contractsByChainId[chainId]?.push({ contract, index })\r\n    }\r\n    const promises = () =>\r\n      Object.entries(contractsByChainId).map(([chainId, contracts]) =>\r\n        multicall(config, {\r\n          ...rest,\r\n          allowFailure,\r\n          blockNumber,\r\n          blockTag,\r\n          chainId: Number.parseInt(chainId),\r\n          contracts: contracts.map(({ contract }) => contract),\r\n        }),\r\n      )\r\n\r\n    const multicallResults = (await Promise.all(promises())).flat()\r\n    // Reorder the contract results back to the order they were\r\n    // provided in.\r\n    const resultIndexes = Object.values(contractsByChainId).flatMap(\r\n      (contracts) => contracts.map(({ index }) => index),\r\n    )\r\n    return multicallResults.reduce((results, result, index) => {\r\n      if (results) (results as unknown[])[resultIndexes[index]!] = result\r\n      return results\r\n    }, [] as unknown[]) as ReadContractsReturnType<contracts, allowFailure>\r\n  } catch (error) {\r\n    if (error instanceof ContractFunctionExecutionError) throw error\r\n\r\n    const promises = () =>\r\n      contracts.map((contract) =>\r\n        readContract(config, { ...contract, blockNumber, blockTag }),\r\n      )\r\n    if (allowFailure)\r\n      return (await Promise.allSettled(promises())).map((result) => {\r\n        if (result.status === 'fulfilled')\r\n          return { result: result.value, status: 'success' }\r\n        return { error: result.reason, result: undefined, status: 'failure' }\r\n      }) as ReadContractsReturnType<contracts, allowFailure>\r\n\r\n    return (await Promise.all(promises())) as ReadContractsReturnType<\r\n      contracts,\r\n      allowFailure\r\n    >\r\n  }\r\n}\r\n", "import { type Address, type Hex, formatUnits, hexToString, trim } from 'viem'\r\nimport {\r\n  type GetBalanceErrorType as viem_GetBalanceErrorType,\r\n  type GetBalanceParameters as viem_GetBalanceParameters,\r\n  getBalance as viem_getBalance,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Unit } from '../types/unit.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport { getUnit } from '../utils/getUnit.js'\r\nimport { type ReadContractsErrorType, readContracts } from './readContracts.js'\r\n\r\nexport type GetBalanceParameters<config extends Config = Config> = Compute<\r\n  ChainIdParameter<config> &\r\n    viem_GetBalanceParameters & {\r\n      /** @deprecated */\r\n      token?: Address | undefined\r\n      /** @deprecated */\r\n      unit?: Unit | undefined\r\n    }\r\n>\r\n\r\nexport type GetBalanceReturnType = {\r\n  decimals: number\r\n  /** @deprecated */\r\n  formatted: string\r\n  symbol: string\r\n  value: bigint\r\n}\r\n\r\nexport type GetBalanceErrorType = viem_GetBalanceErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getBalance */\r\nexport async function getBalance<config extends Config>(\r\n  config: config,\r\n  parameters: GetBalanceParameters<config>,\r\n): Promise<GetBalanceReturnType> {\r\n  const {\r\n    address,\r\n    blockNumber,\r\n    blockTag,\r\n    chainId,\r\n    token: tokenAddress,\r\n    unit = 'ether',\r\n  } = parameters\r\n\r\n  if (tokenAddress) {\r\n    try {\r\n      return await getTokenBalance(config, {\r\n        balanceAddress: address,\r\n        chainId,\r\n        symbolType: 'string',\r\n        tokenAddress,\r\n      })\r\n    } catch (error) {\r\n      // In the chance that there is an error upon decoding the contract result,\r\n      // it could be likely that the contract data is represented as bytes32 instead\r\n      // of a string.\r\n      if (\r\n        (error as ReadContractsErrorType).name ===\r\n        'ContractFunctionExecutionError'\r\n      ) {\r\n        const balance = await getTokenBalance(config, {\r\n          balanceAddress: address,\r\n          chainId,\r\n          symbolType: 'bytes32',\r\n          tokenAddress,\r\n        })\r\n        const symbol = hexToString(\r\n          trim(balance.symbol as Hex, { dir: 'right' }),\r\n        )\r\n        return { ...balance, symbol }\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getBalance, 'getBalance')\r\n  const value = await action(\r\n    blockNumber ? { address, blockNumber } : { address, blockTag },\r\n  )\r\n  const chain = config.chains.find((x) => x.id === chainId) ?? client.chain!\r\n  return {\r\n    decimals: chain.nativeCurrency.decimals,\r\n    formatted: formatUnits(value, getUnit(unit)),\r\n    symbol: chain.nativeCurrency.symbol,\r\n    value,\r\n  }\r\n}\r\n\r\ntype GetTokenBalanceParameters = {\r\n  balanceAddress: Address\r\n  chainId?: number | undefined\r\n  symbolType: 'bytes32' | 'string'\r\n  tokenAddress: Address\r\n  unit?: Unit | undefined\r\n}\r\n\r\nasync function getTokenBalance(\r\n  config: Config,\r\n  parameters: GetTokenBalanceParameters,\r\n) {\r\n  const { balanceAddress, chainId, symbolType, tokenAddress, unit } = parameters\r\n  const contract = {\r\n    abi: [\r\n      {\r\n        type: 'function',\r\n        name: 'balanceOf',\r\n        stateMutability: 'view',\r\n        inputs: [{ type: 'address' }],\r\n        outputs: [{ type: 'uint256' }],\r\n      },\r\n      {\r\n        type: 'function',\r\n        name: 'decimals',\r\n        stateMutability: 'view',\r\n        inputs: [],\r\n        outputs: [{ type: 'uint8' }],\r\n      },\r\n      {\r\n        type: 'function',\r\n        name: 'symbol',\r\n        stateMutability: 'view',\r\n        inputs: [],\r\n        outputs: [{ type: symbolType }],\r\n      },\r\n    ],\r\n    address: tokenAddress,\r\n  } as const\r\n  const [value, decimals, symbol] = await readContracts(config, {\r\n    allowFailure: false,\r\n    contracts: [\r\n      {\r\n        ...contract,\r\n        functionName: 'balanceOf',\r\n        args: [balanceAddress],\r\n        chainId,\r\n      },\r\n      { ...contract, functionName: 'decimals', chainId },\r\n      { ...contract, functionName: 'symbol', chainId },\r\n    ] as const,\r\n  })\r\n  const formatted = formatUnits(value ?? '0', getUnit(unit ?? decimals))\r\n  return { decimals, formatted, symbol, value }\r\n}\r\n", "import type { BlockTag, Chain } from 'viem'\r\nimport {\r\n  type GetBlockErrorType as viem_GetBlockErrorType,\r\n  type GetBlockParameters as viem_GetBlockParameters,\r\n  type GetBlockReturnType as viem_GetBlockReturnType,\r\n  getBlock as viem_getBlock,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute, IsNarrowable } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetBlockParameters<\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  viem_GetBlockParameters<includeTransactions, blockTag> &\r\n    ChainIdParameter<config, chainId>\r\n>\r\n\r\nexport type GetBlockReturnType<\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = Compute<\r\n  {\r\n    [key in keyof chains]: viem_GetBlockReturnType<\r\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined,\r\n      includeTransactions,\r\n      blockTag\r\n    > & { chainId: chains[key]['id'] }\r\n  }[number]\r\n>\r\n\r\nexport type GetBlockErrorType = viem_GetBlockErrorType\r\n\r\n/** https://wagmi.sh/core/actions/getBlock */\r\nexport async function getBlock<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n>(\r\n  config: config,\r\n  parameters: GetBlockParameters<\r\n    includeTransactions,\r\n    blockTag,\r\n    config,\r\n    chainId\r\n  > = {},\r\n): Promise<GetBlockReturnType<includeTransactions, blockTag, config, chainId>> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getBlock, 'getBlock')\r\n  const block = await action(rest)\r\n  return {\r\n    ...(block as unknown as GetBlockReturnType<\r\n      includeTransactions,\r\n      blockTag,\r\n      config,\r\n      chainId\r\n    >),\r\n    chainId: client.chain.id,\r\n  }\r\n}\r\n", "import {\r\n  type GetBlockNumberErrorType as viem_GetBlockNumberErrorType,\r\n  type GetBlockNumberParameters as viem_GetBlockNumberParameters,\r\n  type GetBlockNumberReturnType as viem_GetBlockNumberReturnType,\r\n  getBlockNumber as viem_getBlockNumber,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetBlockNumberParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<viem_GetBlockNumberParameters & ChainIdParameter<config, chainId>>\r\n\r\nexport type GetBlockNumberReturnType = viem_GetBlockNumberReturnType\r\n\r\nexport type GetBlockNumberErrorType = viem_GetBlockNumberErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getBlockNumber */\r\nexport function getBlockNumber<\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetBlockNumberParameters<config, chainId> = {},\r\n): Promise<GetBlockNumberReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getBlockNumber, 'getBlockNumber')\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetBlockTransactionCountErrorType as viem_GetBlockTransactionCountErrorType,\r\n  type GetBlockTransactionCountParameters as viem_GetBlockTransactionCountParameters,\r\n  type GetBlockTransactionCountReturnType as viem_GetBlockTransactionCountReturnType,\r\n  getBlockTransactionCount as viem_getBlockTransactionCount,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { UnionCompute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetBlockTransactionCountParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = UnionCompute<\r\n  viem_GetBlockTransactionCountParameters & ChainIdParameter<config, chainId>\r\n>\r\n\r\nexport type GetBlockTransactionCountReturnType =\r\n  viem_GetBlockTransactionCountReturnType\r\n\r\nexport type GetBlockTransactionCountErrorType =\r\n  viem_GetBlockTransactionCountErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getBlockTransactionCount */\r\nexport function getBlockTransactionCount<\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetBlockTransactionCountParameters<config, chainId> = {},\r\n): Promise<GetBlockTransactionCountReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(\r\n    client,\r\n    viem_getBlockTransactionCount,\r\n    'getBlockTransactionCount',\r\n  )\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetBytecodeErrorType as viem_GetBytecodeErrorType,\r\n  type GetBytecodeParameters as viem_GetBytecodeParameters,\r\n  type GetBytecodeReturnType as viem_GetBytecodeReturnType,\r\n  getBytecode as viem_getBytecode,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetBytecodeParameters<config extends Config = Config> = Compute<\r\n  viem_GetBytecodeParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetBytecodeReturnType = viem_GetBytecodeReturnType\r\n\r\nexport type GetBytecodeErrorType = viem_GetBytecodeErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getBytecode */\r\nexport async function getBytecode<config extends Config>(\r\n  config: config,\r\n  parameters: GetBytecodeParameters<config>,\r\n): Promise<GetBytecodeReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getBytecode, 'getBytecode')\r\n  return action(rest)\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\n\r\nexport type GetChainIdReturnType<config extends Config = Config> =\r\n  config['chains'][number]['id']\r\n\r\n/** https://wagmi.sh/core/api/actions/getChainId */\r\nexport function getChainId<config extends Config>(\r\n  config: config,\r\n): GetChainIdReturnType<config> {\r\n  return config.state.chainId\r\n}\r\n", "/** Forked from https://github.com/epoberezkin/fast-deep-equal */\r\n\r\nexport function deepEqual(a: any, b: any) {\r\n  if (a === b) return true\r\n\r\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n    if (a.constructor !== b.constructor) return false\r\n\r\n    let length: number\r\n    let i: number\r\n\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n      length = a.length\r\n      if (length !== b.length) return false\r\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\r\n      return true\r\n    }\r\n\r\n    if (a.valueOf !== Object.prototype.valueOf)\r\n      return a.valueOf() === b.valueOf()\r\n    if (a.toString !== Object.prototype.toString)\r\n      return a.toString() === b.toString()\r\n\r\n    const keys = Object.keys(a)\r\n    length = keys.length\r\n    if (length !== Object.keys(b).length) return false\r\n\r\n    for (i = length; i-- !== 0; )\r\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i]!)) return false\r\n\r\n    for (i = length; i-- !== 0; ) {\r\n      const key = keys[i]\r\n\r\n      if (key && !deepEqual(a[key], b[key])) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  // true if both NaN, false otherwise\r\n  // biome-ignore lint/suspicious/noSelfCompare: <explanation>\r\n  return a !== a && b !== b\r\n}\r\n", "import type { Chain } from 'viem'\r\nimport type { Config } from '../createConfig.js'\r\nimport { deepEqual } from '../utils/deepEqual.js'\r\n\r\nexport type GetChainsReturnType<config extends Config = Config> = readonly [\r\n  ...config['chains'],\r\n  ...Chain[],\r\n]\r\n\r\nlet previousChains: readonly Chain[] = []\r\n\r\n/** https://wagmi.sh/core/api/actions/getChains */\r\nexport function getChains<config extends Config>(\r\n  config: config,\r\n): GetChainsReturnType<config> {\r\n  const chains = config.chains\r\n  if (deepEqual(previousChains, chains))\r\n    return previousChains as GetChainsReturnType<config>\r\n  previousChains = chains\r\n  return chains as unknown as GetChainsReturnType<config>\r\n}\r\n", "import type { Client } from 'viem'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute, IsNarrowable } from '../types/utils.js'\r\n\r\nexport type GetClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | number\r\n    | undefined = config['chains'][number]['id'],\r\n> = ChainIdParameter<config, chainId>\r\n\r\nexport type GetClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  ///\r\n  resolvedChainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = IsNarrowable<\r\n    config['chains'][number]['id'],\r\n    number\r\n  > extends true\r\n    ? IsNarrowable<chainId, number> extends true\r\n      ? chainId\r\n      : config['chains'][number]['id']\r\n    : config['chains'][number]['id'] | undefined,\r\n> = resolvedChainId extends config['chains'][number]['id']\r\n  ? Compute<\r\n      Client<\r\n        config['_internal']['transports'][resolvedChainId],\r\n        Extract<config['chains'][number], { id: resolvedChainId }>\r\n      >\r\n    >\r\n  : undefined\r\n\r\nexport function getClient<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | number | undefined,\r\n>(\r\n  config: config,\r\n  parameters: GetClientParameters<config, chainId> = {},\r\n): GetClientReturnType<config, chainId> {\r\n  let client = undefined\r\n  try {\r\n    client = config.getClient(parameters)\r\n  } catch {}\r\n  return client as GetClientReturnType<config, chainId>\r\n}\r\n", "import type { Config, Connection } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { deepEqual } from '../utils/deepEqual.js'\r\n\r\nexport type GetConnectionsReturnType = Compute<Connection>[]\r\n\r\nlet previousConnections: Connection[] = []\r\n\r\n/** https://wagmi.sh/core/api/actions/getConnections */\r\nexport function getConnections(config: Config): GetConnectionsReturnType {\r\n  const connections = [...config.state.connections.values()]\r\n  if (config.state.status === 'reconnecting') return previousConnections\r\n  if (deepEqual(previousConnections, connections)) return previousConnections\r\n  previousConnections = connections\r\n  return connections\r\n}\r\n", "import type { Config, Connector } from '../createConfig.js'\r\nimport { deepEqual } from '../utils/deepEqual.js'\r\n\r\nexport type GetConnectorsReturnType<config extends Config = Config> =\r\n  config['connectors']\r\n\r\nlet previousConnectors: readonly Connector[] = []\r\n\r\n/** https://wagmi.sh/core/api/actions/getConnectors */\r\nexport function getConnectors<config extends Config>(\r\n  config: config,\r\n): GetConnectorsReturnType<config> {\r\n  const connectors = config.connectors\r\n  if (deepEqual(previousConnectors, connectors)) return previousConnectors\r\n  previousConnectors = connectors\r\n  return connectors\r\n}\r\n", "import {\r\n  type GetEnsAddressErrorType as viem_GetEnsAddressErrorType,\r\n  type GetEnsAddressParameters as viem_GetEnsAddressParameters,\r\n  type GetEnsAddressReturnType as viem_GetEnsAddressReturnType,\r\n  getEnsAddress as viem_getEnsAddress,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetEnsAddressParameters<config extends Config = Config> = Compute<\r\n  viem_GetEnsAddressParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetEnsAddressReturnType = viem_GetEnsAddressReturnType\r\n\r\nexport type GetEnsAddressErrorType = viem_GetEnsAddressErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getEnsAddress */\r\nexport function getEnsAddress<config extends Config>(\r\n  config: config,\r\n  parameters: GetEnsAddressParameters<config>,\r\n): Promise<GetEnsAddressReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getEnsAddress, 'getEnsAddress')\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetEnsAvatarErrorType as viem_GetEnsAvatarErrorType,\r\n  type GetEnsAvatarParameters as viem_GetEnsAvatarParameters,\r\n  type GetEnsAvatarReturnType as viem_GetEnsAvatarReturnType,\r\n  getEnsAvatar as viem_getEnsAvatar,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetEnsAvatarParameters<config extends Config = Config> = Compute<\r\n  viem_GetEnsAvatarParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetEnsAvatarReturnType = viem_GetEnsAvatarReturnType\r\n\r\nexport type GetEnsAvatarErrorType = viem_GetEnsAvatarErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getEnsAvatar */\r\nexport function getEnsAvatar<config extends Config>(\r\n  config: config,\r\n  parameters: GetEnsAvatarParameters<config>,\r\n): Promise<GetEnsAvatarReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getEnsAvatar, 'getEnsAvatar')\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetEnsNameErrorType as viem_GetEnsNameErrorType,\r\n  type GetEnsNameParameters as viem_GetEnsNameParameters,\r\n  type GetEnsNameReturnType as viem_GetEnsNameReturnType,\r\n  getEnsName as viem_getEnsName,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetEnsNameParameters<config extends Config = Config> = Compute<\r\n  viem_GetEnsNameParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetEnsNameReturnType = viem_GetEnsNameReturnType\r\n\r\nexport type GetEnsNameErrorType = viem_GetEnsNameErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getEnsName */\r\nexport function getEnsName<config extends Config>(\r\n  config: config,\r\n  parameters: GetEnsNameParameters<config>,\r\n): Promise<GetEnsNameReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getEnsName, 'getEnsName')\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetEnsResolverErrorType as viem_GetEnsResolverErrorType,\r\n  type GetEnsResolverParameters as viem_GetEnsResolverParameters,\r\n  type GetEnsResolverReturnType as viem_GetEnsResolverReturnType,\r\n  getEnsResolver as viem_getEnsResolver,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetEnsResolverParameters<config extends Config = Config> = Compute<\r\n  viem_GetEnsResolverParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetEnsResolverReturnType = viem_GetEnsResolverReturnType\r\n\r\nexport type GetEnsResolverErrorType = viem_GetEnsResolverErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getEnsResolver */\r\nexport function getEnsResolver<config extends Config>(\r\n  config: config,\r\n  parameters: GetEnsResolverParameters<config>,\r\n): Promise<GetEnsResolverReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getEnsResolver, 'getEnsResolver')\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetEnsTextErrorType as viem_GetEnsTextErrorType,\r\n  type GetEnsTextParameters as viem_GetEnsTextParameters,\r\n  type GetEnsTextReturnType as viem_GetEnsTextReturnType,\r\n  getEnsText as viem_getEnsText,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetEnsTextParameters<config extends Config = Config> = Compute<\r\n  viem_GetEnsTextParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetEnsTextReturnType = viem_GetEnsTextReturnType\r\n\r\nexport type GetEnsTextErrorType = viem_GetEnsTextErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getEnsText */\r\nexport function getEnsText<config extends Config>(\r\n  config: config,\r\n  parameters: GetEnsTextParameters<config>,\r\n): Promise<GetEnsTextReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getEnsText, 'getEnsText')\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetFeeHistoryErrorType as viem_GetFeeHistoryErrorType,\r\n  type GetFeeHistoryParameters as viem_GetFeeHistoryParameters,\r\n  type GetFeeHistoryReturnType as viem_GetFeeHistoryReturnType,\r\n  getFeeHistory as viem_getFeeHistory,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetFeeHistoryParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<viem_GetFeeHistoryParameters & ChainIdParameter<config, chainId>>\r\n\r\nexport type GetFeeHistoryReturnType = viem_GetFeeHistoryReturnType\r\n\r\nexport type GetFeeHistoryErrorType = viem_GetFeeHistoryErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getFeeHistory */\r\nexport function getFeeHistory<\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetFeeHistoryParameters<config, chainId>,\r\n): Promise<GetFeeHistoryReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getFeeHistory, 'getFeeHistory')\r\n  return action(rest)\r\n}\r\n", "import {\r\n  type GetGasPriceErrorType as viem_GetGasPriceErrorType,\r\n  type GetGasPriceReturnType as viem_GetGasPriceReturnType,\r\n  getGasPrice as viem_getGasPrice,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetGasPriceParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<ChainIdParameter<config, chainId>>\r\n\r\nexport type GetGasPriceReturnType = viem_GetGasPriceReturnType\r\n\r\nexport type GetGasPriceErrorType = viem_GetGasPriceErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getGasPrice */\r\nexport function getGasPrice<\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetGasPriceParameters<config, chainId> = {},\r\n): Promise<GetGasPriceReturnType> {\r\n  const { chainId } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getGasPrice, 'getGasPrice')\r\n  return action({})\r\n}\r\n", "import {\r\n  type GetProofErrorType as viem_GetProofErrorType,\r\n  type GetProofParameters as viem_GetProofParameters,\r\n  type GetProofReturnType as viem_GetProofReturnType,\r\n  getProof as viem_getProof,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetProofParameters<config extends Config = Config> = Compute<\r\n  viem_GetProofParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetProofReturnType = viem_GetProofReturnType\r\n\r\nexport type GetProofErrorType = viem_GetProofErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getProof */\r\nexport async function getProof<config extends Config>(\r\n  config: config,\r\n  parameters: GetProofParameters<config>,\r\n): Promise<GetProofReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getProof, 'getProof')\r\n  return action(rest)\r\n}\r\n", "import { type Client, type PublicClient, publicActions } from 'viem'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute, IsNarrowable } from '../types/utils.js'\r\nimport { getClient } from './getClient.js'\r\n\r\nexport type GetPublicClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n> = ChainIdParameter<config, chainId>\r\n\r\nexport type GetPublicClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  ///\r\n  resolvedChainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = IsNarrowable<\r\n    config['chains'][number]['id'],\r\n    number\r\n  > extends true\r\n    ? IsNarrowable<chainId, number> extends true\r\n      ? chainId\r\n      : config['chains'][number]['id']\r\n    : config['chains'][number]['id'] | undefined,\r\n> = resolvedChainId extends config['chains'][number]['id']\r\n  ? Compute<\r\n      PublicClient<\r\n        config['_internal']['transports'][resolvedChainId],\r\n        Extract<config['chains'][number], { id: resolvedChainId }>\r\n      >\r\n    >\r\n  : undefined\r\n\r\nexport function getPublicClient<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | number | undefined,\r\n>(\r\n  config: config,\r\n  parameters: GetPublicClientParameters<config, chainId> = {},\r\n): GetPublicClientReturnType<config, chainId> {\r\n  const client = getClient(config, parameters)\r\n  return (client as Client)?.extend(publicActions) as GetPublicClientReturnType<\r\n    config,\r\n    chainId\r\n  >\r\n}\r\n", "import {\r\n  type GetStorageAtErrorType as viem_GetStorageAtErrorType,\r\n  type GetStorageAtParameters as viem_GetStorageAtParameters,\r\n  type GetStorageAtReturnType as viem_GetStorageAtReturnType,\r\n  getStorageAt as viem_getStorageAt,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetStorageAtParameters<config extends Config = Config> = Compute<\r\n  viem_GetStorageAtParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type GetStorageAtReturnType = viem_GetStorageAtReturnType\r\n\r\nexport type GetStorageAtErrorType = viem_GetStorageAtErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getStorageAt */\r\nexport async function getStorageAt<config extends Config>(\r\n  config: config,\r\n  parameters: GetStorageAtParameters<config>,\r\n): Promise<GetStorageAtReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getStorageAt, 'getStorageAt')\r\n  return action(rest)\r\n}\r\n", "import type { Address, Hex } from 'viem'\r\nimport {\r\n  ContractFunctionExecutionError,\r\n  formatUnits,\r\n  hexToString,\r\n  trim,\r\n} from 'viem'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Unit } from '../types/unit.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getUnit } from '../utils/getUnit.js'\r\nimport { type ReadContractsErrorType, readContracts } from './readContracts.js'\r\n\r\nexport type GetTokenParameters<config extends Config = Config> = Compute<\r\n  ChainIdParameter<config> & {\r\n    address: Address\r\n    formatUnits?: Unit | undefined\r\n  }\r\n>\r\n\r\nexport type GetTokenReturnType = {\r\n  address: Address\r\n  decimals: number\r\n  name: string | undefined\r\n  symbol: string | undefined\r\n  totalSupply: {\r\n    formatted: string\r\n    value: bigint\r\n  }\r\n}\r\n\r\nexport type GetTokenErrorType = ReadContractsErrorType\r\n\r\n/** @deprecated */\r\nexport async function getToken<config extends Config>(\r\n  config: config,\r\n  parameters: GetTokenParameters<config>,\r\n): Promise<GetTokenReturnType> {\r\n  const { address, chainId, formatUnits: unit = 18 } = parameters\r\n\r\n  function getAbi<type extends 'bytes32' | 'string'>(type: type) {\r\n    return [\r\n      {\r\n        type: 'function',\r\n        name: 'decimals',\r\n        stateMutability: 'view',\r\n        inputs: [],\r\n        outputs: [{ type: 'uint8' }],\r\n      },\r\n      {\r\n        type: 'function',\r\n        name: 'name',\r\n        stateMutability: 'view',\r\n        inputs: [],\r\n        outputs: [{ type }],\r\n      },\r\n      {\r\n        type: 'function',\r\n        name: 'symbol',\r\n        stateMutability: 'view',\r\n        inputs: [],\r\n        outputs: [{ type }],\r\n      },\r\n      {\r\n        type: 'function',\r\n        name: 'totalSupply',\r\n        stateMutability: 'view',\r\n        inputs: [],\r\n        outputs: [{ type: 'uint256' }],\r\n      },\r\n    ] as const\r\n  }\r\n\r\n  try {\r\n    const abi = getAbi('string')\r\n    const contractConfig = { address, abi, chainId } as const\r\n    const [decimals, name, symbol, totalSupply] = await readContracts(config, {\r\n      allowFailure: true,\r\n      contracts: [\r\n        { ...contractConfig, functionName: 'decimals' },\r\n        { ...contractConfig, functionName: 'name' },\r\n        { ...contractConfig, functionName: 'symbol' },\r\n        { ...contractConfig, functionName: 'totalSupply' },\r\n      ] as const,\r\n    })\r\n\r\n    // throw if `name` or `symbol` failed\r\n    if (name.error instanceof ContractFunctionExecutionError) throw name.error\r\n    if (symbol.error instanceof ContractFunctionExecutionError)\r\n      throw symbol.error\r\n\r\n    // `decimals` and `totalSupply` are required\r\n    if (decimals.error) throw decimals.error\r\n    if (totalSupply.error) throw totalSupply.error\r\n\r\n    return {\r\n      address,\r\n      decimals: decimals.result,\r\n      name: name.result,\r\n      symbol: symbol.result,\r\n      totalSupply: {\r\n        formatted: formatUnits(totalSupply.result!, getUnit(unit)),\r\n        value: totalSupply.result,\r\n      },\r\n    }\r\n  } catch (error) {\r\n    // In the chance that there is an error upon decoding the contract result,\r\n    // it could be likely that the contract data is represented as bytes32 instead\r\n    // of a string.\r\n    if (error instanceof ContractFunctionExecutionError) {\r\n      const abi = getAbi('bytes32')\r\n      const contractConfig = { address, abi, chainId } as const\r\n      const [decimals, name, symbol, totalSupply] = await readContracts(\r\n        config,\r\n        {\r\n          allowFailure: false,\r\n          contracts: [\r\n            { ...contractConfig, functionName: 'decimals' },\r\n            { ...contractConfig, functionName: 'name' },\r\n            { ...contractConfig, functionName: 'symbol' },\r\n            { ...contractConfig, functionName: 'totalSupply' },\r\n          ] as const,\r\n        },\r\n      )\r\n      return {\r\n        address,\r\n        decimals,\r\n        name: hexToString(trim(name as Hex, { dir: 'right' })),\r\n        symbol: hexToString(trim(symbol as Hex, { dir: 'right' })),\r\n        totalSupply: {\r\n          formatted: formatUnits(totalSupply, getUnit(unit)),\r\n          value: totalSupply,\r\n        },\r\n      }\r\n    }\r\n\r\n    throw error\r\n  }\r\n}\r\n", "import type { Chain } from 'viem'\r\nimport {\r\n  type GetTransactionErrorType as viem_GetTransactionErrorType,\r\n  type GetTransactionParameters as viem_GetTransactionParameters,\r\n  type GetTransactionReturnType as viem_GetTransactionReturnType,\r\n  getTransaction as viem_getTransaction,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute, IsNarrowable } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetTransactionParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<viem_GetTransactionParameters & ChainIdParameter<config, chainId>>\r\n\r\nexport type GetTransactionReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = Compute<\r\n  {\r\n    [key in keyof chains]: viem_GetTransactionReturnType<\r\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined\r\n    > & { chainId: chains[key]['id'] }\r\n  }[number]\r\n>\r\n\r\nexport type GetTransactionErrorType = viem_GetTransactionErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getTransaction */\r\nexport function getTransaction<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetTransactionParameters<config, chainId>,\r\n): Promise<GetTransactionReturnType<config, chainId>> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_getTransaction, 'getTransaction')\r\n  return action(rest) as unknown as Promise<\r\n    GetTransactionReturnType<config, chainId>\r\n  >\r\n}\r\n", "import type { Chain } from 'viem'\r\nimport {\r\n  type GetTransactionConfirmationsErrorType as viem_GetTransactionConfirmationsErrorType,\r\n  type GetTransactionConfirmationsParameters as viem_GetTransactionConfirmationsParameters,\r\n  type GetTransactionConfirmationsReturnType as viem_GetTransactionConfirmationsReturnType,\r\n  getTransactionConfirmations as viem_getTransactionConfirmations,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetTransactionConfirmationsParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: viem_GetTransactionConfirmationsParameters<\r\n    chains[key]\r\n  > &\r\n    ChainIdParameter<config, chainId>\r\n}[number]\r\n\r\nexport type GetTransactionConfirmationsReturnType =\r\n  viem_GetTransactionConfirmationsReturnType\r\n\r\nexport type GetTransactionConfirmationsErrorType =\r\n  viem_GetTransactionConfirmationsErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getTransactionConfirmations */\r\nexport function getTransactionConfirmations<\r\n  config extends Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetTransactionConfirmationsParameters<config, chainId>,\r\n): Promise<GetTransactionConfirmationsReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(\r\n    client,\r\n    viem_getTransactionConfirmations,\r\n    'getTransactionConfirmations',\r\n  )\r\n  return action(rest as viem_GetTransactionConfirmationsParameters)\r\n}\r\n", "import {\r\n  type GetTransactionCountErrorType as viem_GetTransactionCountErrorType,\r\n  type GetTransactionCountParameters as viem_GetTransactionCountParameters,\r\n  type GetTransactionCountReturnType as viem_GetTransactionCountReturnType,\r\n  getTransactionCount as viem_getTransactionCount,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetTransactionCountParameters<config extends Config = Config> =\r\n  Compute<ChainIdParameter<config> & viem_GetTransactionCountParameters>\r\n\r\nexport type GetTransactionCountReturnType = viem_GetTransactionCountReturnType\r\n\r\nexport type GetTransactionCountErrorType = viem_GetTransactionCountErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getTransactionCount */\r\nexport async function getTransactionCount<config extends Config>(\r\n  config: config,\r\n  parameters: GetTransactionCountParameters<config>,\r\n): Promise<GetTransactionCountReturnType> {\r\n  const { address, blockNumber, blockTag, chainId } = parameters\r\n\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(\r\n    client,\r\n    viem_getTransactionCount,\r\n    'getTransactionCount',\r\n  )\r\n  return action(blockNumber ? { address, blockNumber } : { address, blockTag })\r\n}\r\n", "import type { Chain } from 'viem'\r\nimport {\r\n  type GetTransactionReceiptErrorType as viem_GetTransactionReceiptErrorType,\r\n  type GetTransactionReceiptParameters as viem_GetTransactionReceiptParameters,\r\n  type GetTransactionReceiptReturnType as viem_GetTransactionReceiptReturnType,\r\n  getTransactionReceipt as viem_getTransactionReceipt,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute, IsNarrowable } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type GetTransactionReceiptParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  viem_GetTransactionReceiptParameters & ChainIdParameter<config, chainId>\r\n>\r\n\r\nexport type GetTransactionReceiptReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = Compute<\r\n  {\r\n    [key in keyof chains]: viem_GetTransactionReceiptReturnType<\r\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined\r\n    > & { chainId: chains[key]['id'] }\r\n  }[number]\r\n>\r\n\r\nexport type GetTransactionReceiptErrorType = viem_GetTransactionReceiptErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/getTransactionReceipt */\r\nexport async function getTransactionReceipt<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetTransactionReceiptParameters<config>,\r\n): Promise<GetTransactionReceiptReturnType<config, chainId>> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(\r\n    client,\r\n    viem_getTransactionReceipt,\r\n    'getTransactionReceipt',\r\n  )\r\n  return action(rest) as unknown as Promise<\r\n    GetTransactionReceiptReturnType<config, chainId>\r\n  >\r\n}\r\n", "import { type Account, type WalletClient, walletActions } from 'viem'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  type GetConnectorClientParameters,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type GetWalletClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = GetConnectorClientParameters<Config, chainId>\r\n\r\nexport type GetWalletClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  WalletClient<\r\n    config['_internal']['transports'][chainId],\r\n    Extract<config['chains'][number], { id: chainId }>,\r\n    Account\r\n  >\r\n>\r\n\r\nexport type GetWalletClientErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n\r\nexport async function getWalletClient<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: GetWalletClientParameters<config, chainId> = {},\r\n): Promise<GetWalletClientReturnType<config, chainId>> {\r\n  const client = await getConnectorClient(config, parameters)\r\n  // @ts-ignore\r\n  return client.extend(walletActions) as unknown as GetWalletClientReturnType<\r\n    config,\r\n    chainId\r\n  >\r\n}\r\n", "import type {\r\n  Account,\r\n  Address,\r\n  Chain,\r\n  PrepareTransactionRequestErrorType as viem_PrepareTransactionRequestErrorType,\r\n  PrepareTransactionRequestParameters as viem_PrepareTransactionRequestParameters,\r\n  PrepareTransactionRequestRequest as viem_PrepareTransactionRequestRequest,\r\n  PrepareTransactionRequestReturnType as viem_PrepareTransactionRequestReturnType,\r\n} from 'viem'\r\nimport { prepareTransactionRequest as viem_prepareTransactionRequest } from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type {\r\n  Compute,\r\n  IsNarrowable,\r\n  UnionCompute,\r\n  UnionStrictOmit,\r\n} from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport { getAccount } from './getAccount.js'\r\n\r\nexport type PrepareTransactionRequestParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  > = viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: UnionCompute<\r\n    UnionStrictOmit<\r\n      viem_PrepareTransactionRequestParameters<\r\n        chains[key],\r\n        Account,\r\n        chains[key],\r\n        Account | Address,\r\n        request extends viem_PrepareTransactionRequestRequest<\r\n          chains[key],\r\n          chains[key]\r\n        >\r\n          ? request\r\n          : never\r\n      >,\r\n      'chain'\r\n    > &\r\n      ChainIdParameter<config, chainId> & {\r\n        to: Address\r\n      }\r\n  >\r\n}[number]\r\n\r\nexport type PrepareTransactionRequestReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  > = viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: Compute<\r\n    viem_PrepareTransactionRequestReturnType<\r\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined,\r\n      Account,\r\n      chains[key],\r\n      Account,\r\n      request extends viem_PrepareTransactionRequestRequest<\r\n        IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined,\r\n        chains[key]\r\n      >\r\n        ? request\r\n        : never\r\n    >\r\n  > & {\r\n    chainId: chains[key]['id']\r\n  }\r\n}[number]\r\n\r\nexport type PrepareTransactionRequestErrorType =\r\n  viem_PrepareTransactionRequestErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/prepareTransactionRequest */\r\nexport async function prepareTransactionRequest<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n  const request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>['0'],\r\n    SelectChains<config, chainId>['0']\r\n  >,\r\n>(\r\n  config: config,\r\n  parameters: PrepareTransactionRequestParameters<config, chainId, request>,\r\n): Promise<PrepareTransactionRequestReturnType<config, chainId, request>> {\r\n  const { account: account_, chainId, ...rest } = parameters\r\n\r\n  const account = account_ ?? getAccount(config).address\r\n  const client = config.getClient({ chainId })\r\n\r\n  const action = getAction(\r\n    client,\r\n    viem_prepareTransactionRequest,\r\n    'prepareTransactionRequest',\r\n  )\r\n  return action({\r\n    ...rest,\r\n    ...(account ? { account } : {}),\r\n  } as unknown as viem_PrepareTransactionRequestParameters) as unknown as Promise<\r\n    PrepareTransactionRequestReturnType<config, chainId, request>\r\n  >\r\n}\r\n", "import type { Address } from 'viem'\r\n\r\nimport type { CreateConnectorFn } from '../connectors/createConnector.js'\r\nimport type { Config, Connection, Connector } from '../createConfig.js'\r\nimport type { ErrorType } from '../errors/base.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport type ReconnectParameters = {\r\n  /** Connectors to attempt reconnect with */\r\n  connectors?: readonly (CreateConnectorFn | Connector)[] | undefined\r\n}\r\n\r\nexport type ReconnectReturnType = Compute<Connection>[]\r\n\r\nexport type ReconnectErrorType = ErrorType\r\n\r\nlet isReconnecting = false\r\n\r\n/** https://wagmi.sh/core/api/actions/reconnect */\r\nexport async function reconnect(\r\n  config: Config,\r\n  parameters: ReconnectParameters = {},\r\n): Promise<ReconnectReturnType> {\r\n  // If already reconnecting, do nothing\r\n  if (isReconnecting) return []\r\n  isReconnecting = true\r\n\r\n  config.setState((x) => ({\r\n    ...x,\r\n    status: x.current ? 'reconnecting' : 'connecting',\r\n  }))\r\n\r\n  const connectors: Connector[] = []\r\n  if (parameters.connectors?.length) {\r\n    for (const connector_ of parameters.connectors) {\r\n      let connector: Connector\r\n      // \"Register\" connector if not already created\r\n      if (typeof connector_ === 'function')\r\n        connector = config._internal.connectors.setup(connector_)\r\n      else connector = connector_\r\n      connectors.push(connector)\r\n    }\r\n  } else connectors.push(...config.connectors)\r\n\r\n  // Try recently-used connectors first\r\n  let recentConnectorId: string | null | undefined\r\n  try {\r\n    recentConnectorId = await config.storage?.getItem('recentConnectorId')\r\n  } catch {}\r\n  const scores: Record<string, number> = {}\r\n  for (const [, connection] of config.state.connections) {\r\n    scores[connection.connector.id] = 1\r\n  }\r\n  if (recentConnectorId) scores[recentConnectorId] = 0\r\n  const sorted =\r\n    Object.keys(scores).length > 0\r\n      ? // .toSorted()\r\n        [...connectors].sort(\r\n          (a, b) => (scores[a.id] ?? 10) - (scores[b.id] ?? 10),\r\n        )\r\n      : connectors\r\n\r\n  // Iterate through each connector and try to connect\r\n  let connected = false\r\n  const connections: Connection[] = []\r\n  const providers: unknown[] = []\r\n  for (const connector of sorted) {\r\n    const provider = await connector.getProvider().catch(() => undefined)\r\n    if (!provider) continue\r\n\r\n    // If we already have an instance of this connector's provider,\r\n    // then we have already checked it (ie. injected connectors can\r\n    // share the same `window.ethereum` instance, so we don't want to\r\n    // connect to it again).\r\n    if (providers.some((x) => x === provider)) continue\r\n\r\n    const isAuthorized = await connector.isAuthorized()\r\n    if (!isAuthorized) continue\r\n\r\n    const data = await connector\r\n      .connect({ isReconnecting: true })\r\n      .catch(() => null)\r\n    if (!data) continue\r\n\r\n    connector.emitter.off('connect', config._internal.events.connect)\r\n    connector.emitter.on('change', config._internal.events.change)\r\n    connector.emitter.on('disconnect', config._internal.events.disconnect)\r\n\r\n    config.setState((x) => {\r\n      const connections = new Map(connected ? x.connections : new Map()).set(\r\n        connector.uid,\r\n        { accounts: data.accounts, chainId: data.chainId, connector },\r\n      )\r\n      return {\r\n        ...x,\r\n        current: connected ? x.current : connector.uid,\r\n        connections,\r\n      }\r\n    })\r\n    connections.push({\r\n      accounts: data.accounts as readonly [Address, ...Address[]],\r\n      chainId: data.chainId,\r\n      connector,\r\n    })\r\n    providers.push(provider)\r\n    connected = true\r\n  }\r\n\r\n  // Prevent overwriting connected status from race condition\r\n  if (\r\n    config.state.status === 'reconnecting' ||\r\n    config.state.status === 'connecting'\r\n  ) {\r\n    // If connecting didn't succeed, set to disconnected\r\n    if (!connected)\r\n      config.setState((x) => ({\r\n        ...x,\r\n        connections: new Map(),\r\n        current: null,\r\n        status: 'disconnected',\r\n      }))\r\n    else config.setState((x) => ({ ...x, status: 'connected' }))\r\n  }\r\n\r\n  isReconnecting = false\r\n  return connections\r\n}\r\n", "import type {\r\n  Account,\r\n  Chain,\r\n  Client,\r\n  TransactionRequest,\r\n  SendTransactionErrorType as viem_SendTransactionErrorType,\r\n  SendTransactionParameters as viem_SendTransactionParameters,\r\n  SendTransactionReturnType as viem_SendTransactionReturnType,\r\n} from 'viem'\r\nimport { sendTransaction as viem_sendTransaction } from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  ConnectorParameter,\r\n} from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type SendTransactionParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: Compute<\r\n    Omit<\r\n      viem_SendTransactionParameters<chains[key], Account, chains[key]>,\r\n      'chain' | 'gas'\r\n    > &\r\n      ChainIdParameter<config, chainId> &\r\n      ConnectorParameter\r\n  >\r\n}[number] & {\r\n  /** Gas provided for transaction execution. */\r\n  gas?: TransactionRequest['gas'] | null\r\n}\r\n\r\nexport type SendTransactionReturnType = viem_SendTransactionReturnType\r\n\r\nexport type SendTransactionErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_SendTransactionErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/sendTransaction */\r\nexport async function sendTransaction<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: SendTransactionParameters<config, chainId>,\r\n): Promise<SendTransactionReturnType> {\r\n  const { account, chainId, connector, ...rest } = parameters\r\n\r\n  let client: Client\r\n  if (typeof account === 'object' && account?.type === 'local')\r\n    client = config.getClient({ chainId })\r\n  else\r\n    client = await getConnectorClient(config, {\r\n      account: account ?? undefined,\r\n      chainId,\r\n      connector,\r\n    })\r\n\r\n  const action = getAction(client, viem_sendTransaction, 'sendTransaction')\r\n  const hash = await action({\r\n    ...(rest as any),\r\n    ...(account ? { account } : {}),\r\n    chain: chainId ? { id: chainId } : null,\r\n    gas: rest.gas ?? undefined,\r\n  })\r\n\r\n  return hash\r\n}\r\n", "import type { Account, Client } from 'viem'\r\nimport {\r\n  type SignMessageErrorType as viem_SignMessageErrorType,\r\n  type SignMessageParameters as viem_SignMessageParameters,\r\n  type SignMessageReturnType as viem_SignMessageReturnType,\r\n  signMessage as viem_signMessage,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { ConnectorParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type SignMessageParameters = Compute<\r\n  viem_SignMessageParameters<Account> & ConnectorParameter\r\n>\r\n\r\nexport type SignMessageReturnType = viem_SignMessageReturnType\r\n\r\nexport type SignMessageErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_SignMessageErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/signMessage */\r\nexport async function signMessage(\r\n  config: Config,\r\n  parameters: SignMessageParameters,\r\n): Promise<SignMessageReturnType> {\r\n  const { account, connector, ...rest } = parameters\r\n\r\n  let client: Client\r\n  if (typeof account === 'object' && account.type === 'local')\r\n    client = config.getClient()\r\n  else client = await getConnectorClient(config, { account, connector })\r\n\r\n  const action = getAction(client, viem_signMessage, 'signMessage')\r\n  return action({\r\n    ...rest,\r\n    ...(account ? { account } : {}),\r\n  } as viem_SignMessageParameters<Account>)\r\n}\r\n", "import type { Account, Client, TypedData } from 'viem'\r\nimport {\r\n  type SignMessageErrorType as viem_SignMessageErrorType,\r\n  type SignTypedDataParameters as viem_SignTypedDataParameters,\r\n  type SignTypedDataReturnType as viem_SignTypedDataReturnType,\r\n  signTypedData as viem_signTypedData,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { ConnectorParameter } from '../types/properties.js'\r\nimport type { UnionCompute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type SignTypedDataParameters<\r\n  typedData extends TypedData | Record<string, unknown> = TypedData,\r\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\r\n  ///\r\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\r\n> = UnionCompute<\r\n  viem_SignTypedDataParameters<typedData, primaryType, Account, primaryTypes> &\r\n    ConnectorParameter\r\n>\r\n\r\nexport type SignTypedDataReturnType = viem_SignTypedDataReturnType\r\n\r\nexport type SignTypedDataErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_SignMessageErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/signTypedData */\r\nexport async function signTypedData<\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(\r\n  config: Config,\r\n  parameters: SignTypedDataParameters<typedData, primaryType>,\r\n): Promise<SignTypedDataReturnType> {\r\n  const { account, connector, ...rest } = parameters\r\n\r\n  let client: Client\r\n  if (typeof account === 'object' && account.type === 'local')\r\n    client = config.getClient()\r\n  else client = await getConnectorClient(config, { account, connector })\r\n\r\n  const action = getAction(client, viem_signTypedData, 'signTypedData')\r\n  return action({\r\n    ...rest,\r\n    ...(account ? { account } : {}),\r\n  } as unknown as viem_SignTypedDataParameters)\r\n}\r\n", "import type {\r\n  Abi,\r\n  Account,\r\n  Address,\r\n  Chain,\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from 'viem'\r\nimport {\r\n  type SimulateContractErrorType as viem_SimulateContractErrorType,\r\n  type SimulateContractParameters as viem_SimulateContractParameters,\r\n  type SimulateContractReturnType as viem_SimulateContractReturnType,\r\n  simulateContract as viem_simulateContract,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  ConnectorParameter,\r\n} from '../types/properties.js'\r\nimport type {\r\n  Compute,\r\n  PartialBy,\r\n  UnionCompute,\r\n  UnionStrictOmit,\r\n} from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type SimulateContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: UnionCompute<\r\n    UnionStrictOmit<\r\n      viem_SimulateContractParameters<\r\n        abi,\r\n        functionName,\r\n        args,\r\n        chains[key],\r\n        chains[key],\r\n        Account | Address\r\n      >,\r\n      'chain'\r\n    >\r\n  > &\r\n    ChainIdParameter<config, chainId> &\r\n    ConnectorParameter\r\n}[number]\r\n\r\nexport type SimulateContractReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  config extends Config = Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: viem_SimulateContractReturnType<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    chains[key],\r\n    Account,\r\n    chains[key]\r\n  > & {\r\n    chainId: chains[key]['id']\r\n    request: Compute<\r\n      PartialBy<\r\n        { chainId: chainId; chain: chains[key] },\r\n        chainId extends config['chains'][number]['id'] ? never : 'chainId'\r\n      >\r\n    >\r\n  }\r\n}[number]\r\n\r\nexport type SimulateContractErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_SimulateContractErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/simulateContract */\r\nexport async function simulateContract<\r\n  config extends Config,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n>(\r\n  config: config,\r\n  parameters: SimulateContractParameters<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    config,\r\n    chainId\r\n  >,\r\n): Promise<\r\n  SimulateContractReturnType<abi, functionName, args, config, chainId>\r\n> {\r\n  const { abi, chainId, connector, ...rest } =\r\n    parameters as SimulateContractParameters\r\n\r\n  let account: Address | Account\r\n  if (parameters.account) account = parameters.account\r\n  else {\r\n    const connectorClient = await getConnectorClient(config, {\r\n      chainId,\r\n      connector,\r\n    })\r\n    account = connectorClient.account\r\n  }\r\n\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_simulateContract, 'simulateContract')\r\n  const { result, request } = await action({ ...rest, abi, account })\r\n\r\n  return {\r\n    chainId: client.chain.id,\r\n    result,\r\n    request: { ...request, chainId },\r\n  } as unknown as SimulateContractReturnType<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    config,\r\n    chainId\r\n  >\r\n}\r\n", "import type { Address } from 'viem'\r\n\r\nimport type { Config, Connector } from '../createConfig.js'\r\nimport type { BaseError, ErrorType } from '../errors/base.js'\r\nimport {\r\n  ConnectorNotConnectedError,\r\n  type ConnectorNotConnectedErrorType,\r\n} from '../errors/config.js'\r\n\r\nexport type SwitchAccountParameters = {\r\n  connector: Connector\r\n}\r\n\r\nexport type SwitchAccountReturnType<config extends Config = Config> = {\r\n  accounts: readonly [Address, ...Address[]]\r\n  chainId:\r\n    | config['chains'][number]['id']\r\n    | (number extends config['chains'][number]['id'] ? number : number & {})\r\n}\r\n\r\nexport type SwitchAccountErrorType =\r\n  | ConnectorNotConnectedErrorType\r\n  | BaseError\r\n  | ErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/switchAccount */\r\nexport async function switchAccount<config extends Config>(\r\n  config: config,\r\n  parameters: SwitchAccountParameters,\r\n): Promise<SwitchAccountReturnType<config>> {\r\n  const { connector } = parameters\r\n\r\n  const connection = config.state.connections.get(connector.uid)\r\n  if (!connection) throw new ConnectorNotConnectedError()\r\n\r\n  await config.storage?.setItem('recentConnectorId', connector.id)\r\n  config.setState((x) => ({\r\n    ...x,\r\n    current: connector.uid,\r\n  }))\r\n  return {\r\n    accounts: connection.accounts,\r\n    chainId: connection.chainId,\r\n  }\r\n}\r\n", "import type { Connector } from '../createConfig.js'\r\nimport { BaseError } from './base.js'\r\n\r\nexport type ProviderNotFoundErrorType = ProviderNotFoundError & {\r\n  name: 'ProviderNotFoundError'\r\n}\r\nexport class ProviderNotFoundError extends BaseError {\r\n  override name = 'ProviderNotFoundError'\r\n  constructor() {\r\n    super('Provider not found.')\r\n  }\r\n}\r\n\r\nexport type SwitchChainNotSupportedErrorType = SwitchChainNotSupportedError & {\r\n  name: 'SwitchChainNotSupportedError'\r\n}\r\nexport class SwitchChainNotSupportedError extends BaseError {\r\n  override name = 'SwitchChainNotSupportedError'\r\n\r\n  constructor({ connector }: { connector: Connector }) {\r\n    super(`\"${connector.name}\" does not support programmatic chain switching.`)\r\n  }\r\n}\r\n", "import type {\r\n  AddEthereumChainParameter,\r\n  UserRejectedRequestErrorType,\r\n  SwitchChainErrorType as viem_SwitchChainErrorType,\r\n} from 'viem'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport {\r\n  ChainNotConfiguredError,\r\n  type ChainNotConfiguredErrorType,\r\n} from '../errors/config.js'\r\nimport {\r\n  type ProviderNotFoundErrorType,\r\n  SwitchChainNotSupportedError,\r\n  type SwitchChainNotSupportedErrorType,\r\n} from '../errors/connector.js'\r\nimport type { ConnectorParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\n\r\nexport type SwitchChainParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  ConnectorParameter & {\r\n    chainId: chainId | config['chains'][number]['id']\r\n    addEthereumChainParameter?:\r\n      | Compute<ExactPartial<Omit<AddEthereumChainParameter, 'chainId'>>>\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type SwitchChainReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Extract<\r\n  config['chains'][number],\r\n  { id: Config extends config ? number : chainId }\r\n>\r\n\r\nexport type SwitchChainErrorType =\r\n  | SwitchChainNotSupportedErrorType\r\n  | ChainNotConfiguredErrorType\r\n  // connector.switchChain()\r\n  | ProviderNotFoundErrorType\r\n  | UserRejectedRequestErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_SwitchChainErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/switchChain */\r\nexport async function switchChain<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: SwitchChainParameters<config, chainId>,\r\n): Promise<SwitchChainReturnType<config, chainId>> {\r\n  const { addEthereumChainParameter, chainId } = parameters\r\n\r\n  const connection = config.state.connections.get(\r\n    parameters.connector?.uid ?? config.state.current!,\r\n  )\r\n  if (connection) {\r\n    const connector = connection.connector\r\n    if (!connector.switchChain)\r\n      throw new SwitchChainNotSupportedError({ connector })\r\n    const chain = await connector.switchChain({\r\n      addEthereumChainParameter,\r\n      chainId,\r\n    })\r\n    return chain as SwitchChainReturnType<config, chainId>\r\n  }\r\n\r\n  const chain = config.chains.find((x) => x.id === chainId)\r\n  if (!chain) throw new ChainNotConfiguredError()\r\n  config.setState((x) => ({ ...x, chainId }))\r\n  return chain as SwitchChainReturnType<config, chainId>\r\n}\r\n", "import {\r\n  type VerifyMessageErrorType as viem_VerifyMessageErrorType,\r\n  type VerifyMessageParameters as viem_VerifyMessageParameters,\r\n  type VerifyMessageReturnType as viem_VerifyMessageReturnType,\r\n  verifyMessage as viem_verifyMessage,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type VerifyMessageParameters<config extends Config = Config> = Compute<\r\n  viem_VerifyMessageParameters & ChainIdParameter<config>\r\n>\r\n\r\nexport type VerifyMessageReturnType = viem_VerifyMessageReturnType\r\n\r\nexport type VerifyMessageErrorType = viem_VerifyMessageErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/verifyMessage */\r\nexport async function verifyMessage<config extends Config>(\r\n  config: config,\r\n  parameters: VerifyMessageParameters<config>,\r\n): Promise<VerifyMessageReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_verifyMessage, 'verifyMessage')\r\n  return action(rest)\r\n}\r\n", "import type { TypedData } from 'viem'\r\nimport {\r\n  type VerifyTypedDataErrorType as viem_VerifyTypedDataErrorType,\r\n  type VerifyTypedDataParameters as viem_VerifyTypedDataParameters,\r\n  type VerifyTypedDataReturnType as viem_VerifyTypedDataReturnType,\r\n  verifyTypedData as viem_verifyTypedData,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type VerifyTypedDataParameters<\r\n  typedData extends TypedData | Record<string, unknown> = TypedData,\r\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\r\n  config extends Config = Config,\r\n> = Compute<\r\n  viem_VerifyTypedDataParameters<typedData, primaryType> &\r\n    ChainIdParameter<config>\r\n>\r\n\r\nexport type VerifyTypedDataReturnType = viem_VerifyTypedDataReturnType\r\n\r\nexport type VerifyTypedDataErrorType = viem_VerifyTypedDataErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/verifyTypedData */\r\nexport async function verifyTypedData<\r\n  config extends Config,\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(\r\n  config: config,\r\n  parameters: VerifyTypedDataParameters<typedData, primaryType, config>,\r\n): Promise<VerifyTypedDataReturnType> {\r\n  const { chainId, ...rest } = parameters\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(client, viem_verifyTypedData, 'verifyTypedData')\r\n  return action(rest as viem_VerifyTypedDataParameters)\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\nimport { deepEqual } from '../utils/deepEqual.js'\r\nimport { type GetAccountReturnType, getAccount } from './getAccount.js'\r\n\r\nexport type WatchAccountParameters<config extends Config = Config> = {\r\n  onChange(\r\n    account: GetAccountReturnType<config>,\r\n    prevAccount: GetAccountReturnType<config>,\r\n  ): void\r\n}\r\n\r\nexport type WatchAccountReturnType = () => void\r\n\r\n/** https://wagmi.sh/core/api/actions/watchAccount */\r\nexport function watchAccount<config extends Config>(\r\n  config: config,\r\n  parameters: WatchAccountParameters<config>,\r\n): WatchAccountReturnType {\r\n  const { onChange } = parameters\r\n\r\n  return config.subscribe(() => getAccount(config), onChange, {\r\n    equalityFn(a, b) {\r\n      const { connector: aConnector, ...aRest } = a\r\n      const { connector: bConnector, ...bRest } = b\r\n      return (\r\n        deepEqual(aRest, bRest) &&\r\n        // check connector separately\r\n        aConnector?.id === bConnector?.id &&\r\n        aConnector?.uid === bConnector?.uid\r\n      )\r\n    },\r\n  })\r\n}\r\n", "import {\r\n  type WatchAssetErrorType as viem_WatchAssetErrorType,\r\n  type WatchAssetParameters as viem_WatchAssetParameters,\r\n  type WatchAssetReturnType as viem_WatchAssetReturnType,\r\n  watchAsset as viem_watchAsset,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { ConnectorParameter } from '../types/properties.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type WatchAssetParameters = Compute<\r\n  viem_WatchAssetParameters & ConnectorParameter\r\n>\r\n\r\nexport type WatchAssetReturnType = viem_WatchAssetReturnType\r\n\r\nexport type WatchAssetErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_WatchAssetErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/watchAsset */\r\nexport async function watchAsset(\r\n  config: Config,\r\n  parameters: WatchAssetParameters,\r\n): Promise<WatchAssetReturnType> {\r\n  const { connector, ...rest } = parameters\r\n\r\n  const client = await getConnectorClient(config, { connector })\r\n\r\n  const action = getAction(client, viem_watchAsset, 'watchAsset')\r\n  return action(rest as viem_WatchAssetParameters)\r\n}\r\n", "import {\r\n  type WatchBlocksParameters as viem_WatchBlocksParameters,\r\n  type WatchBlocksReturnType as viem_WatchBlocksReturnType,\r\n  watchBlocks as viem_watchBlocks,\r\n} from 'viem/actions'\r\n\r\nimport type { BlockTag, Chain, Transport, WebSocketTransport } from 'viem'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  SyncConnectedChainParameter,\r\n} from '../types/properties.js'\r\nimport type { IsNarrowable, UnionCompute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type WatchBlocksParameters<\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: UnionCompute<\r\n    viem_WatchBlocksParameters<\r\n      config['_internal']['transports'][chains[key]['id']] extends infer transport extends\r\n        Transport\r\n        ? Transport extends transport\r\n          ? WebSocketTransport\r\n          : transport\r\n        : WebSocketTransport,\r\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined,\r\n      includeTransactions,\r\n      blockTag\r\n    > &\r\n      ChainIdParameter<config, chainId> &\r\n      SyncConnectedChainParameter\r\n  >\r\n}[number]\r\n\r\nexport type WatchBlocksReturnType = viem_WatchBlocksReturnType\r\n\r\n// TODO: wrap in viem's `observe` to avoid duplicate invocations.\r\n/** https://wagmi.sh/core/actions/watchBlocks */\r\nexport function watchBlocks<\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n>(\r\n  config: config,\r\n  parameters: WatchBlocksParameters<\r\n    includeTransactions,\r\n    blockTag,\r\n    config,\r\n    chainId\r\n  >,\r\n): WatchBlocksReturnType {\r\n  const { syncConnectedChain = config._internal.syncConnectedChain, ...rest } =\r\n    parameters as WatchBlocksParameters\r\n\r\n  let unwatch: WatchBlocksReturnType | undefined\r\n  const listener = (chainId: number | undefined) => {\r\n    if (unwatch) unwatch()\r\n\r\n    const client = config.getClient({ chainId })\r\n    const action = getAction(client, viem_watchBlocks, 'watchBlocks')\r\n    unwatch = action(rest as viem_WatchBlocksParameters)\r\n    return unwatch\r\n  }\r\n\r\n  // set up listener for block number changes\r\n  const unlisten = listener(parameters.chainId)\r\n\r\n  // set up subscriber for connected chain changes\r\n  let unsubscribe: (() => void) | undefined\r\n  if (syncConnectedChain && !parameters.chainId)\r\n    unsubscribe = config.subscribe(\r\n      ({ chainId }) => chainId,\r\n      async (chainId) => listener(chainId),\r\n    )\r\n\r\n  return () => {\r\n    unlisten?.()\r\n    unsubscribe?.()\r\n  }\r\n}\r\n", "import {\r\n  type WatchBlockNumberParameters as viem_WatchBlockNumberParameters,\r\n  type WatchBlockNumberReturnType as viem_WatchBlockNumberReturnType,\r\n  watchBlockNumber as viem_watchBlockNumber,\r\n} from 'viem/actions'\r\n\r\nimport type { Chain, Transport, WebSocketTransport } from 'viem'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  SyncConnectedChainParameter,\r\n} from '../types/properties.js'\r\nimport type { UnionCompute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type WatchBlockNumberParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: UnionCompute<\r\n    viem_WatchBlockNumberParameters<\r\n      config['_internal']['transports'][chains[key]['id']] extends infer transport extends\r\n        Transport\r\n        ? Transport extends transport\r\n          ? WebSocketTransport\r\n          : transport\r\n        : WebSocketTransport\r\n    > &\r\n      ChainIdParameter<config, chainId> &\r\n      SyncConnectedChainParameter\r\n  >\r\n}[number]\r\n\r\nexport type WatchBlockNumberReturnType = viem_WatchBlockNumberReturnType\r\n\r\n// TODO: wrap in viem's `observe` to avoid duplicate invocations.\r\n/** https://wagmi.sh/core/api/actions/watchBlockNumber */\r\nexport function watchBlockNumber<\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: WatchBlockNumberParameters<config, chainId>,\r\n): WatchBlockNumberReturnType {\r\n  const { syncConnectedChain = config._internal.syncConnectedChain, ...rest } =\r\n    parameters as WatchBlockNumberParameters\r\n\r\n  let unwatch: WatchBlockNumberReturnType | undefined\r\n  const listener = (chainId: number | undefined) => {\r\n    if (unwatch) unwatch()\r\n\r\n    const client = config.getClient({ chainId })\r\n    const action = getAction(client, viem_watchBlockNumber, 'watchBlockNumber')\r\n    unwatch = action(rest as viem_WatchBlockNumberParameters)\r\n    return unwatch\r\n  }\r\n\r\n  // set up listener for block number changes\r\n  const unlisten = listener(parameters.chainId)\r\n\r\n  // set up subscriber for connected chain changes\r\n  let unsubscribe: (() => void) | undefined\r\n  if (syncConnectedChain && !parameters.chainId)\r\n    unsubscribe = config.subscribe(\r\n      ({ chainId }) => chainId,\r\n      async (chainId) => listener(chainId),\r\n    )\r\n\r\n  return () => {\r\n    unlisten?.()\r\n    unsubscribe?.()\r\n  }\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\nimport type { GetChainIdReturnType } from './getChainId.js'\r\n\r\nexport type WatchChainIdParameters<config extends Config = Config> = {\r\n  onChange(\r\n    chainId: GetChainIdReturnType<config>,\r\n    prevChainId: GetChainIdReturnType<config>,\r\n  ): void\r\n}\r\n\r\nexport type WatchChainIdReturnType = () => void\r\n\r\n/** https://wagmi.sh/core/api/actions/watchChainId */\r\nexport function watchChainId<config extends Config>(\r\n  config: config,\r\n  parameters: WatchChainIdParameters<config>,\r\n): WatchChainIdReturnType {\r\n  const { onChange } = parameters\r\n  return config.subscribe((state) => state.chainId, onChange)\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\nimport { type GetClientReturnType, getClient } from './getClient.js'\r\n\r\nexport type WatchClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = {\r\n  onChange(\r\n    publicClient: GetClientReturnType<config, chainId>,\r\n    prevClient: GetClientReturnType<config, chainId>,\r\n  ): void\r\n}\r\n\r\nexport type WatchClientReturnType = () => void\r\n\r\n/** https://wagmi.sh/core/api/actions/watchClient */\r\nexport function watchClient<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: WatchClientParameters<config, chainId>,\r\n): WatchClientReturnType {\r\n  const { onChange } = parameters\r\n  return config.subscribe(\r\n    () => getClient(config) as GetClientReturnType<config, chainId>,\r\n    onChange,\r\n    {\r\n      equalityFn(a, b) {\r\n        return a?.uid === b?.uid\r\n      },\r\n    },\r\n  )\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\nimport { deepEqual } from '../utils/deepEqual.js'\r\nimport {\r\n  type GetConnectionsReturnType,\r\n  getConnections,\r\n} from './getConnections.js'\r\n\r\nexport type WatchConnectionsParameters = {\r\n  onChange(\r\n    connections: GetConnectionsReturnType,\r\n    prevConnections: GetConnectionsReturnType,\r\n  ): void\r\n}\r\n\r\nexport type WatchConnectionsReturnType = () => void\r\n\r\n/** https://wagmi.sh/core/api/actions/watchConnections */\r\nexport function watchConnections(\r\n  config: Config,\r\n  parameters: WatchConnectionsParameters,\r\n): WatchConnectionsReturnType {\r\n  const { onChange } = parameters\r\n  return config.subscribe(() => getConnections(config), onChange, {\r\n    equalityFn: deepEqual,\r\n  })\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\nimport type { GetConnectorsReturnType } from './getConnectors.js'\r\n\r\nexport type WatchConnectorsParameters<config extends Config = Config> = {\r\n  onChange(\r\n    connections: GetConnectorsReturnType<config>,\r\n    prevConnectors: GetConnectorsReturnType<config>,\r\n  ): void\r\n}\r\n\r\nexport type WatchConnectorsReturnType = () => void\r\n\r\n/** https://wagmi.sh/core/api/actions/watchConnectors */\r\nexport function watchConnectors<config extends Config>(\r\n  config: config,\r\n  parameters: WatchConnectorsParameters<config>,\r\n): WatchConnectorsReturnType {\r\n  const { onChange } = parameters\r\n  return config._internal.connectors.subscribe((connectors, prevConnectors) => {\r\n    onChange(Object.values(connectors), prevConnectors)\r\n  })\r\n}\r\n", "import type {\r\n  Abi,\r\n  Chain,\r\n  ContractEventName,\r\n  Transport,\r\n  WebSocketTransport,\r\n} from 'viem'\r\nimport {\r\n  type WatchContractEventParameters as viem_WatchContractEventParameters,\r\n  type WatchContractEventReturnType as viem_WatchContractEventReturnType,\r\n  watchContractEvent as viem_watchContractEvent,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  SyncConnectedChainParameter,\r\n} from '../types/properties.js'\r\nimport type { UnionCompute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type WatchContractEventParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\r\n  strict extends boolean | undefined = undefined,\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: UnionCompute<\r\n    viem_WatchContractEventParameters<\r\n      abi,\r\n      eventName,\r\n      strict,\r\n      config['_internal']['transports'][chains[key]['id']] extends infer transport extends\r\n        Transport\r\n        ? Transport extends transport\r\n          ? WebSocketTransport\r\n          : transport\r\n        : WebSocketTransport\r\n    > &\r\n      ChainIdParameter<config, chainId> &\r\n      SyncConnectedChainParameter\r\n  >\r\n}[number]\r\n\r\nexport type WatchContractEventReturnType = viem_WatchContractEventReturnType\r\n\r\n// TODO: wrap in viem's `observe` to avoid duplicate invocations.\r\n/** https://wagmi.sh/core/api/actions/watchContractEvent */\r\nexport function watchContractEvent<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n  const abi extends Abi | readonly unknown[],\r\n  eventName extends ContractEventName<abi> | undefined,\r\n  strict extends boolean | undefined = undefined,\r\n>(\r\n  config: config,\r\n  parameters: WatchContractEventParameters<\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    config,\r\n    chainId\r\n  >,\r\n) {\r\n  const { syncConnectedChain = config._internal.syncConnectedChain, ...rest } =\r\n    parameters\r\n\r\n  let unwatch: WatchContractEventReturnType | undefined\r\n  const listener = (chainId: number | undefined) => {\r\n    if (unwatch) unwatch()\r\n\r\n    const client = config.getClient({ chainId })\r\n    const action = getAction(\r\n      client,\r\n      viem_watchContractEvent,\r\n      'watchContractEvent',\r\n    )\r\n    unwatch = action(rest as unknown as viem_WatchContractEventParameters)\r\n    return unwatch\r\n  }\r\n\r\n  // set up listener for transaction changes\r\n  const unlisten = listener(parameters.chainId)\r\n\r\n  // set up subscriber for connected chain changes\r\n  let unsubscribe: (() => void) | undefined\r\n  if (syncConnectedChain && !parameters.chainId)\r\n    unsubscribe = config.subscribe(\r\n      ({ chainId }) => chainId,\r\n      async (chainId) => listener(chainId),\r\n    )\r\n\r\n  return () => {\r\n    unlisten?.()\r\n    unsubscribe?.()\r\n  }\r\n}\r\n", "import type { Chain, Transport, WebSocketTransport } from 'viem'\r\nimport {\r\n  type WatchPendingTransactionsParameters as viem_WatchPendingTransactionsParameters,\r\n  type WatchPendingTransactionsReturnType as viem_WatchPendingTransactionsReturnType,\r\n  watchPendingTransactions as viem_watchPendingTransactions,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  SyncConnectedChainParameter,\r\n} from '../types/properties.js'\r\nimport type { UnionCompute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type WatchPendingTransactionsParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = {\r\n  [key in keyof chains]: UnionCompute<\r\n    viem_WatchPendingTransactionsParameters<\r\n      config['_internal']['transports'][chains[key]['id']] extends infer transport extends\r\n        Transport\r\n        ? Transport extends transport\r\n          ? WebSocketTransport\r\n          : transport\r\n        : WebSocketTransport\r\n    > &\r\n      ChainIdParameter<config, chainId> &\r\n      SyncConnectedChainParameter\r\n  >\r\n}[number]\r\n\r\nexport type WatchPendingTransactionsReturnType =\r\n  viem_WatchPendingTransactionsReturnType\r\n\r\n// TODO: wrap in viem's `observe` to avoid duplicate invocations.\r\n/** https://wagmi.sh/core/api/actions/watchPendingTransactions */\r\nexport function watchPendingTransactions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: WatchPendingTransactionsParameters<config, chainId>,\r\n) {\r\n  const { syncConnectedChain = config._internal.syncConnectedChain, ...rest } =\r\n    parameters\r\n\r\n  let unwatch: WatchPendingTransactionsReturnType | undefined\r\n  const listener = (chainId: number | undefined) => {\r\n    if (unwatch) unwatch()\r\n\r\n    const client = config.getClient({ chainId })\r\n    const action = getAction(\r\n      client,\r\n      viem_watchPendingTransactions,\r\n      'watchPendingTransactions',\r\n    )\r\n    unwatch = action(rest as viem_WatchPendingTransactionsParameters)\r\n    return unwatch\r\n  }\r\n\r\n  // set up listener for transaction changes\r\n  const unlisten = listener(parameters.chainId)\r\n\r\n  // set up subscriber for connected chain changes\r\n  let unsubscribe: (() => void) | undefined\r\n  if (syncConnectedChain && !parameters.chainId)\r\n    unsubscribe = config.subscribe(\r\n      ({ chainId }) => chainId,\r\n      async (chainId) => listener(chainId),\r\n    )\r\n\r\n  return () => {\r\n    unlisten?.()\r\n    unsubscribe?.()\r\n  }\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\nimport {\r\n  type GetPublicClientReturnType,\r\n  getPublicClient,\r\n} from './getPublicClient.js'\r\n\r\nexport type WatchPublicClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = {\r\n  onChange(\r\n    publicClient: GetPublicClientReturnType<config, chainId>,\r\n    prevPublicClient: GetPublicClientReturnType<config, chainId>,\r\n  ): void\r\n}\r\n\r\nexport type WatchPublicClientReturnType = () => void\r\n\r\n/** https://wagmi.sh/core/api/actions/watchPublicClient */\r\nexport function watchPublicClient<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: WatchPublicClientParameters<config, chainId>,\r\n): WatchPublicClientReturnType {\r\n  const { onChange } = parameters\r\n  return config.subscribe(\r\n    () => getPublicClient(config) as GetPublicClientReturnType<config, chainId>,\r\n    onChange,\r\n    {\r\n      equalityFn(a, b) {\r\n        return a?.uid === b?.uid\r\n      },\r\n    },\r\n  )\r\n}\r\n", "import type { Chain } from 'viem'\r\nimport { hexToString } from 'viem'\r\nimport {\r\n  call,\r\n  getTransaction,\r\n  type WaitForTransactionReceiptErrorType as viem_WaitForTransactionReceiptErrorType,\r\n  type WaitForTransactionReceiptParameters as viem_WaitForTransactionReceiptParameters,\r\n  type WaitForTransactionReceiptReturnType as viem_WaitForTransactionReceiptReturnType,\r\n  waitForTransactionReceipt as viem_waitForTransactionReceipt,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { Compute, IsNarrowable } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\n\r\nexport type WaitForTransactionReceiptParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  viem_WaitForTransactionReceiptParameters & ChainIdParameter<config, chainId>\r\n>\r\n\r\nexport type WaitForTransactionReceiptReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = Compute<\r\n  {\r\n    [key in keyof chains]: viem_WaitForTransactionReceiptReturnType<\r\n      IsNarrowable<chains[key], Chain> extends true ? chains[key] : undefined\r\n    > & { chainId: chains[key]['id'] }\r\n  }[number]\r\n>\r\n\r\nexport type WaitForTransactionReceiptErrorType =\r\n  viem_WaitForTransactionReceiptErrorType\r\n\r\nexport async function waitForTransactionReceipt<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: WaitForTransactionReceiptParameters<config, chainId>,\r\n): Promise<WaitForTransactionReceiptReturnType<config, chainId>> {\r\n  const { chainId, timeout = 0, ...rest } = parameters\r\n\r\n  const client = config.getClient({ chainId })\r\n  const action = getAction(\r\n    client,\r\n    viem_waitForTransactionReceipt,\r\n    'waitForTransactionReceipt',\r\n  )\r\n  const receipt = await action({ ...rest, timeout })\r\n\r\n  if (receipt.status === 'reverted') {\r\n    const action_getTransaction = getAction(\r\n      client,\r\n      getTransaction,\r\n      'getTransaction',\r\n    )\r\n    const txn = await action_getTransaction({ hash: receipt.transactionHash })\r\n    const action_call = getAction(client, call, 'call')\r\n    const code = await action_call({\r\n      ...(txn as any),\r\n      data: txn.input,\r\n      gasPrice: txn.type !== 'eip1559' ? txn.gasPrice : undefined,\r\n      maxFeePerGas: txn.type === 'eip1559' ? txn.maxFeePerGas : undefined,\r\n      maxPriorityFeePerGas:\r\n        txn.type === 'eip1559' ? txn.maxPriorityFeePerGas : undefined,\r\n    })\r\n    const reason = code?.data\r\n      ? hexToString(`0x${code.data.substring(138)}`)\r\n      : 'unknown reason'\r\n    throw new Error(reason)\r\n  }\r\n\r\n  return {\r\n    ...receipt,\r\n    chainId: client.chain.id,\r\n  } as WaitForTransactionReceiptReturnType<config, chainId>\r\n}\r\n", "import type {\r\n  Abi,\r\n  Account,\r\n  Chain,\r\n  Client,\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from 'viem'\r\nimport {\r\n  type WriteContractErrorType as viem_WriteContractErrorType,\r\n  type WriteContractParameters as viem_WriteContractParameters,\r\n  type WriteContractReturnType as viem_WriteContractReturnType,\r\n  writeContract as viem_writeContract,\r\n} from 'viem/actions'\r\n\r\nimport type { Config } from '../createConfig.js'\r\nimport type { BaseErrorType, ErrorType } from '../errors/base.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  ConnectorParameter,\r\n} from '../types/properties.js'\r\nimport type { Compute, UnionCompute } from '../types/utils.js'\r\nimport { getAction } from '../utils/getAction.js'\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  getConnectorClient,\r\n} from './getConnectorClient.js'\r\n\r\nexport type WriteContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  ///\r\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  chains extends readonly Chain[] = SelectChains<config, chainId>,\r\n> = UnionCompute<\r\n  {\r\n    // TODO: Should use `UnionStrictOmit<..., 'chain'>` on `viem_WriteContractParameters` result instead\r\n    // temp workaround that doesn't affect runtime behavior for for https://github.com/wevm/wagmi/issues/3981\r\n    [key in keyof chains]: viem_WriteContractParameters<\r\n      abi,\r\n      functionName,\r\n      args,\r\n      chains[key],\r\n      Account,\r\n      chains[key],\r\n      allFunctionNames\r\n    >\r\n  }[number] &\r\n    Compute<ChainIdParameter<config, chainId>> &\r\n    ConnectorParameter & {\r\n      /** @deprecated */\r\n      __mode?: 'prepared'\r\n    }\r\n>\r\n\r\nexport type WriteContractReturnType = viem_WriteContractReturnType\r\n\r\nexport type WriteContractErrorType =\r\n  // getConnectorClient()\r\n  | GetConnectorClientErrorType\r\n  // base\r\n  | BaseErrorType\r\n  | ErrorType\r\n  // viem\r\n  | viem_WriteContractErrorType\r\n\r\n/** https://wagmi.sh/core/api/actions/writeContract */\r\nexport async function writeContract<\r\n  config extends Config,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  parameters: WriteContractParameters<abi, functionName, args, config, chainId>,\r\n): Promise<WriteContractReturnType> {\r\n  const { account, chainId, connector, ...request } = parameters\r\n\r\n  let client: Client\r\n  if (typeof account === 'object' && account?.type === 'local')\r\n    client = config.getClient({ chainId })\r\n  else\r\n    client = await getConnectorClient(config, {\r\n      account: account ?? undefined,\r\n      chainId,\r\n      connector,\r\n    })\r\n\r\n  const action = getAction(client, viem_writeContract, 'writeContract')\r\n  const hash = await action({\r\n    ...(request as any),\r\n    ...(account ? { account } : {}),\r\n    chain: chainId ? { id: chainId } : null,\r\n  })\r\n\r\n  return hash\r\n}\r\n", "import type {\r\n  AddEthereumChainParameter,\r\n  Address,\r\n  Chain,\r\n  Client,\r\n  ProviderConnectInfo,\r\n  ProviderMessage,\r\n} from 'viem'\r\n\r\nimport type { Transport } from '../createConfig.js'\r\nimport type { Emitter } from '../createEmitter.js'\r\nimport type { Storage } from '../createStorage.js'\r\nimport type { Compute, ExactPartial, StrictOmit } from '../types/utils.js'\r\n\r\nexport type ConnectorEventMap = {\r\n  change: {\r\n    accounts?: readonly Address[] | undefined\r\n    chainId?: number | undefined\r\n  }\r\n  connect: { accounts: readonly Address[]; chainId: number }\r\n  disconnect: never\r\n  error: { error: Error }\r\n  message: { type: string; data?: unknown | undefined }\r\n}\r\n\r\nexport type CreateConnectorFn<\r\n  provider = unknown,\r\n  properties extends Record<string, unknown> = Record<string, unknown>,\r\n  storageItem extends Record<string, unknown> = Record<string, unknown>,\r\n> = (config: {\r\n  chains: readonly [Chain, ...Chain[]]\r\n  emitter: Emitter<ConnectorEventMap>\r\n  storage?: Compute<Storage<storageItem>> | null | undefined\r\n  transports?: Record<number, Transport> | undefined\r\n}) => Compute<\r\n  {\r\n    readonly icon?: string | undefined\r\n    readonly id: string\r\n    readonly name: string\r\n    readonly rdns?: string | readonly string[] | undefined\r\n    /** @deprecated */\r\n    readonly supportsSimulation?: boolean | undefined\r\n    readonly type: string\r\n\r\n    setup?(): Promise<void>\r\n    connect(\r\n      parameters?:\r\n        | { chainId?: number | undefined; isReconnecting?: boolean | undefined }\r\n        | undefined,\r\n    ): Promise<{\r\n      accounts: readonly Address[]\r\n      chainId: number\r\n    }>\r\n    disconnect(): Promise<void>\r\n    getAccounts(): Promise<readonly Address[]>\r\n    getChainId(): Promise<number>\r\n    getProvider(\r\n      parameters?: { chainId?: number | undefined } | undefined,\r\n    ): Promise<provider>\r\n    getClient?(\r\n      parameters?: { chainId?: number | undefined } | undefined,\r\n    ): Promise<Client>\r\n    isAuthorized(): Promise<boolean>\r\n    switchChain?(\r\n      parameters: Compute<{\r\n        addEthereumChainParameter?:\r\n          | ExactPartial<StrictOmit<AddEthereumChainParameter, 'chainId'>>\r\n          | undefined\r\n        chainId: number\r\n      }>,\r\n    ): Promise<Chain>\r\n\r\n    onAccountsChanged(accounts: string[]): void\r\n    onChainChanged(chainId: string): void\r\n    onConnect?(connectInfo: ProviderConnectInfo): void\r\n    onDisconnect(error?: Error | undefined): void\r\n    onMessage?(message: ProviderMessage): void\r\n  } & properties\r\n>\r\n\r\nexport function createConnector<\r\n  provider,\r\n  properties extends Record<string, unknown> = Record<string, unknown>,\r\n  storageItem extends Record<string, unknown> = Record<string, unknown>,\r\n  ///\r\n  createConnectorFn extends CreateConnectorFn<\r\n    provider,\r\n    properties,\r\n    storageItem\r\n  > = CreateConnectorFn<provider, properties, storageItem>,\r\n>(createConnectorFn: createConnectorFn) {\r\n  return createConnectorFn\r\n}\r\n", "import {\r\n  type AddEthereumChainParameter,\r\n  type Address,\r\n  type EIP1193Provider,\r\n  type ProviderConnectInfo,\r\n  type ProviderRpcError,\r\n  ResourceUnavailableRpcError,\r\n  type RpcError,\r\n  SwitchChainError,\r\n  UserRejectedRequestError,\r\n  getAddress,\r\n  numberToHex,\r\n  withRetry,\r\n  withTimeout,\r\n} from 'viem'\r\n\r\nimport type { Connector } from '../createConfig.js'\r\nimport { ChainNotConfiguredError } from '../errors/config.js'\r\nimport { ProviderNotFoundError } from '../errors/connector.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport { createConnector } from './createConnector.js'\r\n\r\nexport type InjectedParameters = {\r\n  /**\r\n   * Some injected providers do not support programmatic disconnect.\r\n   * This flag simulates the disconnect behavior by keeping track of connection status in storage.\r\n   * @default true\r\n   */\r\n  shimDisconnect?: boolean | undefined\r\n  /**\r\n   * [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193) Ethereum Provider to target\r\n   */\r\n  target?: TargetId | Target | (() => Target | undefined) | undefined\r\n  unstable_shimAsyncInject?: boolean | number | undefined\r\n}\r\n\r\ninjected.type = 'injected' as const\r\nexport function injected(parameters: InjectedParameters = {}) {\r\n  const { shimDisconnect = true, unstable_shimAsyncInject } = parameters\r\n\r\n  function getTarget(): Compute<Target & { id: string }> {\r\n    const target = parameters.target\r\n    if (typeof target === 'function') {\r\n      const result = target()\r\n      if (result) return result\r\n    }\r\n\r\n    if (typeof target === 'object') return target\r\n\r\n    if (typeof target === 'string')\r\n      return {\r\n        ...(targetMap[target as keyof typeof targetMap] ?? {\r\n          id: target,\r\n          name: `${target[0]!.toUpperCase()}${target.slice(1)}`,\r\n          provider: `is${target[0]!.toUpperCase()}${target.slice(1)}`,\r\n        }),\r\n      }\r\n\r\n    return {\r\n      id: 'injected',\r\n      name: 'Injected',\r\n      provider(window) {\r\n        return window?.ethereum\r\n      },\r\n    }\r\n  }\r\n\r\n  type Provider = WalletProvider | undefined\r\n  type Properties = {\r\n    onConnect(connectInfo: ProviderConnectInfo): void\r\n  }\r\n  type StorageItem = {\r\n    [_ in 'injected.connected' | `${string}.disconnected`]: true\r\n  }\r\n\r\n  let accountsChanged: Connector['onAccountsChanged'] | undefined\r\n  let chainChanged: Connector['onChainChanged'] | undefined\r\n  let connect: Connector['onConnect'] | undefined\r\n  let disconnect: Connector['onDisconnect'] | undefined\r\n\r\n  return createConnector<Provider, Properties, StorageItem>((config) => ({\r\n    get icon() {\r\n      return getTarget().icon\r\n    },\r\n    get id() {\r\n      return getTarget().id\r\n    },\r\n    get name() {\r\n      return getTarget().name\r\n    },\r\n    /** @deprecated */\r\n    get supportsSimulation() {\r\n      return true\r\n    },\r\n    type: injected.type,\r\n    async setup() {\r\n      const provider = await this.getProvider()\r\n      // Only start listening for events if `target` is set, otherwise `injected()` will also receive events\r\n      if (provider?.on && parameters.target) {\r\n        if (!connect) {\r\n          connect = this.onConnect.bind(this)\r\n          provider.on('connect', connect)\r\n        }\r\n\r\n        // We shouldn't need to listen for `'accountsChanged'` here since the `'connect'` event should suffice (and wallet shouldn't be connected yet).\r\n        // Some wallets, like MetaMask, do not implement the `'connect'` event and overload `'accountsChanged'` instead.\r\n        if (!accountsChanged) {\r\n          accountsChanged = this.onAccountsChanged.bind(this)\r\n          provider.on('accountsChanged', accountsChanged)\r\n        }\r\n      }\r\n    },\r\n    async connect({ chainId, isReconnecting } = {}) {\r\n      const provider = await this.getProvider()\r\n      if (!provider) throw new ProviderNotFoundError()\r\n\r\n      let accounts: readonly Address[] = []\r\n      if (isReconnecting) accounts = await this.getAccounts().catch(() => [])\r\n      else if (shimDisconnect) {\r\n        // Attempt to show another prompt for selecting account if `shimDisconnect` flag is enabled\r\n        try {\r\n          const permissions = await provider.request({\r\n            method: 'wallet_requestPermissions',\r\n            params: [{ eth_accounts: {} }],\r\n          })\r\n          accounts = (permissions[0]?.caveats?.[0]?.value as string[])?.map(\r\n            (x) => getAddress(x),\r\n          )\r\n          // `'wallet_requestPermissions'` can return a different order of accounts than `'eth_accounts'`\r\n          // switch to `'eth_accounts'` ordering if more than one account is connected\r\n          // https://github.com/wevm/wagmi/issues/4140\r\n          if (accounts.length > 0) {\r\n            const sortedAccounts = await this.getAccounts()\r\n            accounts = sortedAccounts\r\n          }\r\n        } catch (err) {\r\n          const error = err as RpcError\r\n          // Not all injected providers support `wallet_requestPermissions` (e.g. MetaMask iOS).\r\n          // Only bubble up error if user rejects request\r\n          if (error.code === UserRejectedRequestError.code)\r\n            throw new UserRejectedRequestError(error)\r\n          // Or prompt is already open\r\n          if (error.code === ResourceUnavailableRpcError.code) throw error\r\n        }\r\n      }\r\n\r\n      try {\r\n        if (!accounts?.length && !isReconnecting) {\r\n          const requestedAccounts = await provider.request({\r\n            method: 'eth_requestAccounts',\r\n          })\r\n          accounts = requestedAccounts.map((x) => getAddress(x))\r\n        }\r\n\r\n        // Manage EIP-1193 event listeners\r\n        // https://eips.ethereum.org/EIPS/eip-1193#events\r\n        if (connect) {\r\n          provider.removeListener('connect', connect)\r\n          connect = undefined\r\n        }\r\n        if (!accountsChanged) {\r\n          accountsChanged = this.onAccountsChanged.bind(this)\r\n          provider.on('accountsChanged', accountsChanged)\r\n        }\r\n        if (!chainChanged) {\r\n          chainChanged = this.onChainChanged.bind(this)\r\n          provider.on('chainChanged', chainChanged)\r\n        }\r\n        if (!disconnect) {\r\n          disconnect = this.onDisconnect.bind(this)\r\n          provider.on('disconnect', disconnect)\r\n        }\r\n\r\n        // Switch to chain if provided\r\n        let currentChainId = await this.getChainId()\r\n        if (chainId && currentChainId !== chainId) {\r\n          const chain = await this.switchChain!({ chainId }).catch((error) => {\r\n            if (error.code === UserRejectedRequestError.code) throw error\r\n            return { id: currentChainId }\r\n          })\r\n          currentChainId = chain?.id ?? currentChainId\r\n        }\r\n\r\n        // Remove disconnected shim if it exists\r\n        if (shimDisconnect)\r\n          await config.storage?.removeItem(`${this.id}.disconnected`)\r\n\r\n        // Add connected shim if no target exists\r\n        if (!parameters.target)\r\n          await config.storage?.setItem('injected.connected', true)\r\n\r\n        return { accounts, chainId: currentChainId }\r\n      } catch (err) {\r\n        const error = err as RpcError\r\n        if (error.code === UserRejectedRequestError.code)\r\n          throw new UserRejectedRequestError(error)\r\n        if (error.code === ResourceUnavailableRpcError.code)\r\n          throw new ResourceUnavailableRpcError(error)\r\n        throw error\r\n      }\r\n    },\r\n    async disconnect() {\r\n      const provider = await this.getProvider()\r\n      if (!provider) throw new ProviderNotFoundError()\r\n\r\n      // Manage EIP-1193 event listeners\r\n      if (chainChanged) {\r\n        provider.removeListener('chainChanged', chainChanged)\r\n        chainChanged = undefined\r\n      }\r\n      if (disconnect) {\r\n        provider.removeListener('disconnect', disconnect)\r\n        disconnect = undefined\r\n      }\r\n      if (!connect) {\r\n        connect = this.onConnect.bind(this)\r\n        provider.on('connect', connect)\r\n      }\r\n\r\n      // Experimental support for MetaMask disconnect\r\n      // https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-2.md\r\n      try {\r\n        // Adding timeout as not all wallets support this method and can hang\r\n        // https://github.com/wevm/wagmi/issues/4064\r\n        await withTimeout(\r\n          () =>\r\n            // TODO: Remove explicit type for viem@3\r\n            provider.request<{\r\n              Method: 'wallet_revokePermissions'\r\n              Parameters: [permissions: { eth_accounts: Record<string, any> }]\r\n              ReturnType: null\r\n            }>({\r\n              // `'wallet_revokePermissions'` added in `viem@2.10.3`\r\n              method: 'wallet_revokePermissions',\r\n              params: [{ eth_accounts: {} }],\r\n            }),\r\n          { timeout: 100 },\r\n        )\r\n      } catch {}\r\n\r\n      // Add shim signalling connector is disconnected\r\n      if (shimDisconnect) {\r\n        await config.storage?.setItem(`${this.id}.disconnected`, true)\r\n      }\r\n\r\n      if (!parameters.target)\r\n        await config.storage?.removeItem('injected.connected')\r\n    },\r\n    async getAccounts() {\r\n      const provider = await this.getProvider()\r\n      if (!provider) throw new ProviderNotFoundError()\r\n      const accounts = await provider.request({ method: 'eth_accounts' })\r\n      return accounts.map((x) => getAddress(x))\r\n    },\r\n    async getChainId() {\r\n      const provider = await this.getProvider()\r\n      if (!provider) throw new ProviderNotFoundError()\r\n      const hexChainId = await provider.request({ method: 'eth_chainId' })\r\n      return Number(hexChainId)\r\n    },\r\n    async getProvider() {\r\n      if (typeof window === 'undefined') return undefined\r\n\r\n      let provider: Provider\r\n      const target = getTarget()\r\n      if (typeof target.provider === 'function')\r\n        provider = target.provider(window as Window | undefined)\r\n      else if (typeof target.provider === 'string')\r\n        provider = findProvider(window, target.provider)\r\n      else provider = target.provider\r\n\r\n      // Some wallets do not conform to EIP-1193 (e.g. Trust Wallet)\r\n      // https://github.com/wevm/wagmi/issues/3526#issuecomment-1912683002\r\n      if (provider && !provider.removeListener) {\r\n        // Try using `off` handler if it exists, otherwise noop\r\n        if ('off' in provider && typeof provider.off === 'function')\r\n          provider.removeListener =\r\n            provider.off as typeof provider.removeListener\r\n        else provider.removeListener = () => {}\r\n      }\r\n\r\n      return provider\r\n    },\r\n    async isAuthorized() {\r\n      try {\r\n        const isDisconnected =\r\n          shimDisconnect &&\r\n          // If shim exists in storage, connector is disconnected\r\n          (await config.storage?.getItem(`${this.id}.disconnected`))\r\n        if (isDisconnected) return false\r\n\r\n        // Don't allow injected connector to connect if no target is set and it hasn't already connected\r\n        // (e.g. flag in storage is not set). This prevents a targetless injected connector from connecting\r\n        // automatically whenever there is a targeted connector configured.\r\n        if (!parameters.target) {\r\n          const connected = await config.storage?.getItem('injected.connected')\r\n          if (!connected) return false\r\n        }\r\n\r\n        const provider = await this.getProvider()\r\n        if (!provider) {\r\n          if (\r\n            unstable_shimAsyncInject !== undefined &&\r\n            unstable_shimAsyncInject !== false\r\n          ) {\r\n            // If no provider is found, check for async injection\r\n            // https://github.com/wevm/references/issues/167\r\n            // https://github.com/MetaMask/detect-provider\r\n            const handleEthereum = async () => {\r\n              if (typeof window !== 'undefined')\r\n                window.removeEventListener(\r\n                  'ethereum#initialized',\r\n                  handleEthereum,\r\n                )\r\n              const provider = await this.getProvider()\r\n              return !!provider\r\n            }\r\n            const timeout =\r\n              typeof unstable_shimAsyncInject === 'number'\r\n                ? unstable_shimAsyncInject\r\n                : 1_000\r\n            const res = await Promise.race([\r\n              ...(typeof window !== 'undefined'\r\n                ? [\r\n                    new Promise<boolean>((resolve) =>\r\n                      window.addEventListener(\r\n                        'ethereum#initialized',\r\n                        () => resolve(handleEthereum()),\r\n                        { once: true },\r\n                      ),\r\n                    ),\r\n                  ]\r\n                : []),\r\n              new Promise<boolean>((resolve) =>\r\n                setTimeout(() => resolve(handleEthereum()), timeout),\r\n              ),\r\n            ])\r\n            if (res) return true\r\n          }\r\n\r\n          throw new ProviderNotFoundError()\r\n        }\r\n\r\n        // Use retry strategy as some injected wallets (e.g. MetaMask) fail to\r\n        // immediately resolve JSON-RPC requests on page load.\r\n        const accounts = await withRetry(() => this.getAccounts())\r\n        return !!accounts.length\r\n      } catch {\r\n        return false\r\n      }\r\n    },\r\n    async switchChain({ addEthereumChainParameter, chainId }) {\r\n      const provider = await this.getProvider()\r\n      if (!provider) throw new ProviderNotFoundError()\r\n\r\n      const chain = config.chains.find((x) => x.id === chainId)\r\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\r\n\r\n      const promise = new Promise<void>((resolve) => {\r\n        const listener = ((data) => {\r\n          if ('chainId' in data && data.chainId === chainId) {\r\n            config.emitter.off('change', listener)\r\n            resolve()\r\n          }\r\n        }) satisfies Parameters<typeof config.emitter.on>[1]\r\n        config.emitter.on('change', listener)\r\n      })\r\n\r\n      try {\r\n        await Promise.all([\r\n          provider\r\n            .request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: numberToHex(chainId) }],\r\n            })\r\n            // During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\r\n            // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\r\n            // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\r\n            // this callback or an externally emitted `'chainChanged'` event.\r\n            // https://github.com/MetaMask/metamask-extension/issues/24247\r\n            .then(async () => {\r\n              const currentChainId = await this.getChainId()\r\n              if (currentChainId === chainId)\r\n                config.emitter.emit('change', { chainId })\r\n            }),\r\n          promise,\r\n        ])\r\n        return chain\r\n      } catch (err) {\r\n        const error = err as RpcError\r\n\r\n        // Indicates chain is not added to provider\r\n        if (\r\n          error.code === 4902 ||\r\n          // Unwrapping for MetaMask Mobile\r\n          // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\r\n          (error as ProviderRpcError<{ originalError?: { code: number } }>)\r\n            ?.data?.originalError?.code === 4902\r\n        ) {\r\n          try {\r\n            const { default: blockExplorer, ...blockExplorers } =\r\n              chain.blockExplorers ?? {}\r\n            let blockExplorerUrls: string[] | undefined\r\n            if (addEthereumChainParameter?.blockExplorerUrls)\r\n              blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls\r\n            else if (blockExplorer)\r\n              blockExplorerUrls = [\r\n                blockExplorer.url,\r\n                ...Object.values(blockExplorers).map((x) => x.url),\r\n              ]\r\n\r\n            let rpcUrls: readonly string[]\r\n            if (addEthereumChainParameter?.rpcUrls?.length)\r\n              rpcUrls = addEthereumChainParameter.rpcUrls\r\n            else rpcUrls = [chain.rpcUrls.default?.http[0] ?? '']\r\n\r\n            const addEthereumChain = {\r\n              blockExplorerUrls,\r\n              chainId: numberToHex(chainId),\r\n              chainName: addEthereumChainParameter?.chainName ?? chain.name,\r\n              iconUrls: addEthereumChainParameter?.iconUrls,\r\n              nativeCurrency:\r\n                addEthereumChainParameter?.nativeCurrency ??\r\n                chain.nativeCurrency,\r\n              rpcUrls,\r\n            } satisfies AddEthereumChainParameter\r\n\r\n            await Promise.all([\r\n              provider\r\n                .request({\r\n                  method: 'wallet_addEthereumChain',\r\n                  params: [addEthereumChain],\r\n                })\r\n                .then(async () => {\r\n                  const currentChainId = await this.getChainId()\r\n                  if (currentChainId === chainId)\r\n                    config.emitter.emit('change', { chainId })\r\n                  else\r\n                    throw new UserRejectedRequestError(\r\n                      new Error('User rejected switch after adding network.'),\r\n                    )\r\n                }),\r\n              promise,\r\n            ])\r\n\r\n            return chain\r\n          } catch (error) {\r\n            throw new UserRejectedRequestError(error as Error)\r\n          }\r\n        }\r\n\r\n        if (error.code === UserRejectedRequestError.code)\r\n          throw new UserRejectedRequestError(error)\r\n        throw new SwitchChainError(error)\r\n      }\r\n    },\r\n    async onAccountsChanged(accounts) {\r\n      // Disconnect if there are no accounts\r\n      if (accounts.length === 0) this.onDisconnect()\r\n      // Connect if emitter is listening for connect event (e.g. is disconnected and connects through wallet interface)\r\n      else if (config.emitter.listenerCount('connect')) {\r\n        const chainId = (await this.getChainId()).toString()\r\n        this.onConnect({ chainId })\r\n        // Remove disconnected shim if it exists\r\n        if (shimDisconnect)\r\n          await config.storage?.removeItem(`${this.id}.disconnected`)\r\n      }\r\n      // Regular change event\r\n      else\r\n        config.emitter.emit('change', {\r\n          accounts: accounts.map((x) => getAddress(x)),\r\n        })\r\n    },\r\n    onChainChanged(chain) {\r\n      const chainId = Number(chain)\r\n      config.emitter.emit('change', { chainId })\r\n    },\r\n    async onConnect(connectInfo) {\r\n      const accounts = await this.getAccounts()\r\n      if (accounts.length === 0) return\r\n\r\n      const chainId = Number(connectInfo.chainId)\r\n      config.emitter.emit('connect', { accounts, chainId })\r\n\r\n      // Manage EIP-1193 event listeners\r\n      const provider = await this.getProvider()\r\n      if (provider) {\r\n        if (connect) {\r\n          provider.removeListener('connect', connect)\r\n          connect = undefined\r\n        }\r\n        if (!accountsChanged) {\r\n          accountsChanged = this.onAccountsChanged.bind(this)\r\n          provider.on('accountsChanged', accountsChanged)\r\n        }\r\n        if (!chainChanged) {\r\n          chainChanged = this.onChainChanged.bind(this)\r\n          provider.on('chainChanged', chainChanged)\r\n        }\r\n        if (!disconnect) {\r\n          disconnect = this.onDisconnect.bind(this)\r\n          provider.on('disconnect', disconnect)\r\n        }\r\n      }\r\n    },\r\n    async onDisconnect(error) {\r\n      const provider = await this.getProvider()\r\n\r\n      // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\r\n      // https://github.com/MetaMask/providers/pull/120\r\n      if (error && (error as RpcError<1013>).code === 1013) {\r\n        if (provider && !!(await this.getAccounts()).length) return\r\n      }\r\n\r\n      // No need to remove `${this.id}.disconnected` from storage because `onDisconnect` is typically\r\n      // only called when the wallet is disconnected through the wallet's interface, meaning the wallet\r\n      // actually disconnected and we don't need to simulate it.\r\n      config.emitter.emit('disconnect')\r\n\r\n      // Manage EIP-1193 event listeners\r\n      if (provider) {\r\n        if (chainChanged) {\r\n          provider.removeListener('chainChanged', chainChanged)\r\n          chainChanged = undefined\r\n        }\r\n        if (disconnect) {\r\n          provider.removeListener('disconnect', disconnect)\r\n          disconnect = undefined\r\n        }\r\n        if (!connect) {\r\n          connect = this.onConnect.bind(this)\r\n          provider.on('connect', connect)\r\n        }\r\n      }\r\n    },\r\n  }))\r\n}\r\n\r\nconst targetMap = {\r\n  coinbaseWallet: {\r\n    id: 'coinbaseWallet',\r\n    name: 'Coinbase Wallet',\r\n    provider(window) {\r\n      if (window?.coinbaseWalletExtension) return window.coinbaseWalletExtension\r\n      return findProvider(window, 'isCoinbaseWallet')\r\n    },\r\n  },\r\n  metaMask: {\r\n    id: 'metaMask',\r\n    name: 'MetaMask',\r\n    provider(window) {\r\n      return findProvider(window, (provider) => {\r\n        if (!provider.isMetaMask) return false\r\n        // Brave tries to make itself look like MetaMask\r\n        // Could also try RPC `web3_clientVersion` if following is unreliable\r\n        if (provider.isBraveWallet && !provider._events && !provider._state)\r\n          return false\r\n        // Other wallets that try to look like MetaMask\r\n        const flags = [\r\n          'isApexWallet',\r\n          'isAvalanche',\r\n          'isBitKeep',\r\n          'isBlockWallet',\r\n          'isKuCoinWallet',\r\n          'isMathWallet',\r\n          'isOkxWallet',\r\n          'isOKExWallet',\r\n          'isOneInchIOSWallet',\r\n          'isOneInchAndroidWallet',\r\n          'isOpera',\r\n          'isPhantom',\r\n          'isPortal',\r\n          'isRabby',\r\n          'isTokenPocket',\r\n          'isTokenary',\r\n          'isUniswapWallet',\r\n          'isZerion',\r\n        ] satisfies WalletProviderFlags[]\r\n        for (const flag of flags) if (provider[flag]) return false\r\n        return true\r\n      })\r\n    },\r\n  },\r\n  phantom: {\r\n    id: 'phantom',\r\n    name: 'Phantom',\r\n    provider(window) {\r\n      if (window?.phantom?.ethereum) return window.phantom?.ethereum\r\n      return findProvider(window, 'isPhantom')\r\n    },\r\n  },\r\n} as const satisfies TargetMap\r\n\r\ntype TargetMap = { [_ in TargetId]?: Target | undefined }\r\n\r\ntype Target = {\r\n  icon?: string | undefined\r\n  id: string\r\n  name: string\r\n  provider:\r\n    | WalletProviderFlags\r\n    | WalletProvider\r\n    | ((window?: Window | undefined) => WalletProvider | undefined)\r\n}\r\n\r\n/** @deprecated */\r\ntype TargetId = Compute<WalletProviderFlags> extends `is${infer name}`\r\n  ? name extends `${infer char}${infer rest}`\r\n    ? `${Lowercase<char>}${rest}`\r\n    : never\r\n  : never\r\n\r\n/**\r\n * @deprecated As of 2024/10/16, we are no longer accepting new provider flags as EIP-6963 should be used instead.\r\n */\r\ntype WalletProviderFlags =\r\n  | 'isApexWallet'\r\n  | 'isAvalanche'\r\n  | 'isBackpack'\r\n  | 'isBifrost'\r\n  | 'isBitKeep'\r\n  | 'isBitski'\r\n  | 'isBlockWallet'\r\n  | 'isBraveWallet'\r\n  | 'isCoinbaseWallet'\r\n  | 'isDawn'\r\n  | 'isEnkrypt'\r\n  | 'isExodus'\r\n  | 'isFrame'\r\n  | 'isFrontier'\r\n  | 'isGamestop'\r\n  | 'isHyperPay'\r\n  | 'isImToken'\r\n  | 'isKuCoinWallet'\r\n  | 'isMathWallet'\r\n  | 'isMetaMask'\r\n  | 'isOkxWallet'\r\n  | 'isOKExWallet'\r\n  | 'isOneInchAndroidWallet'\r\n  | 'isOneInchIOSWallet'\r\n  | 'isOpera'\r\n  | 'isPhantom'\r\n  | 'isPortal'\r\n  | 'isRabby'\r\n  | 'isRainbow'\r\n  | 'isStatus'\r\n  | 'isTally'\r\n  | 'isTokenPocket'\r\n  | 'isTokenary'\r\n  | 'isTrust'\r\n  | 'isTrustWallet'\r\n  | 'isUniswapWallet'\r\n  | 'isXDEFI'\r\n  | 'isZerion'\r\n\r\ntype WalletProvider = Compute<\r\n  EIP1193Provider & {\r\n    [key in WalletProviderFlags]?: true | undefined\r\n  } & {\r\n    providers?: WalletProvider[] | undefined\r\n    /** Only exists in MetaMask as of 2022/04/03 */\r\n    _events?: { connect?: (() => void) | undefined } | undefined\r\n    /** Only exists in MetaMask as of 2022/04/03 */\r\n    _state?:\r\n      | {\r\n          accounts?: string[]\r\n          initialized?: boolean\r\n          isConnected?: boolean\r\n          isPermanentlyDisconnected?: boolean\r\n          isUnlocked?: boolean\r\n        }\r\n      | undefined\r\n  }\r\n>\r\n\r\ntype Window = {\r\n  coinbaseWalletExtension?: WalletProvider | undefined\r\n  ethereum?: WalletProvider | undefined\r\n  phantom?: { ethereum: WalletProvider } | undefined\r\n}\r\n\r\nfunction findProvider(\r\n  window: globalThis.Window | Window | undefined,\r\n  select?: WalletProviderFlags | ((provider: WalletProvider) => boolean),\r\n) {\r\n  function isProvider(provider: WalletProvider) {\r\n    if (typeof select === 'function') return select(provider)\r\n    if (typeof select === 'string') return provider[select]\r\n    return true\r\n  }\r\n\r\n  const ethereum = (window as Window).ethereum\r\n  if (ethereum?.providers)\r\n    return ethereum.providers.find((provider) => isProvider(provider))\r\n  if (ethereum && isProvider(ethereum)) return ethereum\r\n  return undefined\r\n}\r\n", "import {\r\n  type Address,\r\n  type EIP1193RequestFn,\r\n  type Hex,\r\n  RpcRequestError,\r\n  SwitchChainError,\r\n  type Transport,\r\n  UserRejectedRequestError,\r\n  type WalletCallReceipt,\r\n  type WalletRpcSchema,\r\n  custom,\r\n  fromHex,\r\n  getAddress,\r\n  keccak256,\r\n  numberToHex,\r\n  stringToHex,\r\n} from 'viem'\r\nimport { rpc } from 'viem/utils'\r\n\r\nimport {\r\n  ChainNotConfiguredError,\r\n  ConnectorNotConnectedError,\r\n} from '../errors/config.js'\r\nimport { createConnector } from './createConnector.js'\r\n\r\nexport type MockParameters = {\r\n  accounts: readonly [Address, ...Address[]]\r\n  features?:\r\n    | {\r\n        defaultConnected?: boolean | undefined\r\n        connectError?: boolean | Error | undefined\r\n        switchChainError?: boolean | Error | undefined\r\n        signMessageError?: boolean | Error | undefined\r\n        signTypedDataError?: boolean | Error | undefined\r\n        reconnect?: boolean | undefined\r\n        watchAssetError?: boolean | Error | undefined\r\n      }\r\n    | undefined\r\n}\r\n\r\nmock.type = 'mock' as const\r\nexport function mock(parameters: MockParameters) {\r\n  const transactionCache = new Map<Hex, Hex[]>()\r\n  const features =\r\n    parameters.features ??\r\n    ({ defaultConnected: false } satisfies MockParameters['features'])\r\n\r\n  type Provider = ReturnType<\r\n    Transport<'custom', unknown, EIP1193RequestFn<WalletRpcSchema>>\r\n  >\r\n  type Properties = {\r\n    connect(parameters?: {\r\n      chainId?: number | undefined\r\n      isReconnecting?: boolean | undefined\r\n      foo?: string | undefined\r\n    }): Promise<{\r\n      accounts: readonly Address[]\r\n      chainId: number\r\n    }>\r\n  }\r\n  let connected = features.defaultConnected\r\n  let connectedChainId: number\r\n\r\n  return createConnector<Provider, Properties>((config) => ({\r\n    id: 'mock',\r\n    name: 'Mock Connector',\r\n    type: mock.type,\r\n    async setup() {\r\n      connectedChainId = config.chains[0].id\r\n    },\r\n    async connect({ chainId } = {}) {\r\n      if (features.connectError) {\r\n        if (typeof features.connectError === 'boolean')\r\n          throw new UserRejectedRequestError(new Error('Failed to connect.'))\r\n        throw features.connectError\r\n      }\r\n\r\n      const provider = await this.getProvider()\r\n      const accounts = await provider.request({\r\n        method: 'eth_requestAccounts',\r\n      })\r\n\r\n      let currentChainId = await this.getChainId()\r\n      if (chainId && currentChainId !== chainId) {\r\n        const chain = await this.switchChain!({ chainId })\r\n        currentChainId = chain.id\r\n      }\r\n\r\n      connected = true\r\n\r\n      return {\r\n        accounts: accounts.map((x) => getAddress(x)),\r\n        chainId: currentChainId,\r\n      }\r\n    },\r\n    async disconnect() {\r\n      connected = false\r\n    },\r\n    async getAccounts() {\r\n      if (!connected) throw new ConnectorNotConnectedError()\r\n      const provider = await this.getProvider()\r\n      const accounts = await provider.request({ method: 'eth_accounts' })\r\n      return accounts.map((x) => getAddress(x))\r\n    },\r\n    async getChainId() {\r\n      const provider = await this.getProvider()\r\n      const hexChainId = await provider.request({ method: 'eth_chainId' })\r\n      return fromHex(hexChainId, 'number')\r\n    },\r\n    async isAuthorized() {\r\n      if (!features.reconnect) return false\r\n      if (!connected) return false\r\n      const accounts = await this.getAccounts()\r\n      return !!accounts.length\r\n    },\r\n    async switchChain({ chainId }) {\r\n      const provider = await this.getProvider()\r\n      const chain = config.chains.find((x) => x.id === chainId)\r\n      if (!chain) throw new SwitchChainError(new ChainNotConfiguredError())\r\n\r\n      await provider.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: numberToHex(chainId) }],\r\n      })\r\n      return chain\r\n    },\r\n    onAccountsChanged(accounts) {\r\n      if (accounts.length === 0) this.onDisconnect()\r\n      else\r\n        config.emitter.emit('change', {\r\n          accounts: accounts.map((x) => getAddress(x)),\r\n        })\r\n    },\r\n    onChainChanged(chain) {\r\n      const chainId = Number(chain)\r\n      config.emitter.emit('change', { chainId })\r\n    },\r\n    async onDisconnect(_error) {\r\n      config.emitter.emit('disconnect')\r\n      connected = false\r\n    },\r\n    async getProvider({ chainId } = {}) {\r\n      const chain =\r\n        config.chains.find((x) => x.id === chainId) ?? config.chains[0]\r\n      const url = chain.rpcUrls.default.http[0]!\r\n\r\n      const request: EIP1193RequestFn = async ({ method, params }) => {\r\n        // eth methods\r\n        if (method === 'eth_chainId') return numberToHex(connectedChainId)\r\n        if (method === 'eth_requestAccounts') return parameters.accounts\r\n        if (method === 'eth_signTypedData_v4')\r\n          if (features.signTypedDataError) {\r\n            if (typeof features.signTypedDataError === 'boolean')\r\n              throw new UserRejectedRequestError(\r\n                new Error('Failed to sign typed data.'),\r\n              )\r\n            throw features.signTypedDataError\r\n          }\r\n\r\n        // wallet methods\r\n        if (method === 'wallet_switchEthereumChain') {\r\n          if (features.switchChainError) {\r\n            if (typeof features.switchChainError === 'boolean')\r\n              throw new UserRejectedRequestError(\r\n                new Error('Failed to switch chain.'),\r\n              )\r\n            throw features.switchChainError\r\n          }\r\n          type Params = [{ chainId: Hex }]\r\n          connectedChainId = fromHex((params as Params)[0].chainId, 'number')\r\n          this.onChainChanged(connectedChainId.toString())\r\n          return\r\n        }\r\n\r\n        if (method === 'wallet_watchAsset') {\r\n          if (features.watchAssetError) {\r\n            if (typeof features.watchAssetError === 'boolean')\r\n              throw new UserRejectedRequestError(\r\n                new Error('Failed to switch chain.'),\r\n              )\r\n            throw features.watchAssetError\r\n          }\r\n          return connected\r\n        }\r\n\r\n        if (method === 'wallet_getCapabilities')\r\n          return {\r\n            '0x2105': {\r\n              paymasterService: {\r\n                supported:\r\n                  (params as [Hex])[0] ===\r\n                  '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n              },\r\n              sessionKeys: {\r\n                supported: true,\r\n              },\r\n            },\r\n            '0x14A34': {\r\n              paymasterService: {\r\n                supported:\r\n                  (params as [Hex])[0] ===\r\n                  '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n              },\r\n            },\r\n          }\r\n\r\n        if (method === 'wallet_sendCalls') {\r\n          const hashes = []\r\n          const calls = (params as any)[0].calls\r\n          for (const call of calls) {\r\n            const { result, error } = await rpc.http(url, {\r\n              body: {\r\n                method: 'eth_sendTransaction',\r\n                params: [call],\r\n              },\r\n            })\r\n            if (error)\r\n              throw new RpcRequestError({\r\n                body: { method, params },\r\n                error,\r\n                url,\r\n              })\r\n            hashes.push(result)\r\n          }\r\n          const id = keccak256(stringToHex(JSON.stringify(calls)))\r\n          transactionCache.set(id, hashes)\r\n          return id\r\n        }\r\n\r\n        if (method === 'wallet_getCallsStatus') {\r\n          const hashes = transactionCache.get((params as any)[0])\r\n          if (!hashes) return null\r\n          const receipts = await Promise.all(\r\n            hashes.map(async (hash) => {\r\n              const { result, error } = await rpc.http(url, {\r\n                body: {\r\n                  method: 'eth_getTransactionReceipt',\r\n                  params: [hash],\r\n                  id: 0,\r\n                },\r\n              })\r\n              if (error)\r\n                throw new RpcRequestError({\r\n                  body: { method, params },\r\n                  error,\r\n                  url,\r\n                })\r\n              if (!result) return null\r\n              return {\r\n                blockHash: result.blockHash,\r\n                blockNumber: result.blockNumber,\r\n                gasUsed: result.gasUsed,\r\n                logs: result.logs,\r\n                status: result.status,\r\n                transactionHash: result.transactionHash,\r\n              } satisfies WalletCallReceipt\r\n            }),\r\n          )\r\n          if (receipts.some((x) => !x))\r\n            return { status: 'PENDING', receipts: [] }\r\n          return { status: 'CONFIRMED', receipts }\r\n        }\r\n\r\n        if (method === 'wallet_showCallsStatus') return\r\n\r\n        // other methods\r\n        if (method === 'personal_sign') {\r\n          if (features.signMessageError) {\r\n            if (typeof features.signMessageError === 'boolean')\r\n              throw new UserRejectedRequestError(\r\n                new Error('Failed to sign message.'),\r\n              )\r\n            throw features.signMessageError\r\n          }\r\n          // Change `personal_sign` to `eth_sign` and swap params\r\n          method = 'eth_sign'\r\n          type Params = [data: Hex, address: Address]\r\n          params = [(params as Params)[1], (params as Params)[0]]\r\n        }\r\n\r\n        const body = { method, params }\r\n        const { error, result } = await rpc.http(url, { body })\r\n        if (error) throw new RpcRequestError({ body, error, url })\r\n\r\n        return result\r\n      }\r\n      return custom({ request })({ retryCount: 0 })\r\n    },\r\n  }))\r\n}\r\n", "import type { EIP1193Provider } from './register.js'\r\nimport type {\r\n  EIP6963AnnounceProviderEvent,\r\n  EIP6963ProviderDetail,\r\n} from './types.js'\r\n\r\n////////////////////////////////////////////////////////////////////////////\r\n// Announce Provider\r\n\r\nexport type AnnounceProviderParameters = EIP6963ProviderDetail<\r\n  EIP1193Provider,\r\n  string\r\n>\r\nexport type AnnounceProviderReturnType = () => void\r\n\r\n/**\r\n * Announces an EIP-1193 Provider.\r\n */\r\nexport function announceProvider(\r\n  detail: AnnounceProviderParameters,\r\n): AnnounceProviderReturnType {\r\n  const event: CustomEvent<EIP6963ProviderDetail> = new CustomEvent(\r\n    'eip6963:announceProvider',\r\n    { detail: Object.freeze(detail) },\r\n  )\r\n\r\n  window.dispatchEvent(event)\r\n\r\n  const handler = () => window.dispatchEvent(event)\r\n  window.addEventListener('eip6963:requestProvider', handler)\r\n  return () => window.removeEventListener('eip6963:requestProvider', handler)\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////\r\n// Request Providers\r\n\r\nexport type RequestProvidersParameters = (\r\n  providerDetail: EIP6963ProviderDetail,\r\n) => void\r\nexport type RequestProvidersReturnType = (() => void) | undefined\r\n\r\n/**\r\n * Watches for EIP-1193 Providers to be announced.\r\n */\r\nexport function requestProviders(\r\n  listener: RequestProvidersParameters,\r\n): RequestProvidersReturnType {\r\n  if (typeof window === 'undefined') return\r\n  const handler = (event: EIP6963AnnounceProviderEvent) =>\r\n    listener(event.detail)\r\n\r\n  window.addEventListener('eip6963:announceProvider', handler)\r\n\r\n  window.dispatchEvent(new CustomEvent('eip6963:requestProvider'))\r\n\r\n  return () => window.removeEventListener('eip6963:announceProvider', handler)\r\n}\r\n", "import type { Rdns } from './register.js'\r\nimport type { EIP6963ProviderDetail } from './types.js'\r\nimport { requestProviders } from './utils.js'\r\n\r\nexport type Listener = (\r\n  providerDetails: readonly EIP6963ProviderDetail[],\r\n  meta?:\r\n    | {\r\n        added?: readonly EIP6963ProviderDetail[] | undefined\r\n        removed?: readonly EIP6963ProviderDetail[] | undefined\r\n      }\r\n    | undefined,\r\n) => void\r\n\r\nexport type Store = {\r\n  /**\r\n   * Clears the store, including all provider details.\r\n   */\r\n  clear(): void\r\n  /**\r\n   * Destroys the store, including all provider details and listeners.\r\n   */\r\n  destroy(): void\r\n  /**\r\n   * Finds a provider detail by its RDNS (Reverse Domain Name Identifier).\r\n   */\r\n  findProvider(args: { rdns: Rdns }): EIP6963ProviderDetail | undefined\r\n  /**\r\n   * Returns all provider details that have been emitted.\r\n   */\r\n  getProviders(): readonly EIP6963ProviderDetail[]\r\n  /**\r\n   * Resets the store, and emits an event to request provider details.\r\n   */\r\n  reset(): void\r\n  /**\r\n   * Subscribes to emitted provider details.\r\n   */\r\n  subscribe(\r\n    listener: Listener,\r\n    args?: { emitImmediately?: boolean | undefined } | undefined,\r\n  ): () => void\r\n\r\n  /**\r\n   * @internal\r\n   * Current state of listening listeners.\r\n   */\r\n  _listeners(): Set<Listener>\r\n}\r\n\r\nexport function createStore(): Store {\r\n  const listeners: Set<Listener> = new Set()\r\n  let providerDetails: readonly EIP6963ProviderDetail[] = []\r\n\r\n  const request = () =>\r\n    requestProviders((providerDetail) => {\r\n      if (\r\n        providerDetails.some(\r\n          ({ info }) => info.uuid === providerDetail.info.uuid,\r\n        )\r\n      )\r\n        return\r\n\r\n      providerDetails = [...providerDetails, providerDetail]\r\n      listeners.forEach((listener) =>\r\n        listener(providerDetails, { added: [providerDetail] }),\r\n      )\r\n    })\r\n  let unwatch = request()\r\n\r\n  return {\r\n    _listeners() {\r\n      return listeners\r\n    },\r\n    clear() {\r\n      listeners.forEach((listener) =>\r\n        listener([], { removed: [...providerDetails] }),\r\n      )\r\n      providerDetails = []\r\n    },\r\n    destroy() {\r\n      this.clear()\r\n      listeners.clear()\r\n      unwatch?.()\r\n    },\r\n    findProvider({ rdns }) {\r\n      return providerDetails.find(\r\n        (providerDetail) => providerDetail.info.rdns === rdns,\r\n      )\r\n    },\r\n    getProviders() {\r\n      return providerDetails\r\n    },\r\n    reset() {\r\n      this.clear()\r\n      unwatch?.()\r\n      unwatch = request()\r\n    },\r\n    subscribe(listener, { emitImmediately } = {}) {\r\n      listeners.add(listener)\r\n      if (emitImmediately) listener(providerDetails, { added: providerDetails })\r\n      return () => listeners.delete(listener)\r\n    },\r\n  }\r\n}\r\n", "const reduxImpl = (reducer, initial) => (set, _get, api) => {\r\n  api.dispatch = (action) => {\r\n    set((state) => reducer(state, action), false, action);\r\n    return action;\r\n  };\r\n  api.dispatchFromDevtools = true;\r\n  return { dispatch: (...a) => api.dispatch(...a), ...initial };\r\n};\r\nconst redux = reduxImpl;\r\n\r\nconst trackedConnections = /* @__PURE__ */ new Map();\r\nconst getTrackedConnectionState = (name) => {\r\n  const api = trackedConnections.get(name);\r\n  if (!api) return {};\r\n  return Object.fromEntries(\r\n    Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])\r\n  );\r\n};\r\nconst extractConnectionInformation = (store, extensionConnector, options) => {\r\n  if (store === void 0) {\r\n    return {\r\n      type: \"untracked\",\r\n      connection: extensionConnector.connect(options)\r\n    };\r\n  }\r\n  const existingConnection = trackedConnections.get(options.name);\r\n  if (existingConnection) {\r\n    return { type: \"tracked\", store, ...existingConnection };\r\n  }\r\n  const newConnection = {\r\n    connection: extensionConnector.connect(options),\r\n    stores: {}\r\n  };\r\n  trackedConnections.set(options.name, newConnection);\r\n  return { type: \"tracked\", store, ...newConnection };\r\n};\r\nconst devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {\r\n  const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;\r\n  let extensionConnector;\r\n  try {\r\n    extensionConnector = (enabled != null ? enabled : (import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\r\n  } catch (e) {\r\n  }\r\n  if (!extensionConnector) {\r\n    return fn(set, get, api);\r\n  }\r\n  const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);\r\n  let isRecording = true;\r\n  api.setState = (state, replace, nameOrAction) => {\r\n    const r = set(state, replace);\r\n    if (!isRecording) return r;\r\n    const action = nameOrAction === void 0 ? { type: anonymousActionType || \"anonymous\" } : typeof nameOrAction === \"string\" ? { type: nameOrAction } : nameOrAction;\r\n    if (store === void 0) {\r\n      connection == null ? void 0 : connection.send(action, get());\r\n      return r;\r\n    }\r\n    connection == null ? void 0 : connection.send(\r\n      {\r\n        ...action,\r\n        type: `${store}/${action.type}`\r\n      },\r\n      {\r\n        ...getTrackedConnectionState(options.name),\r\n        [store]: api.getState()\r\n      }\r\n    );\r\n    return r;\r\n  };\r\n  const setStateFromDevtools = (...a) => {\r\n    const originalIsRecording = isRecording;\r\n    isRecording = false;\r\n    set(...a);\r\n    isRecording = originalIsRecording;\r\n  };\r\n  const initialState = fn(api.setState, get, api);\r\n  if (connectionInformation.type === \"untracked\") {\r\n    connection == null ? void 0 : connection.init(initialState);\r\n  } else {\r\n    connectionInformation.stores[connectionInformation.store] = api;\r\n    connection == null ? void 0 : connection.init(\r\n      Object.fromEntries(\r\n        Object.entries(connectionInformation.stores).map(([key, store2]) => [\r\n          key,\r\n          key === connectionInformation.store ? initialState : store2.getState()\r\n        ])\r\n      )\r\n    );\r\n  }\r\n  if (api.dispatchFromDevtools && typeof api.dispatch === \"function\") {\r\n    let didWarnAboutReservedActionType = false;\r\n    const originalDispatch = api.dispatch;\r\n    api.dispatch = (...a) => {\r\n      if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && a[0].type === \"__setState\" && !didWarnAboutReservedActionType) {\r\n        console.warn(\r\n          '[zustand devtools middleware] \"__setState\" action type is reserved to set state from the devtools. Avoid using it.'\r\n        );\r\n        didWarnAboutReservedActionType = true;\r\n      }\r\n      originalDispatch(...a);\r\n    };\r\n  }\r\n  connection.subscribe((message) => {\r\n    var _a;\r\n    switch (message.type) {\r\n      case \"ACTION\":\r\n        if (typeof message.payload !== \"string\") {\r\n          console.error(\r\n            \"[zustand devtools middleware] Unsupported action format\"\r\n          );\r\n          return;\r\n        }\r\n        return parseJsonThen(\r\n          message.payload,\r\n          (action) => {\r\n            if (action.type === \"__setState\") {\r\n              if (store === void 0) {\r\n                setStateFromDevtools(action.state);\r\n                return;\r\n              }\r\n              if (Object.keys(action.state).length !== 1) {\r\n                console.error(\r\n                  `\r\n                    [zustand devtools middleware] Unsupported __setState action format.\r\n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\r\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\r\n                    `\r\n                );\r\n              }\r\n              const stateFromDevtools = action.state[store];\r\n              if (stateFromDevtools === void 0 || stateFromDevtools === null) {\r\n                return;\r\n              }\r\n              if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {\r\n                setStateFromDevtools(stateFromDevtools);\r\n              }\r\n              return;\r\n            }\r\n            if (!api.dispatchFromDevtools) return;\r\n            if (typeof api.dispatch !== \"function\") return;\r\n            api.dispatch(action);\r\n          }\r\n        );\r\n      case \"DISPATCH\":\r\n        switch (message.payload.type) {\r\n          case \"RESET\":\r\n            setStateFromDevtools(initialState);\r\n            if (store === void 0) {\r\n              return connection == null ? void 0 : connection.init(api.getState());\r\n            }\r\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\r\n          case \"COMMIT\":\r\n            if (store === void 0) {\r\n              connection == null ? void 0 : connection.init(api.getState());\r\n              return;\r\n            }\r\n            return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\r\n          case \"ROLLBACK\":\r\n            return parseJsonThen(message.state, (state) => {\r\n              if (store === void 0) {\r\n                setStateFromDevtools(state);\r\n                connection == null ? void 0 : connection.init(api.getState());\r\n                return;\r\n              }\r\n              setStateFromDevtools(state[store]);\r\n              connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));\r\n            });\r\n          case \"JUMP_TO_STATE\":\r\n          case \"JUMP_TO_ACTION\":\r\n            return parseJsonThen(message.state, (state) => {\r\n              if (store === void 0) {\r\n                setStateFromDevtools(state);\r\n                return;\r\n              }\r\n              if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {\r\n                setStateFromDevtools(state[store]);\r\n              }\r\n            });\r\n          case \"IMPORT_STATE\": {\r\n            const { nextLiftedState } = message.payload;\r\n            const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;\r\n            if (!lastComputedState) return;\r\n            if (store === void 0) {\r\n              setStateFromDevtools(lastComputedState);\r\n            } else {\r\n              setStateFromDevtools(lastComputedState[store]);\r\n            }\r\n            connection == null ? void 0 : connection.send(\r\n              null,\r\n              // FIXME no-any\r\n              nextLiftedState\r\n            );\r\n            return;\r\n          }\r\n          case \"PAUSE_RECORDING\":\r\n            return isRecording = !isRecording;\r\n        }\r\n        return;\r\n    }\r\n  });\r\n  return initialState;\r\n};\r\nconst devtools = devtoolsImpl;\r\nconst parseJsonThen = (stringified, f) => {\r\n  let parsed;\r\n  try {\r\n    parsed = JSON.parse(stringified);\r\n  } catch (e) {\r\n    console.error(\r\n      \"[zustand devtools middleware] Could not parse the received json\",\r\n      e\r\n    );\r\n  }\r\n  if (parsed !== void 0) f(parsed);\r\n};\r\n\r\nconst subscribeWithSelectorImpl = (fn) => (set, get, api) => {\r\n  const origSubscribe = api.subscribe;\r\n  api.subscribe = (selector, optListener, options) => {\r\n    let listener = selector;\r\n    if (optListener) {\r\n      const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;\r\n      let currentSlice = selector(api.getState());\r\n      listener = (state) => {\r\n        const nextSlice = selector(state);\r\n        if (!equalityFn(currentSlice, nextSlice)) {\r\n          const previousSlice = currentSlice;\r\n          optListener(currentSlice = nextSlice, previousSlice);\r\n        }\r\n      };\r\n      if (options == null ? void 0 : options.fireImmediately) {\r\n        optListener(currentSlice, currentSlice);\r\n      }\r\n    }\r\n    return origSubscribe(listener);\r\n  };\r\n  const initialState = fn(set, get, api);\r\n  return initialState;\r\n};\r\nconst subscribeWithSelector = subscribeWithSelectorImpl;\r\n\r\nconst combine = (initialState, create) => (...a) => Object.assign({}, initialState, create(...a));\r\n\r\nfunction createJSONStorage(getStorage, options) {\r\n  let storage;\r\n  try {\r\n    storage = getStorage();\r\n  } catch (e) {\r\n    return;\r\n  }\r\n  const persistStorage = {\r\n    getItem: (name) => {\r\n      var _a;\r\n      const parse = (str2) => {\r\n        if (str2 === null) {\r\n          return null;\r\n        }\r\n        return JSON.parse(str2, options == null ? void 0 : options.reviver);\r\n      };\r\n      const str = (_a = storage.getItem(name)) != null ? _a : null;\r\n      if (str instanceof Promise) {\r\n        return str.then(parse);\r\n      }\r\n      return parse(str);\r\n    },\r\n    setItem: (name, newValue) => storage.setItem(\r\n      name,\r\n      JSON.stringify(newValue, options == null ? void 0 : options.replacer)\r\n    ),\r\n    removeItem: (name) => storage.removeItem(name)\r\n  };\r\n  return persistStorage;\r\n}\r\nconst toThenable = (fn) => (input) => {\r\n  try {\r\n    const result = fn(input);\r\n    if (result instanceof Promise) {\r\n      return result;\r\n    }\r\n    return {\r\n      then(onFulfilled) {\r\n        return toThenable(onFulfilled)(result);\r\n      },\r\n      catch(_onRejected) {\r\n        return this;\r\n      }\r\n    };\r\n  } catch (e) {\r\n    return {\r\n      then(_onFulfilled) {\r\n        return this;\r\n      },\r\n      catch(onRejected) {\r\n        return toThenable(onRejected)(e);\r\n      }\r\n    };\r\n  }\r\n};\r\nconst persistImpl = (config, baseOptions) => (set, get, api) => {\r\n  let options = {\r\n    storage: createJSONStorage(() => localStorage),\r\n    partialize: (state) => state,\r\n    version: 0,\r\n    merge: (persistedState, currentState) => ({\r\n      ...currentState,\r\n      ...persistedState\r\n    }),\r\n    ...baseOptions\r\n  };\r\n  let hasHydrated = false;\r\n  const hydrationListeners = /* @__PURE__ */ new Set();\r\n  const finishHydrationListeners = /* @__PURE__ */ new Set();\r\n  let storage = options.storage;\r\n  if (!storage) {\r\n    return config(\r\n      (...args) => {\r\n        console.warn(\r\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`\r\n        );\r\n        set(...args);\r\n      },\r\n      get,\r\n      api\r\n    );\r\n  }\r\n  const setItem = () => {\r\n    const state = options.partialize({ ...get() });\r\n    return storage.setItem(options.name, {\r\n      state,\r\n      version: options.version\r\n    });\r\n  };\r\n  const savedSetState = api.setState;\r\n  api.setState = (state, replace) => {\r\n    savedSetState(state, replace);\r\n    void setItem();\r\n  };\r\n  const configResult = config(\r\n    (...args) => {\r\n      set(...args);\r\n      void setItem();\r\n    },\r\n    get,\r\n    api\r\n  );\r\n  api.getInitialState = () => configResult;\r\n  let stateFromStorage;\r\n  const hydrate = () => {\r\n    var _a, _b;\r\n    if (!storage) return;\r\n    hasHydrated = false;\r\n    hydrationListeners.forEach((cb) => {\r\n      var _a2;\r\n      return cb((_a2 = get()) != null ? _a2 : configResult);\r\n    });\r\n    const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get()) != null ? _a : configResult)) || void 0;\r\n    return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {\r\n      if (deserializedStorageValue) {\r\n        if (typeof deserializedStorageValue.version === \"number\" && deserializedStorageValue.version !== options.version) {\r\n          if (options.migrate) {\r\n            return [\r\n              true,\r\n              options.migrate(\r\n                deserializedStorageValue.state,\r\n                deserializedStorageValue.version\r\n              )\r\n            ];\r\n          }\r\n          console.error(\r\n            `State loaded from storage couldn't be migrated since no migrate function was provided`\r\n          );\r\n        } else {\r\n          return [false, deserializedStorageValue.state];\r\n        }\r\n      }\r\n      return [false, void 0];\r\n    }).then((migrationResult) => {\r\n      var _a2;\r\n      const [migrated, migratedState] = migrationResult;\r\n      stateFromStorage = options.merge(\r\n        migratedState,\r\n        (_a2 = get()) != null ? _a2 : configResult\r\n      );\r\n      set(stateFromStorage, true);\r\n      if (migrated) {\r\n        return setItem();\r\n      }\r\n    }).then(() => {\r\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);\r\n      stateFromStorage = get();\r\n      hasHydrated = true;\r\n      finishHydrationListeners.forEach((cb) => cb(stateFromStorage));\r\n    }).catch((e) => {\r\n      postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);\r\n    });\r\n  };\r\n  api.persist = {\r\n    setOptions: (newOptions) => {\r\n      options = {\r\n        ...options,\r\n        ...newOptions\r\n      };\r\n      if (newOptions.storage) {\r\n        storage = newOptions.storage;\r\n      }\r\n    },\r\n    clearStorage: () => {\r\n      storage == null ? void 0 : storage.removeItem(options.name);\r\n    },\r\n    getOptions: () => options,\r\n    rehydrate: () => hydrate(),\r\n    hasHydrated: () => hasHydrated,\r\n    onHydrate: (cb) => {\r\n      hydrationListeners.add(cb);\r\n      return () => {\r\n        hydrationListeners.delete(cb);\r\n      };\r\n    },\r\n    onFinishHydration: (cb) => {\r\n      finishHydrationListeners.add(cb);\r\n      return () => {\r\n        finishHydrationListeners.delete(cb);\r\n      };\r\n    }\r\n  };\r\n  if (!options.skipHydration) {\r\n    hydrate();\r\n  }\r\n  return stateFromStorage || configResult;\r\n};\r\nconst persist = persistImpl;\r\n\r\nexport { combine, createJSONStorage, devtools, persist, redux, subscribeWithSelector };\r\n", "const createStoreImpl = (createState) => {\r\n  let state;\r\n  const listeners = /* @__PURE__ */ new Set();\r\n  const setState = (partial, replace) => {\r\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\r\n    if (!Object.is(nextState, state)) {\r\n      const previousState = state;\r\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\r\n      listeners.forEach((listener) => listener(state, previousState));\r\n    }\r\n  };\r\n  const getState = () => state;\r\n  const getInitialState = () => initialState;\r\n  const subscribe = (listener) => {\r\n    listeners.add(listener);\r\n    return () => listeners.delete(listener);\r\n  };\r\n  const api = { setState, getState, getInitialState, subscribe };\r\n  const initialState = state = createState(setState, getState, api);\r\n  return api;\r\n};\r\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\r\n\r\nexport { createStore };\r\n", "import { EventEmitter } from 'eventemitter3'\r\n\r\ntype EventMap = Record<string, object | never>\r\ntype EventKey<eventMap extends EventMap> = string & keyof eventMap\r\ntype EventFn<parameters extends unknown[] = any[]> = (\r\n  ...parameters: parameters\r\n) => void\r\nexport type EventData<\r\n  eventMap extends EventMap,\r\n  eventName extends keyof eventMap,\r\n> = (eventMap[eventName] extends [never] ? unknown : eventMap[eventName]) & {\r\n  uid: string\r\n}\r\n\r\nexport class Emitter<eventMap extends EventMap> {\r\n  _emitter = new EventEmitter()\r\n\r\n  constructor(public uid: string) {}\r\n\r\n  on<key extends EventKey<eventMap>>(\r\n    eventName: key,\r\n    fn: EventFn<\r\n      eventMap[key] extends [never]\r\n        ? [{ uid: string }]\r\n        : [data: eventMap[key] & { uid: string }]\r\n    >,\r\n  ) {\r\n    this._emitter.on(eventName, fn as EventFn)\r\n  }\r\n\r\n  once<key extends EventKey<eventMap>>(\r\n    eventName: key,\r\n    fn: EventFn<\r\n      eventMap[key] extends [never]\r\n        ? [{ uid: string }]\r\n        : [data: eventMap[key] & { uid: string }]\r\n    >,\r\n  ) {\r\n    this._emitter.once(eventName, fn as EventFn)\r\n  }\r\n\r\n  off<key extends EventKey<eventMap>>(\r\n    eventName: key,\r\n    fn: EventFn<\r\n      eventMap[key] extends [never]\r\n        ? [{ uid: string }]\r\n        : [data: eventMap[key] & { uid: string }]\r\n    >,\r\n  ) {\r\n    this._emitter.off(eventName, fn as EventFn)\r\n  }\r\n\r\n  emit<key extends EventKey<eventMap>>(\r\n    eventName: key,\r\n    ...params: eventMap[key] extends [never] ? [] : [data: eventMap[key]]\r\n  ) {\r\n    const data = params[0]\r\n    this._emitter.emit(eventName, { uid: this.uid, ...data })\r\n  }\r\n\r\n  listenerCount<key extends EventKey<eventMap>>(eventName: key) {\r\n    return this._emitter.listenerCount(eventName)\r\n  }\r\n}\r\n\r\nexport function createEmitter<eventMap extends EventMap>(uid: string) {\r\n  return new Emitter<eventMap>(uid)\r\n}\r\n", "type Reviver = (key: string, value: any) => any\r\n\r\nexport function deserialize<type>(value: string, reviver?: Reviver): type {\r\n  return JSON.parse(value, (key, value_) => {\r\n    let value = value_\r\n    if (value?.__type === 'bigint') value = BigInt(value.value)\r\n    if (value?.__type === 'Map') value = new Map(value.value)\r\n    return reviver?.(key, value) ?? value\r\n  })\r\n}\r\n", "/**\r\n * Get the reference key for the circular value\r\n *\r\n * @param keys the keys to build the reference key from\r\n * @param cutoff the maximum number of keys to include\r\n * @returns the reference key\r\n */\r\nfunction getReferenceKey(keys: string[], cutoff: number) {\r\n  return keys.slice(0, cutoff).join('.') || '.'\r\n}\r\n\r\n/**\r\n * Faster `Array.prototype.indexOf` implementation build for slicing / splicing\r\n *\r\n * @param array the array to match the value in\r\n * @param value the value to match\r\n * @returns the matching index, or -1\r\n */\r\nfunction getCutoff(array: any[], value: any) {\r\n  const { length } = array\r\n\r\n  for (let index = 0; index < length; ++index) {\r\n    if (array[index] === value) {\r\n      return index + 1\r\n    }\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\ntype StandardReplacer = (key: string, value: any) => any\r\ntype CircularReplacer = (key: string, value: any, referenceKey: string) => any\r\n\r\n/**\r\n * Create a replacer method that handles circular values\r\n *\r\n * @param [replacer] a custom replacer to use for non-circular values\r\n * @param [circularReplacer] a custom replacer to use for circular methods\r\n * @returns the value to stringify\r\n */\r\nfunction createReplacer(\r\n  replacer?: StandardReplacer | null | undefined,\r\n  circularReplacer?: CircularReplacer | null | undefined,\r\n): StandardReplacer {\r\n  const hasReplacer = typeof replacer === 'function'\r\n  const hasCircularReplacer = typeof circularReplacer === 'function'\r\n\r\n  const cache: any[] = []\r\n  const keys: string[] = []\r\n\r\n  return function replace(this: any, key: string, value: any) {\r\n    if (typeof value === 'object') {\r\n      if (cache.length) {\r\n        const thisCutoff = getCutoff(cache, this)\r\n\r\n        if (thisCutoff === 0) {\r\n          cache[cache.length] = this\r\n        } else {\r\n          cache.splice(thisCutoff)\r\n          keys.splice(thisCutoff)\r\n        }\r\n\r\n        keys[keys.length] = key\r\n\r\n        const valueCutoff = getCutoff(cache, value)\r\n\r\n        if (valueCutoff !== 0) {\r\n          return hasCircularReplacer\r\n            ? circularReplacer.call(\r\n                this,\r\n                key,\r\n                value,\r\n                getReferenceKey(keys, valueCutoff),\r\n              )\r\n            : `[ref=${getReferenceKey(keys, valueCutoff)}]`\r\n        }\r\n      } else {\r\n        cache[0] = value\r\n        keys[0] = key\r\n      }\r\n    }\r\n\r\n    return hasReplacer ? replacer.call(this, key, value) : value\r\n  }\r\n}\r\n\r\n/**\r\n * Stringifier that handles circular values\r\n *\r\n * Forked from https://github.com/planttheidea/fast-stringify\r\n *\r\n * @param value to stringify\r\n * @param [replacer] a custom replacer function for handling standard values\r\n * @param [indent] the number of spaces to indent the output by\r\n * @param [circularReplacer] a custom replacer function for handling circular values\r\n * @returns the stringified output\r\n */\r\nexport function serialize(\r\n  value: any,\r\n  replacer?: StandardReplacer | null | undefined,\r\n  indent?: number | null | undefined,\r\n  circularReplacer?: CircularReplacer | null | undefined,\r\n) {\r\n  return JSON.stringify(\r\n    value,\r\n    createReplacer((key, value_) => {\r\n      let value = value_\r\n      if (typeof value === 'bigint')\r\n        value = { __type: 'bigint', value: value_.toString() }\r\n      if (value instanceof Map)\r\n        value = { __type: 'Map', value: Array.from(value_.entries()) }\r\n      return replacer?.(key, value) ?? value\r\n    }, circularReplacer),\r\n    indent ?? undefined,\r\n  )\r\n}\r\n", "import type { PartializedState } from './createConfig.js'\r\nimport type { Compute } from './types/utils.js'\r\nimport { deserialize as deserialize_ } from './utils/deserialize.js'\r\nimport { serialize as serialize_ } from './utils/serialize.js'\r\n\r\n// key-values for loose autocomplete and typing\r\nexport type StorageItemMap = {\r\n  recentConnectorId: string\r\n  state: PartializedState\r\n}\r\n\r\nexport type Storage<\r\n  itemMap extends Record<string, unknown> = Record<string, unknown>,\r\n  ///\r\n  storageItemMap extends StorageItemMap = StorageItemMap & itemMap,\r\n> = {\r\n  key: string\r\n  getItem<\r\n    key extends keyof storageItemMap,\r\n    value extends storageItemMap[key],\r\n    defaultValue extends value | null | undefined,\r\n  >(\r\n    key: key,\r\n    defaultValue?: defaultValue | undefined,\r\n  ):\r\n    | (defaultValue extends null ? value | null : value)\r\n    | Promise<defaultValue extends null ? value | null : value>\r\n  setItem<\r\n    key extends keyof storageItemMap,\r\n    value extends storageItemMap[key] | null,\r\n  >(key: key, value: value): void | Promise<void>\r\n  removeItem(key: keyof storageItemMap): void | Promise<void>\r\n}\r\n\r\nexport type BaseStorage = {\r\n  getItem(\r\n    key: string,\r\n  ): string | null | undefined | Promise<string | null | undefined>\r\n  setItem(key: string, value: string): void | Promise<void>\r\n  removeItem(key: string): void | Promise<void>\r\n}\r\n\r\nexport type CreateStorageParameters = {\r\n  deserialize?: (<type>(value: string) => type | unknown) | undefined\r\n  key?: string | undefined\r\n  serialize?: (<type>(value: type | any) => string) | undefined\r\n  storage?: Compute<BaseStorage> | undefined\r\n}\r\n\r\nexport function createStorage<\r\n  itemMap extends Record<string, unknown> = Record<string, unknown>,\r\n  storageItemMap extends StorageItemMap = StorageItemMap & itemMap,\r\n>(parameters: CreateStorageParameters): Compute<Storage<storageItemMap>> {\r\n  const {\r\n    deserialize = deserialize_,\r\n    key: prefix = 'wagmi',\r\n    serialize = serialize_,\r\n    storage = noopStorage,\r\n  } = parameters\r\n\r\n  function unwrap<type>(value: type): type | Promise<type> {\r\n    if (value instanceof Promise) return value.then((x) => x).catch(() => null)\r\n    return value\r\n  }\r\n\r\n  return {\r\n    ...storage,\r\n    key: prefix,\r\n    async getItem(key, defaultValue) {\r\n      const value = storage.getItem(`${prefix}.${key as string}`)\r\n      const unwrapped = await unwrap(value)\r\n      if (unwrapped) return deserialize(unwrapped) ?? null\r\n      return (defaultValue ?? null) as any\r\n    },\r\n    async setItem(key, value) {\r\n      const storageKey = `${prefix}.${key as string}`\r\n      if (value === null) await unwrap(storage.removeItem(storageKey))\r\n      else await unwrap(storage.setItem(storageKey, serialize(value)))\r\n    },\r\n    async removeItem(key) {\r\n      await unwrap(storage.removeItem(`${prefix}.${key as string}`))\r\n    },\r\n  }\r\n}\r\n\r\nexport const noopStorage = {\r\n  getItem: () => null,\r\n  setItem: () => {},\r\n  removeItem: () => {},\r\n} satisfies BaseStorage\r\n\r\nexport function getDefaultStorage() {\r\n  const storage = (() => {\r\n    if (typeof window !== 'undefined' && window.localStorage)\r\n      return window.localStorage\r\n    return noopStorage\r\n  })()\r\n  return {\r\n    getItem(key) {\r\n      return storage.getItem(key)\r\n    },\r\n    removeItem(key) {\r\n      storage.removeItem(key)\r\n    },\r\n    setItem(key, value) {\r\n      try {\r\n        storage.setItem(key, value)\r\n        // silence errors by default (QuotaExceededError, SecurityError, etc.)\r\n      } catch {}\r\n    },\r\n  } satisfies BaseStorage\r\n}\r\n", "const size = 256\r\nlet index = size\r\nlet buffer: string\r\n\r\nexport function uid(length = 11) {\r\n  if (!buffer || index + length > size * 2) {\r\n    buffer = ''\r\n    index = 0\r\n    for (let i = 0; i < size; i++) {\r\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\r\n    }\r\n  }\r\n  return buffer.substring(index, index++ + length)\r\n}\r\n", "import {\r\n  type EIP6963ProviderDetail,\r\n  type Store as MipdStore,\r\n  createStore as createMipd,\r\n} from 'mipd'\r\nimport {\r\n  type Address,\r\n  type Chain,\r\n  type Client,\r\n  type EIP1193RequestFn,\r\n  createClient,\r\n  type ClientConfig as viem_ClientConfig,\r\n  type Transport as viem_Transport,\r\n} from 'viem'\r\nimport { persist, subscribeWithSelector } from 'zustand/middleware'\r\nimport { type Mutate, type StoreApi, createStore } from 'zustand/vanilla'\r\n\r\nimport type {\r\n  ConnectorEventMap,\r\n  CreateConnectorFn,\r\n} from './connectors/createConnector.js'\r\nimport { injected } from './connectors/injected.js'\r\nimport { type Emitter, type EventData, createEmitter } from './createEmitter.js'\r\nimport {\r\n  type Storage,\r\n  createStorage,\r\n  getDefaultStorage,\r\n} from './createStorage.js'\r\nimport { ChainNotConfiguredError } from './errors/config.js'\r\nimport type {\r\n  Compute,\r\n  ExactPartial,\r\n  LooseOmit,\r\n  OneOf,\r\n  RemoveUndefined,\r\n} from './types/utils.js'\r\nimport { uid } from './utils/uid.js'\r\nimport { version } from './version.js'\r\n\r\nexport function createConfig<\r\n  const chains extends readonly [Chain, ...Chain[]],\r\n  transports extends Record<chains[number]['id'], Transport>,\r\n  const connectorFns extends readonly CreateConnectorFn[],\r\n>(\r\n  parameters: CreateConfigParameters<chains, transports, connectorFns>,\r\n): Config<chains, transports, connectorFns> {\r\n  const {\r\n    multiInjectedProviderDiscovery = true,\r\n    storage = createStorage({\r\n      storage: getDefaultStorage(),\r\n    }),\r\n    syncConnectedChain = true,\r\n    ssr = false,\r\n    ...rest\r\n  } = parameters\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Set up connectors, clients, etc.\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const mipd =\r\n    typeof window !== 'undefined' && multiInjectedProviderDiscovery\r\n      ? createMipd()\r\n      : undefined\r\n\r\n  const chains = createStore(() => rest.chains)\r\n  const connectors = createStore(() => {\r\n    const collection = []\r\n    const rdnsSet = new Set<string>()\r\n    for (const connectorFns of rest.connectors ?? []) {\r\n      const connector = setup(connectorFns)\r\n      collection.push(connector)\r\n      if (!ssr && connector.rdns) {\r\n        const rdnsValues =\r\n          typeof connector.rdns === 'string' ? [connector.rdns] : connector.rdns\r\n        for (const rdns of rdnsValues) {\r\n          rdnsSet.add(rdns)\r\n        }\r\n      }\r\n    }\r\n    if (!ssr && mipd) {\r\n      const providers = mipd.getProviders()\r\n      for (const provider of providers) {\r\n        if (rdnsSet.has(provider.info.rdns)) continue\r\n        collection.push(setup(providerDetailToConnector(provider)))\r\n      }\r\n    }\r\n    return collection\r\n  })\r\n  function setup(connectorFn: CreateConnectorFn): Connector {\r\n    // Set up emitter with uid and add to connector so they are \"linked\" together.\r\n    const emitter = createEmitter<ConnectorEventMap>(uid())\r\n    const connector = {\r\n      ...connectorFn({\r\n        emitter,\r\n        chains: chains.getState(),\r\n        storage,\r\n        transports: rest.transports,\r\n      }),\r\n      emitter,\r\n      uid: emitter.uid,\r\n    }\r\n\r\n    // Start listening for `connect` events on connector setup\r\n    // This allows connectors to \"connect\" themselves without user interaction (e.g. MetaMask's \"Manually connect to current site\")\r\n    emitter.on('connect', connect)\r\n    connector.setup?.()\r\n\r\n    return connector\r\n  }\r\n  function providerDetailToConnector(providerDetail: EIP6963ProviderDetail) {\r\n    const { info } = providerDetail\r\n    const provider = providerDetail.provider as any\r\n    return injected({ target: { ...info, id: info.rdns, provider } })\r\n  }\r\n\r\n  const clients = new Map<number, Client<Transport, chains[number]>>()\r\n  function getClient<chainId extends chains[number]['id']>(\r\n    config: { chainId?: chainId | chains[number]['id'] | undefined } = {},\r\n  ): Client<Transport, Extract<chains[number], { id: chainId }>> {\r\n    const chainId = config.chainId ?? store.getState().chainId\r\n    const chain = chains.getState().find((x) => x.id === chainId)\r\n\r\n    // chainId specified and not configured\r\n    if (config.chainId && !chain) throw new ChainNotConfiguredError()\r\n\r\n    // If the target chain is not configured, use the client of the current chain.\r\n    type Return = Client<Transport, Extract<chains[number], { id: chainId }>>\r\n    {\r\n      const client = clients.get(store.getState().chainId)\r\n      if (client && !chain) return client as Return\r\n      if (!chain) throw new ChainNotConfiguredError()\r\n    }\r\n\r\n    // If a memoized client exists for a chain id, use that.\r\n    {\r\n      const client = clients.get(chainId)\r\n      if (client) return client as Return\r\n    }\r\n\r\n    let client: Client<Transport, chains[number]>\r\n    if (rest.client) client = rest.client({ chain })\r\n    else {\r\n      const chainId = chain.id as chains[number]['id']\r\n      const chainIds = chains.getState().map((x) => x.id)\r\n      // Grab all properties off `rest` and resolve for use in `createClient`\r\n      const properties: Partial<viem_ClientConfig> = {}\r\n      const entries = Object.entries(rest) as [keyof typeof rest, any][]\r\n\r\n      for (const [key, value] of entries) {\r\n        if (\r\n          key === 'chains' ||\r\n          key === 'client' ||\r\n          key === 'connectors' ||\r\n          key === 'transports'\r\n        )\r\n          continue\r\n\r\n        if (typeof value === 'object') {\r\n          // check if value is chainId-specific since some values can be objects\r\n          // e.g. { batch: { multicall: { batchSize: 1024 } } }\r\n          if (chainId in value) properties[key] = value[chainId]\r\n          else {\r\n            // check if value is chainId-specific, but does not have value for current chainId\r\n            const hasChainSpecificValue = chainIds.some((x) => x in value)\r\n            if (hasChainSpecificValue) continue\r\n            properties[key] = value\r\n          }\r\n        } else properties[key] = value\r\n      }\r\n\r\n      client = createClient({\r\n        ...properties,\r\n        chain,\r\n        batch: properties.batch ?? { multicall: true },\r\n        transport: (parameters) =>\r\n          rest.transports[chainId]({ ...parameters, connectors }),\r\n      })\r\n    }\r\n\r\n    clients.set(chainId, client)\r\n    return client as Return\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Create store\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function getInitialState(): State {\r\n    return {\r\n      chainId: chains.getState()[0].id,\r\n      connections: new Map<string, Connection>(),\r\n      current: null,\r\n      status: 'disconnected',\r\n    }\r\n  }\r\n\r\n  let currentVersion: number\r\n  const prefix = '0.0.0-canary-'\r\n  if (version.startsWith(prefix))\r\n    currentVersion = Number.parseInt(version.replace(prefix, ''))\r\n  // use package major version to version store\r\n  else currentVersion = Number.parseInt(version.split('.')[0] ?? '0')\r\n\r\n  const store = createStore(\r\n    subscribeWithSelector(\r\n      // only use persist middleware if storage exists\r\n      storage\r\n        ? persist(getInitialState, {\r\n            migrate(persistedState, version) {\r\n              if (version === currentVersion) return persistedState as State\r\n\r\n              const initialState = getInitialState()\r\n              const chainId = validatePersistedChainId(\r\n                persistedState,\r\n                initialState.chainId,\r\n              )\r\n              return { ...initialState, chainId }\r\n            },\r\n            name: 'store',\r\n            partialize(state) {\r\n              // Only persist \"critical\" store properties to preserve storage size.\r\n              return {\r\n                connections: {\r\n                  __type: 'Map',\r\n                  value: Array.from(state.connections.entries()).map(\r\n                    ([key, connection]) => {\r\n                      const { id, name, type, uid } = connection.connector\r\n                      const connector = { id, name, type, uid }\r\n                      return [key, { ...connection, connector }]\r\n                    },\r\n                  ),\r\n                } as unknown as PartializedState['connections'],\r\n                chainId: state.chainId,\r\n                current: state.current,\r\n              } satisfies PartializedState\r\n            },\r\n            merge(persistedState, currentState) {\r\n              // `status` should not be persisted as it messes with reconnection\r\n              if (\r\n                typeof persistedState === 'object' &&\r\n                persistedState &&\r\n                'status' in persistedState\r\n              )\r\n                delete persistedState.status\r\n              // Make sure persisted `chainId` is valid\r\n              const chainId = validatePersistedChainId(\r\n                persistedState,\r\n                currentState.chainId,\r\n              )\r\n              return {\r\n                ...currentState,\r\n                ...(persistedState as object),\r\n                chainId,\r\n              }\r\n            },\r\n            skipHydration: ssr,\r\n            storage: storage as Storage<Record<string, unknown>>,\r\n            version: currentVersion,\r\n          })\r\n        : getInitialState,\r\n    ),\r\n  )\r\n  store.setState(getInitialState())\r\n\r\n  function validatePersistedChainId(\r\n    persistedState: unknown,\r\n    defaultChainId: number,\r\n  ) {\r\n    return persistedState &&\r\n      typeof persistedState === 'object' &&\r\n      'chainId' in persistedState &&\r\n      typeof persistedState.chainId === 'number' &&\r\n      chains.getState().some((x) => x.id === persistedState.chainId)\r\n      ? persistedState.chainId\r\n      : defaultChainId\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Subscribe to changes\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  // Update default chain when connector chain changes\r\n  if (syncConnectedChain)\r\n    store.subscribe(\r\n      ({ connections, current }) =>\r\n        current ? connections.get(current)?.chainId : undefined,\r\n      (chainId) => {\r\n        // If chain is not configured, then don't switch over to it.\r\n        const isChainConfigured = chains\r\n          .getState()\r\n          .some((x) => x.id === chainId)\r\n        if (!isChainConfigured) return\r\n\r\n        return store.setState((x) => ({\r\n          ...x,\r\n          chainId: chainId ?? x.chainId,\r\n        }))\r\n      },\r\n    )\r\n\r\n  // EIP-6963 subscribe for new wallet providers\r\n  mipd?.subscribe((providerDetails) => {\r\n    const connectorIdSet = new Set<string>()\r\n    const connectorRdnsSet = new Set<string>()\r\n    for (const connector of connectors.getState()) {\r\n      connectorIdSet.add(connector.id)\r\n      if (connector.rdns) {\r\n        const rdnsValues =\r\n          typeof connector.rdns === 'string' ? [connector.rdns] : connector.rdns\r\n        for (const rdns of rdnsValues) {\r\n          connectorRdnsSet.add(rdns)\r\n        }\r\n      }\r\n    }\r\n\r\n    const newConnectors: Connector[] = []\r\n    for (const providerDetail of providerDetails) {\r\n      if (connectorRdnsSet.has(providerDetail.info.rdns)) continue\r\n      const connector = setup(providerDetailToConnector(providerDetail))\r\n      if (connectorIdSet.has(connector.id)) continue\r\n      newConnectors.push(connector)\r\n    }\r\n\r\n    if (storage && !store.persist.hasHydrated()) return\r\n    connectors.setState((x) => [...x, ...newConnectors], true)\r\n  })\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Emitter listeners\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  function change(data: EventData<ConnectorEventMap, 'change'>) {\r\n    store.setState((x) => {\r\n      const connection = x.connections.get(data.uid)\r\n      if (!connection) return x\r\n      return {\r\n        ...x,\r\n        connections: new Map(x.connections).set(data.uid, {\r\n          accounts:\r\n            (data.accounts as readonly [Address, ...Address[]]) ??\r\n            connection.accounts,\r\n          chainId: data.chainId ?? connection.chainId,\r\n          connector: connection.connector,\r\n        }),\r\n      }\r\n    })\r\n  }\r\n  function connect(data: EventData<ConnectorEventMap, 'connect'>) {\r\n    // Disable handling if reconnecting/connecting\r\n    if (\r\n      store.getState().status === 'connecting' ||\r\n      store.getState().status === 'reconnecting'\r\n    )\r\n      return\r\n\r\n    store.setState((x) => {\r\n      const connector = connectors.getState().find((x) => x.uid === data.uid)\r\n      if (!connector) return x\r\n\r\n      if (connector.emitter.listenerCount('connect'))\r\n        connector.emitter.off('connect', change)\r\n      if (!connector.emitter.listenerCount('change'))\r\n        connector.emitter.on('change', change)\r\n      if (!connector.emitter.listenerCount('disconnect'))\r\n        connector.emitter.on('disconnect', disconnect)\r\n\r\n      return {\r\n        ...x,\r\n        connections: new Map(x.connections).set(data.uid, {\r\n          accounts: data.accounts as readonly [Address, ...Address[]],\r\n          chainId: data.chainId,\r\n          connector: connector,\r\n        }),\r\n        current: data.uid,\r\n        status: 'connected',\r\n      }\r\n    })\r\n  }\r\n  function disconnect(data: EventData<ConnectorEventMap, 'disconnect'>) {\r\n    store.setState((x) => {\r\n      const connection = x.connections.get(data.uid)\r\n      if (connection) {\r\n        const connector = connection.connector\r\n        if (connector.emitter.listenerCount('change'))\r\n          connection.connector.emitter.off('change', change)\r\n        if (connector.emitter.listenerCount('disconnect'))\r\n          connection.connector.emitter.off('disconnect', disconnect)\r\n        if (!connector.emitter.listenerCount('connect'))\r\n          connection.connector.emitter.on('connect', connect)\r\n      }\r\n\r\n      x.connections.delete(data.uid)\r\n\r\n      if (x.connections.size === 0)\r\n        return {\r\n          ...x,\r\n          connections: new Map(),\r\n          current: null,\r\n          status: 'disconnected',\r\n        }\r\n\r\n      const nextConnection = x.connections.values().next().value as Connection\r\n      return {\r\n        ...x,\r\n        connections: new Map(x.connections),\r\n        current: nextConnection.connector.uid,\r\n      }\r\n    })\r\n  }\r\n\r\n  return {\r\n    get chains() {\r\n      return chains.getState() as chains\r\n    },\r\n    get connectors() {\r\n      return connectors.getState() as Connector<connectorFns[number]>[]\r\n    },\r\n    storage,\r\n\r\n    getClient,\r\n    get state() {\r\n      return store.getState() as unknown as State<chains>\r\n    },\r\n    setState(value) {\r\n      let newState: State\r\n      if (typeof value === 'function') newState = value(store.getState() as any)\r\n      else newState = value\r\n\r\n      // Reset state if it got set to something not matching the base state\r\n      const initialState = getInitialState()\r\n      if (typeof newState !== 'object') newState = initialState\r\n      const isCorrupt = Object.keys(initialState).some((x) => !(x in newState))\r\n      if (isCorrupt) newState = initialState\r\n\r\n      store.setState(newState, true)\r\n    },\r\n    subscribe(selector, listener, options) {\r\n      return store.subscribe(\r\n        selector as unknown as (state: State) => any,\r\n        listener,\r\n        options\r\n          ? ({\r\n              ...options,\r\n              fireImmediately: options.emitImmediately,\r\n              // Workaround cast since Zustand does not support `'exactOptionalPropertyTypes'`\r\n            } as RemoveUndefined<typeof options>)\r\n          : undefined,\r\n      )\r\n    },\r\n\r\n    _internal: {\r\n      mipd,\r\n      store,\r\n      ssr: Boolean(ssr),\r\n      syncConnectedChain,\r\n      transports: rest.transports as transports,\r\n      chains: {\r\n        setState(value) {\r\n          const nextChains = (\r\n            typeof value === 'function' ? value(chains.getState()) : value\r\n          ) as chains\r\n          if (nextChains.length === 0) return\r\n          return chains.setState(nextChains, true)\r\n        },\r\n        subscribe(listener) {\r\n          return chains.subscribe(listener)\r\n        },\r\n      },\r\n      connectors: {\r\n        providerDetailToConnector,\r\n        setup: setup as <connectorFn extends CreateConnectorFn>(\r\n          connectorFn: connectorFn,\r\n        ) => Connector<connectorFn>,\r\n        setState(value) {\r\n          return connectors.setState(\r\n            typeof value === 'function' ? value(connectors.getState()) : value,\r\n            true,\r\n          )\r\n        },\r\n        subscribe(listener) {\r\n          return connectors.subscribe(listener)\r\n        },\r\n      },\r\n      events: { change, connect, disconnect },\r\n    },\r\n  }\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Types\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport type CreateConfigParameters<\r\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\r\n  transports extends Record<chains[number]['id'], Transport> = Record<\r\n    chains[number]['id'],\r\n    Transport\r\n  >,\r\n  connectorFns extends\r\n    readonly CreateConnectorFn[] = readonly CreateConnectorFn[],\r\n> = Compute<\r\n  {\r\n    chains: chains\r\n    connectors?: connectorFns | undefined\r\n    multiInjectedProviderDiscovery?: boolean | undefined\r\n    storage?: Storage | null | undefined\r\n    ssr?: boolean | undefined\r\n    syncConnectedChain?: boolean | undefined\r\n  } & OneOf<\r\n    | ({ transports: transports } & {\r\n        [key in keyof ClientConfig]?:\r\n          | ClientConfig[key]\r\n          | { [_ in chains[number]['id']]?: ClientConfig[key] | undefined }\r\n          | undefined\r\n      })\r\n    | {\r\n        client(parameters: { chain: chains[number] }): Client<\r\n          transports[chains[number]['id']],\r\n          chains[number]\r\n        >\r\n      }\r\n  >\r\n>\r\n\r\nexport type Config<\r\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\r\n  transports extends Record<chains[number]['id'], Transport> = Record<\r\n    chains[number]['id'],\r\n    Transport\r\n  >,\r\n  connectorFns extends\r\n    readonly CreateConnectorFn[] = readonly CreateConnectorFn[],\r\n> = {\r\n  readonly chains: chains\r\n  readonly connectors: readonly Connector<connectorFns[number]>[]\r\n  readonly storage: Storage | null\r\n\r\n  readonly state: State<chains>\r\n  setState<tchains extends readonly [Chain, ...Chain[]] = chains>(\r\n    value: State<tchains> | ((state: State<tchains>) => State<tchains>),\r\n  ): void\r\n  subscribe<state>(\r\n    selector: (state: State<chains>) => state,\r\n    listener: (state: state, previousState: state) => void,\r\n    options?:\r\n      | {\r\n          emitImmediately?: boolean | undefined\r\n          equalityFn?: ((a: state, b: state) => boolean) | undefined\r\n        }\r\n      | undefined,\r\n  ): () => void\r\n\r\n  getClient<chainId extends chains[number]['id']>(parameters?: {\r\n    chainId?: chainId | chains[number]['id'] | undefined\r\n  }): Client<transports[chainId], Extract<chains[number], { id: chainId }>>\r\n\r\n  /**\r\n   * Not part of versioned API, proceed with caution.\r\n   * @internal\r\n   */\r\n  _internal: Internal<chains, transports>\r\n}\r\n\r\ntype Internal<\r\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\r\n  transports extends Record<chains[number]['id'], Transport> = Record<\r\n    chains[number]['id'],\r\n    Transport\r\n  >,\r\n> = {\r\n  readonly mipd: MipdStore | undefined\r\n  readonly store: Mutate<StoreApi<any>, [['zustand/persist', any]]>\r\n  readonly ssr: boolean\r\n  readonly syncConnectedChain: boolean\r\n  readonly transports: transports\r\n\r\n  chains: {\r\n    setState(\r\n      value:\r\n        | readonly [Chain, ...Chain[]]\r\n        | ((\r\n            state: readonly [Chain, ...Chain[]],\r\n          ) => readonly [Chain, ...Chain[]]),\r\n    ): void\r\n    subscribe(\r\n      listener: (\r\n        state: readonly [Chain, ...Chain[]],\r\n        prevState: readonly [Chain, ...Chain[]],\r\n      ) => void,\r\n    ): () => void\r\n  }\r\n  connectors: {\r\n    providerDetailToConnector(\r\n      providerDetail: EIP6963ProviderDetail,\r\n    ): CreateConnectorFn\r\n    setup<connectorFn extends CreateConnectorFn>(\r\n      connectorFn: connectorFn,\r\n    ): Connector<connectorFn>\r\n    setState(value: Connector[] | ((state: Connector[]) => Connector[])): void\r\n    subscribe(\r\n      listener: (state: Connector[], prevState: Connector[]) => void,\r\n    ): () => void\r\n  }\r\n  events: {\r\n    change(data: EventData<ConnectorEventMap, 'change'>): void\r\n    connect(data: EventData<ConnectorEventMap, 'connect'>): void\r\n    disconnect(data: EventData<ConnectorEventMap, 'disconnect'>): void\r\n  }\r\n}\r\n\r\nexport type State<\r\n  chains extends readonly [Chain, ...Chain[]] = readonly [Chain, ...Chain[]],\r\n> = {\r\n  chainId: chains[number]['id']\r\n  connections: Map<string, Connection>\r\n  current: string | null\r\n  status: 'connected' | 'connecting' | 'disconnected' | 'reconnecting'\r\n}\r\n\r\nexport type PartializedState = Compute<\r\n  ExactPartial<Pick<State, 'chainId' | 'connections' | 'current' | 'status'>>\r\n>\r\n\r\nexport type Connection = {\r\n  accounts: readonly [Address, ...Address[]]\r\n  chainId: number\r\n  connector: Connector\r\n}\r\n\r\nexport type Connector<\r\n  createConnectorFn extends CreateConnectorFn = CreateConnectorFn,\r\n> = ReturnType<createConnectorFn> & {\r\n  emitter: Emitter<ConnectorEventMap>\r\n  uid: string\r\n}\r\n\r\nexport type Transport<\r\n  type extends string = string,\r\n  rpcAttributes = Record<string, any>,\r\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\r\n> = (\r\n  params: Parameters<\r\n    viem_Transport<type, rpcAttributes, eip1193RequestFn>\r\n  >[0] & {\r\n    connectors?: StoreApi<Connector[]> | undefined\r\n  },\r\n) => ReturnType<viem_Transport<type, rpcAttributes, eip1193RequestFn>>\r\n\r\ntype ClientConfig = LooseOmit<\r\n  viem_ClientConfig,\r\n  'account' | 'chain' | 'key' | 'name' | 'transport' | 'type'\r\n>\r\n", "import { reconnect } from './actions/reconnect.js'\r\nimport type { Config, State } from './createConfig.js'\r\n\r\ntype HydrateParameters = {\r\n  initialState?: State | undefined\r\n  reconnectOnMount?: boolean | undefined\r\n}\r\n\r\nexport function hydrate(config: Config, parameters: HydrateParameters) {\r\n  const { initialState, reconnectOnMount } = parameters\r\n\r\n  if (initialState && !config._internal.store.persist.hasHydrated())\r\n    config.setState({\r\n      ...initialState,\r\n      chainId: config.chains.some((x) => x.id === initialState.chainId)\r\n        ? initialState.chainId\r\n        : config.chains[0].id,\r\n      connections: reconnectOnMount ? initialState.connections : new Map(),\r\n      status: reconnectOnMount ? 'reconnecting' : 'disconnected',\r\n    })\r\n\r\n  return {\r\n    async onMount() {\r\n      if (config._internal.ssr) {\r\n        await config._internal.store.persist.rehydrate()\r\n        if (config._internal.mipd) {\r\n          config._internal.connectors.setState((connectors) => {\r\n            const rdnsSet = new Set<string>()\r\n            for (const connector of connectors ?? []) {\r\n              if (connector.rdns) {\r\n                const rdnsValues = Array.isArray(connector.rdns)\r\n                  ? connector.rdns\r\n                  : [connector.rdns]\r\n                for (const rdns of rdnsValues) {\r\n                  rdnsSet.add(rdns)\r\n                }\r\n              }\r\n            }\r\n            const mipdConnectors = []\r\n            const providers = config._internal.mipd?.getProviders() ?? []\r\n            for (const provider of providers) {\r\n              if (rdnsSet.has(provider.info.rdns)) continue\r\n              const connectorFn =\r\n                config._internal.connectors.providerDetailToConnector(provider)\r\n              const connector = config._internal.connectors.setup(connectorFn)\r\n              mipdConnectors.push(connector)\r\n            }\r\n            return [...connectors, ...mipdConnectors]\r\n          })\r\n        }\r\n      }\r\n\r\n      if (reconnectOnMount) reconnect(config)\r\n      else if (config.storage)\r\n        // Reset connections that may have been hydrated from storage.\r\n        config.setState((x) => ({\r\n          ...x,\r\n          connections: new Map(),\r\n        }))\r\n    },\r\n  }\r\n}\r\n", "import {\r\n  ChainDisconnectedError,\r\n  type EIP1193Parameters,\r\n  type EIP1193Provider,\r\n  type EIP1193RequestFn,\r\n  ProviderDisconnectedError,\r\n  type TransportConfig,\r\n  type WalletRpcSchema,\r\n  createTransport,\r\n  hexToNumber,\r\n  withRetry,\r\n  withTimeout,\r\n} from 'viem'\r\n\r\nimport type { Connector, Transport } from '../createConfig.js'\r\n\r\nexport type ConnectorTransportConfig = {\r\n  /** The key of the transport. */\r\n  key?: TransportConfig['key'] | undefined\r\n  /** The name of the transport. */\r\n  name?: TransportConfig['name'] | undefined\r\n  /** The max number of times to retry. */\r\n  retryCount?: TransportConfig['retryCount'] | undefined\r\n  /** The base delay (in ms) between retries. */\r\n  retryDelay?: TransportConfig['retryDelay'] | undefined\r\n}\r\n\r\nexport type ConnectorTransport = Transport\r\n\r\nexport function unstable_connector(\r\n  connector: Pick<Connector, 'type'>,\r\n  config: ConnectorTransportConfig = {},\r\n): Transport<'connector'> {\r\n  const { type } = connector\r\n  const { key = 'connector', name = 'Connector', retryDelay } = config\r\n\r\n  return (parameters) => {\r\n    const { chain, connectors } = parameters\r\n    const retryCount = config.retryCount ?? parameters.retryCount\r\n\r\n    const request: EIP1193RequestFn = async ({ method, params }) => {\r\n      const connector = connectors?.getState().find((c) => c.type === type)\r\n      if (!connector)\r\n        throw new ProviderDisconnectedError(\r\n          new Error(\r\n            `Could not find connector of type \"${type}\" in \\`connectors\\` passed to \\`createConfig\\`.`,\r\n          ),\r\n        )\r\n\r\n      const provider = (await connector.getProvider({\r\n        chainId: chain?.id,\r\n      })) as EIP1193Provider | undefined\r\n      if (!provider)\r\n        throw new ProviderDisconnectedError(\r\n          new Error('Provider is disconnected.'),\r\n        )\r\n\r\n      // We are applying a retry & timeout strategy here as some injected wallets (e.g. MetaMask) fail to\r\n      // immediately resolve a JSON-RPC request on page load.\r\n      const chainId = hexToNumber(\r\n        await withRetry(() =>\r\n          withTimeout(() => provider.request({ method: 'eth_chainId' }), {\r\n            timeout: 100,\r\n          }),\r\n        ),\r\n      )\r\n      if (chain && chainId !== chain.id)\r\n        throw new ChainDisconnectedError(\r\n          new Error(\r\n            `The current chain of the connector (id: ${chainId}) does not match the target chain for the request (id: ${chain.id} – ${chain.name}).`,\r\n          ),\r\n        )\r\n\r\n      const body = { method, params } as EIP1193Parameters<WalletRpcSchema>\r\n      return provider.request(body)\r\n    }\r\n\r\n    return createTransport({\r\n      key,\r\n      name,\r\n      request,\r\n      retryCount,\r\n      retryDelay,\r\n      type: 'connector',\r\n    })\r\n  }\r\n}\r\n", "import { fallback as viem_fallback } from 'viem'\r\n\r\nimport type { Transport } from '../createConfig.js'\r\n\r\nexport function fallback(\r\n  transports: Transport[],\r\n  config?: Parameters<typeof viem_fallback>[1],\r\n) {\r\n  return viem_fallback(transports, config)\r\n}\r\n", "import type { Config, State } from '../createConfig.js'\r\nimport type { BaseStorage } from '../createStorage.js'\r\nimport { deserialize } from './deserialize.js'\r\n\r\nexport const cookieStorage = {\r\n  getItem(key) {\r\n    if (typeof window === 'undefined') return null\r\n    const value = parseCookie(document.cookie, key)\r\n    return value ?? null\r\n  },\r\n  setItem(key, value) {\r\n    if (typeof window === 'undefined') return\r\n    document.cookie = `${key}=${value};path=/;samesite=Lax`\r\n  },\r\n  removeItem(key) {\r\n    if (typeof window === 'undefined') return\r\n    document.cookie = `${key}=;max-age=-1;path=/`\r\n  },\r\n} satisfies BaseStorage\r\n\r\nexport function cookieToInitialState(config: Config, cookie?: string | null) {\r\n  if (!cookie) return undefined\r\n  const key = `${config.storage?.key}.store`\r\n  const parsed = parseCookie(cookie, key)\r\n  if (!parsed) return undefined\r\n  return deserialize<{ state: State }>(parsed).state\r\n}\r\n\r\nexport function parseCookie(cookie: string, key: string) {\r\n  const keyValue = cookie.split('; ').find((x) => x.startsWith(`${key}=`))\r\n  if (!keyValue) return undefined\r\n  return keyValue.substring(key.length + 1)\r\n}\r\n", "import type { Chain, Transport } from 'viem'\r\n\r\ntype ExtractRpcUrlsParameters = {\r\n  transports?: Record<string, Transport> | undefined\r\n  chain: Chain\r\n}\r\n\r\nexport function extractRpcUrls(parameters: ExtractRpcUrlsParameters) {\r\n  const { chain } = parameters\r\n  const fallbackUrl = chain.rpcUrls.default.http[0]\r\n\r\n  if (!parameters.transports) return [fallbackUrl]\r\n\r\n  const transport = parameters.transports?.[chain.id]?.({ chain })\r\n  const transports = (transport?.value?.transports as NonNullable<\r\n    typeof transport\r\n  >[]) || [transport]\r\n  return transports.map(({ value }) => value?.url || fallbackUrl)\r\n}\r\n", "/** @deprecated use `Number` instead */\r\nexport function normalizeChainId(chainId: bigint | number | string | unknown) {\r\n  if (typeof chainId === 'string')\r\n    return Number.parseInt(\r\n      chainId,\r\n      chainId.trim().substring(0, 2) === '0x' ? 16 : 10,\r\n    )\r\n  if (typeof chainId === 'bigint') return Number(chainId)\r\n  if (typeof chainId === 'number') return chainId\r\n  throw new Error(\r\n    `Cannot normalize chainId \"${chainId}\" of type \"${typeof chainId}\"`,\r\n  )\r\n}\r\n", "'use client'\r\n\r\nimport { type ResolvedRegister, type State, hydrate } from '@wagmi/core'\r\nimport { type ReactElement, useEffect, useRef } from 'react'\r\n\r\nexport type HydrateProps = {\r\n  config: ResolvedRegister['config']\r\n  initialState?: State | undefined\r\n  reconnectOnMount?: boolean | undefined\r\n}\r\n\r\nexport function Hydrate(parameters: React.PropsWithChildren<HydrateProps>) {\r\n  const { children, config, initialState, reconnectOnMount = true } = parameters\r\n\r\n  const { onMount } = hydrate(config, {\r\n    initialState,\r\n    reconnectOnMount,\r\n  })\r\n\r\n  // Hydrate for non-SSR\r\n  if (!config._internal.ssr) onMount()\r\n\r\n  // Hydrate for SSR\r\n  const active = useRef(true)\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\r\n  useEffect(() => {\r\n    if (!active.current) return\r\n    if (!config._internal.ssr) return\r\n    onMount()\r\n    return () => {\r\n      active.current = false\r\n    }\r\n  }, [])\r\n\r\n  return children as ReactElement\r\n}\r\n", "export const version = '2.14.16'\r\n", "import { version } from '../version.js'\r\n\r\nexport const getVersion = () => `wagmi@${version}`\r\n", "import { BaseError as CoreError } from '@wagmi/core'\r\n\r\nimport { getVersion } from '../utils/getVersion.js'\r\n\r\nexport type BaseErrorType = BaseError & { name: 'WagmiError' }\r\nexport class BaseError extends CoreError {\r\n  override name = 'WagmiError'\r\n  override get docsBaseUrl() {\r\n    return 'https://wagmi.sh/react'\r\n  }\r\n  override get version() {\r\n    return getVersion()\r\n  }\r\n}\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type WagmiProviderNotFoundErrorType = WagmiProviderNotFoundError & {\r\n  name: 'WagmiProviderNotFoundError'\r\n}\r\nexport class WagmiProviderNotFoundError extends BaseError {\r\n  override name = 'WagmiProviderNotFoundError'\r\n  constructor() {\r\n    super('`useConfig` must be used within `WagmiProvider`.', {\r\n      docsPath: '/api/WagmiProvider',\r\n    })\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport type { Config, ResolvedRegister } from '@wagmi/core'\r\nimport { useContext } from 'react'\r\n\r\nimport { WagmiContext } from '../context.js'\r\nimport { WagmiProviderNotFoundError } from '../errors/context.js'\r\nimport type { ConfigParameter } from '../types/properties.js'\r\n\r\nexport type UseConfigParameters<config extends Config = Config> =\r\n  ConfigParameter<config>\r\n\r\nexport type UseConfigReturnType<config extends Config = Config> = config\r\n\r\n/** https://wagmi.sh/react/api/hooks/useConfig */\r\nexport function useConfig<config extends Config = ResolvedRegister['config']>(\r\n  parameters: UseConfigParameters<config> = {},\r\n): UseConfigReturnType<config> {\r\n  const config = parameters.config ?? useContext(WagmiContext)\r\n  if (!config) throw new WagmiProviderNotFoundError()\r\n  return config as UseConfigReturnType<config>\r\n}\r\n", "import type { Config } from '../createConfig.js'\r\nimport type { GetChainsReturnType } from './getChains.js'\r\n\r\nexport type WatchChainsParameters<config extends Config = Config> = {\r\n  onChange(\r\n    chains: GetChainsReturnType<config>,\r\n    prevChains: GetChainsReturnType<config>,\r\n  ): void\r\n}\r\n\r\nexport type WatchChainsReturnType = () => void\r\n\r\n/**\r\n * @internal\r\n * We don't expose this because as far as consumers know, you can't chainge (lol) `config.chains` at runtime.\r\n * Setting `config.chains` via `config._internal.chains.setState(...)` is an extremely advanced use case that's not worth documenting or supporting in the public API at this time.\r\n */\r\nexport function watchChains<config extends Config>(\r\n  config: config,\r\n  parameters: WatchChainsParameters<config>,\r\n): WatchChainsReturnType {\r\n  const { onChange } = parameters\r\n  return config._internal.chains.subscribe((chains, prevChains) => {\r\n    onChange(\r\n      chains as unknown as GetChainsReturnType<config>,\r\n      prevChains as unknown as GetChainsReturnType<config>,\r\n    )\r\n  })\r\n}\r\n", "'use client'\r\n\r\nimport { deepEqual } from '@wagmi/core/internal'\r\nimport { useMemo, useRef } from 'react'\r\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\r\n\r\nconst isPlainObject = (obj: unknown) =>\r\n  typeof obj === 'object' && !Array.isArray(obj)\r\n\r\nexport function useSyncExternalStoreWithTracked<\r\n  snapshot extends selection,\r\n  selection = snapshot,\r\n>(\r\n  subscribe: (onStoreChange: () => void) => () => void,\r\n  getSnapshot: () => snapshot,\r\n  getServerSnapshot: undefined | null | (() => snapshot) = getSnapshot,\r\n  isEqual: (a: selection, b: selection) => boolean = deepEqual,\r\n) {\r\n  const trackedKeys = useRef<string[]>([])\r\n  const result = useSyncExternalStoreWithSelector(\r\n    subscribe,\r\n    getSnapshot,\r\n    getServerSnapshot,\r\n    (x) => x,\r\n    (a, b) => {\r\n      if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\r\n        for (const key of trackedKeys.current) {\r\n          const equal = isEqual(\r\n            (a as { [_a: string]: any })[key],\r\n            (b as { [_b: string]: any })[key],\r\n          )\r\n          if (!equal) return false\r\n        }\r\n        return true\r\n      }\r\n      return isEqual(a, b)\r\n    },\r\n  )\r\n\r\n  return useMemo(() => {\r\n    if (isPlainObject(result)) {\r\n      const trackedResult = { ...result }\r\n      let properties = {}\r\n      for (const [key, value] of Object.entries(\r\n        trackedResult as { [key: string]: any },\r\n      )) {\r\n        properties = {\r\n          ...properties,\r\n          [key]: {\r\n            configurable: false,\r\n            enumerable: true,\r\n            get: () => {\r\n              if (!trackedKeys.current.includes(key)) {\r\n                trackedKeys.current.push(key)\r\n              }\r\n              return value\r\n            },\r\n          },\r\n        }\r\n      }\r\n      Object.defineProperties(trackedResult, properties)\r\n      return trackedResult\r\n    }\r\n\r\n    return result\r\n  }, [result])\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type GetAccountReturnType,\r\n  type ResolvedRegister,\r\n  getAccount,\r\n  watchAccount,\r\n} from '@wagmi/core'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport { useSyncExternalStoreWithTracked } from './useSyncExternalStoreWithTracked.js'\r\n\r\nexport type UseAccountParameters<config extends Config = Config> =\r\n  ConfigParameter<config>\r\n\r\nexport type UseAccountReturnType<config extends Config = Config> =\r\n  GetAccountReturnType<config>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useAccount */\r\nexport function useAccount<config extends Config = ResolvedRegister['config']>(\r\n  parameters: UseAccountParameters<config> = {},\r\n): UseAccountReturnType<config> {\r\n  const config = useConfig(parameters)\r\n\r\n  return useSyncExternalStoreWithTracked(\r\n    (onChange) => watchAccount(config, { onChange }),\r\n    () => getAccount(config),\r\n  )\r\n}\r\n", "'use client'\r\n\r\nimport { type GetAccountReturnType, watchAccount } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport { useEffect } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseAccountEffectParameters = Compute<\r\n  {\r\n    onConnect?(\r\n      data: Compute<\r\n        Pick<\r\n          Extract<GetAccountReturnType, { status: 'connected' }>,\r\n          'address' | 'addresses' | 'chain' | 'chainId' | 'connector'\r\n        > & {\r\n          isReconnected: boolean\r\n        }\r\n      >,\r\n    ): void\r\n    onDisconnect?(): void\r\n  } & ConfigParameter\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useAccountEffect */\r\nexport function useAccountEffect(parameters: UseAccountEffectParameters = {}) {\r\n  const { onConnect, onDisconnect } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  useEffect(() => {\r\n    return watchAccount(config, {\r\n      onChange(data, prevData) {\r\n        if (\r\n          (prevData.status === 'reconnecting' ||\r\n            (prevData.status === 'connecting' &&\r\n              prevData.address === undefined)) &&\r\n          data.status === 'connected'\r\n        ) {\r\n          const { address, addresses, chain, chainId, connector } = data\r\n          const isReconnected =\r\n            prevData.status === 'reconnecting' ||\r\n            // if `previousAccount.status` is `undefined`, the connector connected immediately.\r\n            prevData.status === undefined\r\n          onConnect?.({\r\n            address,\r\n            addresses,\r\n            chain,\r\n            chainId,\r\n            connector,\r\n            isReconnected,\r\n          })\r\n        } else if (\r\n          prevData.status === 'connected' &&\r\n          data.status === 'disconnected'\r\n        )\r\n          onDisconnect?.()\r\n      },\r\n    })\r\n  }, [config, onConnect, onDisconnect])\r\n}\r\n", "import { type QueryKey, replaceEqualDeep } from '@tanstack/query-core'\r\n\r\nexport function structuralSharing<data>(\r\n  oldData: data | undefined,\r\n  newData: data,\r\n): data {\r\n  return replaceEqualDeep(oldData, newData)\r\n}\r\n\r\nexport function hashFn(queryKey: QueryKey): string {\r\n  return JSON.stringify(queryKey, (_, value) => {\r\n    if (isPlainObject(value))\r\n      return Object.keys(value)\r\n        .sort()\r\n        .reduce((result, key) => {\r\n          result[key] = value[key]\r\n          return result\r\n        }, {} as any)\r\n    if (typeof value === 'bigint') return value.toString()\r\n    return value\r\n  })\r\n}\r\n\r\n// biome-ignore lint/complexity/noBannedTypes:\r\nfunction isPlainObject(value: any): value is Object {\r\n  if (!hasObjectPrototype(value)) {\r\n    return false\r\n  }\r\n\r\n  // If has modified constructor\r\n  const ctor = value.constructor\r\n  if (typeof ctor === 'undefined') return true\r\n\r\n  // If has modified prototype\r\n  const prot = ctor.prototype\r\n  if (!hasObjectPrototype(prot)) return false\r\n\r\n  // If constructor does not have an Object-specific method\r\n  // biome-ignore lint/suspicious/noPrototypeBuiltins: <explanation>\r\n  if (!prot.hasOwnProperty('isPrototypeOf')) return false\r\n\r\n  // Most likely a plain Object\r\n  return true\r\n}\r\n\r\nfunction hasObjectPrototype(o: any): boolean {\r\n  return Object.prototype.toString.call(o) === '[object Object]'\r\n}\r\n\r\nexport function filterQueryOptions<type extends Record<string, unknown>>(\r\n  options: type,\r\n): type {\r\n  // destructuring is super fast\r\n  // biome-ignore format: no formatting\r\n  const {\r\n    // import('@tanstack/query-core').QueryOptions\r\n    _defaulted, behavior, gcTime, initialData, initialDataUpdatedAt, maxPages, meta, networkMode, queryFn, queryHash, queryKey, queryKeyHashFn, retry, retryDelay, structuralSharing,\r\n\r\n    // import('@tanstack/query-core').InfiniteQueryObserverOptions\r\n    getPreviousPageParam, getNextPageParam, initialPageParam,\r\n\r\n    // import('@tanstack/react-query').UseQueryOptions\r\n    _optimisticResults, enabled, notifyOnChangeProps, placeholderData, refetchInterval, refetchIntervalInBackground, refetchOnMount, refetchOnReconnect, refetchOnWindowFocus, retryOnMount, select, staleTime, suspense, throwOnError,\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // wagmi\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    config, connector, query,\r\n    ...rest\r\n  } = options\r\n\r\n  return rest as type\r\n}\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type CallErrorType,\r\n  type CallParameters,\r\n  type CallReturnType,\r\n  call,\r\n} from '../actions/call.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type CallOptions<config extends Config> = Compute<\r\n  ExactPartial<CallParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function callQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: CallOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      const data = await call(config, {\r\n        ...parameters,\r\n      } as CallParameters)\r\n      return data ?? null\r\n    },\r\n    queryKey: callQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    CallQueryFnData,\r\n    CallErrorType,\r\n    CallData,\r\n    CallQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type CallQueryFnData = CallReturnType\r\n\r\nexport type CallData = CallQueryFnData\r\n\r\nexport function callQueryKey<config extends Config>(\r\n  options: CallOptions<config>,\r\n) {\r\n  return ['call', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type CallQueryKey<config extends Config> = ReturnType<\r\n  typeof callQueryKey<config>\r\n>\r\n", "import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type ConnectErrorType,\r\n  type ConnectParameters,\r\n  type ConnectReturnType,\r\n  connect,\r\n} from '../actions/connect.js'\r\nimport type { Config, Connector } from '../createConfig.js'\r\n\r\nimport type { CreateConnectorFn } from '../connectors/createConnector.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport function connectMutationOptions<config extends Config>(config: config) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return connect(config, variables)\r\n    },\r\n    mutationKey: ['connect'],\r\n  } as const satisfies MutationOptions<\r\n    ConnectData<config>,\r\n    ConnectErrorType,\r\n    ConnectVariables<config, Connector | CreateConnectorFn>\r\n  >\r\n}\r\n\r\nexport type ConnectData<config extends Config> = ConnectReturnType<config>\r\n\r\nexport type ConnectVariables<\r\n  config extends Config,\r\n  connector extends Connector | CreateConnectorFn,\r\n> = ConnectParameters<config, connector>\r\n\r\nexport type ConnectMutate<config extends Config, context = unknown> = <\r\n  connector extends\r\n    | config['connectors'][number]\r\n    | Connector\r\n    | CreateConnectorFn,\r\n>(\r\n  variables: ConnectVariables<config, connector>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          ConnectData<config>,\r\n          ConnectErrorType,\r\n          Compute<ConnectVariables<config, connector>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => void\r\n\r\nexport type ConnectMutateAsync<config extends Config, context = unknown> = <\r\n  connector extends\r\n    | config['connectors'][number]\r\n    | Connector\r\n    | CreateConnectorFn,\r\n>(\r\n  variables: ConnectVariables<config, connector>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          ConnectData<config>,\r\n          ConnectErrorType,\r\n          Compute<ConnectVariables<config, connector>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => Promise<ConnectData<config>>\r\n", "import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\r\nimport type { Abi, ContractConstructorArgs } from 'viem'\r\n\r\nimport {\r\n  type DeployContractErrorType,\r\n  type DeployContractParameters,\r\n  type DeployContractReturnType,\r\n  deployContract,\r\n} from '../actions/deployContract.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport function deployContractMutationOptions<config extends Config>(\r\n  config: config,\r\n) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return deployContract(config, variables)\r\n    },\r\n    mutationKey: ['deployContract'],\r\n  } as const satisfies MutationOptions<\r\n    DeployContractData,\r\n    DeployContractErrorType,\r\n    DeployContractVariables<Abi, config, config['chains'][number]['id']>\r\n  >\r\n}\r\n\r\nexport type DeployContractData = Compute<DeployContractReturnType>\r\n\r\nexport type DeployContractVariables<\r\n  abi extends Abi | readonly unknown[],\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n  ///\r\n  allArgs = ContractConstructorArgs<abi>,\r\n> = DeployContractParameters<abi, config, chainId, allArgs>\r\n\r\nexport type DeployContractMutate<config extends Config, context = unknown> = <\r\n  abi extends Abi | readonly unknown[],\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  variables: DeployContractVariables<abi, config, chainId>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          DeployContractData,\r\n          DeployContractErrorType,\r\n          Compute<DeployContractVariables<abi, config, chainId>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => void\r\n\r\nexport type DeployContractMutateAsync<\r\n  config extends Config,\r\n  context = unknown,\r\n> = <\r\n  abi extends Abi | readonly unknown[],\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  variables: DeployContractVariables<abi, config, chainId>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          DeployContractData,\r\n          DeployContractErrorType,\r\n          Compute<DeployContractVariables<abi, config, chainId>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => Promise<DeployContractData>\r\n", "import type { MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type DisconnectErrorType,\r\n  type DisconnectParameters,\r\n  type DisconnectReturnType,\r\n  disconnect,\r\n} from '../actions/disconnect.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Mutate, MutateAsync } from './types.js'\r\n\r\nexport function disconnectMutationOptions<config extends Config>(\r\n  config: config,\r\n) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return disconnect(config, variables)\r\n    },\r\n    mutationKey: ['disconnect'],\r\n  } as const satisfies MutationOptions<\r\n    DisconnectData,\r\n    DisconnectErrorType,\r\n    DisconnectVariables\r\n  >\r\n}\r\n\r\nexport type DisconnectData = DisconnectReturnType\r\n\r\nexport type DisconnectVariables = DisconnectParameters | undefined\r\n\r\nexport type DisconnectMutate<context = unknown> = Mutate<\r\n  DisconnectData,\r\n  DisconnectErrorType,\r\n  DisconnectVariables,\r\n  context\r\n>\r\n\r\nexport type DisconnectMutateAsync<context = unknown> = MutateAsync<\r\n  DisconnectData,\r\n  DisconnectErrorType,\r\n  DisconnectVariables,\r\n  context\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\nimport type { FeeValuesType } from 'viem'\r\n\r\nimport {\r\n  type EstimateFeesPerGasErrorType,\r\n  type EstimateFeesPerGasParameters,\r\n  type EstimateFeesPerGasReturnType,\r\n  estimateFeesPerGas,\r\n} from '../actions/estimateFeesPerGas.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type EstimateFeesPerGasOptions<\r\n  type extends FeeValuesType,\r\n  config extends Config,\r\n> = Compute<\r\n  ExactPartial<EstimateFeesPerGasParameters<type, config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function estimateFeesPerGasQueryOptions<\r\n  config extends Config,\r\n  type extends FeeValuesType = 'eip1559',\r\n>(config: config, options: EstimateFeesPerGasOptions<type, config> = {}) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      return estimateFeesPerGas(config, parameters)\r\n    },\r\n    queryKey: estimateFeesPerGasQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    EstimateFeesPerGasQueryFnData<type>,\r\n    EstimateFeesPerGasErrorType,\r\n    EstimateFeesPerGasData<type>,\r\n    EstimateFeesPerGasQueryKey<config, type>\r\n  >\r\n}\r\n\r\nexport type EstimateFeesPerGasQueryFnData<type extends FeeValuesType> =\r\n  EstimateFeesPerGasReturnType<type>\r\n\r\nexport type EstimateFeesPerGasData<type extends FeeValuesType> =\r\n  EstimateFeesPerGasQueryFnData<type>\r\n\r\nexport function estimateFeesPerGasQueryKey<\r\n  config extends Config,\r\n  type extends FeeValuesType = 'eip1559',\r\n>(options: EstimateFeesPerGasOptions<type, config> = {}) {\r\n  return ['estimateFeesPerGas', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type EstimateFeesPerGasQueryKey<\r\n  config extends Config,\r\n  type extends FeeValuesType,\r\n> = ReturnType<typeof estimateFeesPerGasQueryKey<config, type>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type EstimateGasErrorType,\r\n  type EstimateGasParameters,\r\n  type EstimateGasReturnType,\r\n  estimateGas,\r\n} from '../actions/estimateGas.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { UnionExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type EstimateGasOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n> = UnionExactPartial<EstimateGasParameters<config, chainId>> &\r\n  ScopeKeyParameter\r\n\r\nexport function estimateGasQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: EstimateGasOptions<config, chainId> = {} as any) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { connector } = options\r\n      const { account, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!account && !connector)\r\n        throw new Error('account or connector is required')\r\n      return estimateGas(config, { account, connector, ...(parameters as any) })\r\n    },\r\n    queryKey: estimateGasQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    EstimateGasQueryFnData,\r\n    EstimateGasErrorType,\r\n    EstimateGasData,\r\n    EstimateGasQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type EstimateGasQueryFnData = EstimateGasReturnType\r\n\r\nexport type EstimateGasData = EstimateGasQueryFnData\r\n\r\nexport function estimateGasQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n>(options: EstimateGasOptions<config, chainId> = {} as any) {\r\n  const { connector: _, ...rest } = options\r\n  return ['estimateGas', filterQueryOptions(rest)] as const\r\n}\r\n\r\nexport type EstimateGasQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n> = ReturnType<typeof estimateGasQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type EstimateMaxPriorityFeePerGasErrorType,\r\n  type EstimateMaxPriorityFeePerGasParameters,\r\n  type EstimateMaxPriorityFeePerGasReturnType,\r\n  estimateMaxPriorityFeePerGas,\r\n} from '../actions/estimateMaxPriorityFeePerGas.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type EstimateMaxPriorityFeePerGasOptions<config extends Config> =\r\n  Compute<\r\n    ExactPartial<EstimateMaxPriorityFeePerGasParameters<config>> &\r\n      ScopeKeyParameter\r\n  >\r\n\r\nexport function estimateMaxPriorityFeePerGasQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: EstimateMaxPriorityFeePerGasOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      return estimateMaxPriorityFeePerGas(config, parameters)\r\n    },\r\n    queryKey: estimateMaxPriorityFeePerGasQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    EstimateMaxPriorityFeePerGasQueryFnData,\r\n    EstimateMaxPriorityFeePerGasErrorType,\r\n    EstimateMaxPriorityFeePerGasData,\r\n    EstimateMaxPriorityFeePerGasQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type EstimateMaxPriorityFeePerGasQueryFnData =\r\n  EstimateMaxPriorityFeePerGasReturnType\r\n\r\nexport type EstimateMaxPriorityFeePerGasData =\r\n  EstimateMaxPriorityFeePerGasQueryFnData\r\n\r\nexport function estimateMaxPriorityFeePerGasQueryKey<config extends Config>(\r\n  options: EstimateMaxPriorityFeePerGasOptions<config> = {},\r\n) {\r\n  return ['estimateMaxPriorityFeePerGas', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type EstimateMaxPriorityFeePerGasQueryKey<config extends Config> =\r\n  ReturnType<typeof estimateMaxPriorityFeePerGasQueryKey<config>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetBalanceErrorType,\r\n  type GetBalanceParameters,\r\n  type GetBalanceReturnType,\r\n  getBalance,\r\n} from '../actions/getBalance.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, PartialBy } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetBalanceOptions<config extends Config> = Compute<\r\n  PartialBy<GetBalanceParameters<config>, 'address'> & ScopeKeyParameter\r\n>\r\n\r\nexport function getBalanceQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetBalanceOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!address) throw new Error('address is required')\r\n      const balance = await getBalance(config, {\r\n        ...(parameters as GetBalanceParameters),\r\n        address,\r\n      })\r\n      return balance ?? null\r\n    },\r\n    queryKey: getBalanceQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetBalanceQueryFnData,\r\n    GetBalanceErrorType,\r\n    GetBalanceData,\r\n    GetBalanceQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetBalanceQueryFnData = Compute<GetBalanceReturnType>\r\n\r\nexport type GetBalanceData = GetBalanceQueryFnData\r\n\r\nexport function getBalanceQueryKey<config extends Config>(\r\n  options: GetBalanceOptions<config> = {},\r\n) {\r\n  return ['balance', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetBalanceQueryKey<config extends Config> = ReturnType<\r\n  typeof getBalanceQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\nimport type { BlockTag } from 'viem'\r\n\r\nimport {\r\n  type GetBlockErrorType,\r\n  type GetBlockParameters,\r\n  type GetBlockReturnType,\r\n  getBlock,\r\n} from '../actions/getBlock.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetBlockOptions<\r\n  includeTransactions extends boolean,\r\n  blockTag extends BlockTag,\r\n  config extends Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<\r\n    GetBlockParameters<includeTransactions, blockTag, config, chainId>\r\n  > &\r\n    ScopeKeyParameter\r\n>\r\n\r\nexport function getBlockQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n  includeTransactions extends boolean,\r\n  blockTag extends BlockTag,\r\n>(\r\n  config: config,\r\n  options: GetBlockOptions<includeTransactions, blockTag, config, chainId> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      const block = await getBlock(config, parameters)\r\n      return (block ?? null) as any\r\n    },\r\n    queryKey: getBlockQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetBlockQueryFnData<includeTransactions, blockTag, config, chainId>,\r\n    GetBlockErrorType,\r\n    GetBlockData<includeTransactions, blockTag, config, chainId>,\r\n    GetBlockQueryKey<includeTransactions, blockTag, config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetBlockQueryFnData<\r\n  includeTransactions extends boolean,\r\n  blockTag extends BlockTag,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetBlockReturnType<includeTransactions, blockTag, config, chainId>\r\n\r\nexport type GetBlockData<\r\n  includeTransactions extends boolean,\r\n  blockTag extends BlockTag,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetBlockQueryFnData<includeTransactions, blockTag, config, chainId>\r\n\r\nexport function getBlockQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n>(\r\n  options: GetBlockOptions<includeTransactions, blockTag, config, chainId> = {},\r\n) {\r\n  return ['block', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetBlockQueryKey<\r\n  includeTransactions extends boolean,\r\n  blockTag extends BlockTag,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<\r\n  typeof getBlockQueryKey<config, chainId, includeTransactions, blockTag>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetBlockNumberErrorType,\r\n  type GetBlockNumberParameters,\r\n  type GetBlockNumberReturnType,\r\n  getBlockNumber,\r\n} from '../actions/getBlockNumber.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetBlockNumberOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<GetBlockNumberParameters<config, chainId>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getBlockNumberQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: GetBlockNumberOptions<config, chainId> = {}) {\r\n  return {\r\n    gcTime: 0,\r\n    async queryFn({ queryKey }) {\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      const blockNumber = await getBlockNumber(config, parameters)\r\n      return blockNumber ?? null\r\n    },\r\n    queryKey: getBlockNumberQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetBlockNumberQueryFnData,\r\n    GetBlockNumberErrorType,\r\n    GetBlockNumberData,\r\n    GetBlockNumberQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetBlockNumberQueryFnData = GetBlockNumberReturnType\r\n\r\nexport type GetBlockNumberData = GetBlockNumberQueryFnData\r\n\r\nexport function getBlockNumberQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetBlockNumberOptions<config, chainId> = {}) {\r\n  return ['blockNumber', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetBlockNumberQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getBlockNumberQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetBlockTransactionCountErrorType,\r\n  type GetBlockTransactionCountParameters,\r\n  type GetBlockTransactionCountReturnType,\r\n  getBlockTransactionCount,\r\n} from '../actions/getBlockTransactionCount.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { ExactPartial, UnionCompute } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetBlockTransactionCountOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = UnionCompute<\r\n  ExactPartial<GetBlockTransactionCountParameters<config, chainId>> &\r\n    ScopeKeyParameter\r\n>\r\n\r\nexport function getBlockTransactionCountQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  options: GetBlockTransactionCountOptions<config, chainId> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      const blockTransactionCount = await getBlockTransactionCount(\r\n        config,\r\n        parameters,\r\n      )\r\n      return blockTransactionCount ?? null\r\n    },\r\n    queryKey: getBlockTransactionCountQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetBlockTransactionCountQueryFnData,\r\n    GetBlockTransactionCountErrorType,\r\n    GetBlockTransactionCountData,\r\n    GetBlockTransactionCountQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetBlockTransactionCountQueryFnData =\r\n  GetBlockTransactionCountReturnType\r\n\r\nexport type GetBlockTransactionCountData = GetBlockTransactionCountQueryFnData\r\n\r\nexport function getBlockTransactionCountQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetBlockTransactionCountOptions<config, chainId> = {}) {\r\n  return ['blockTransactionCount', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetBlockTransactionCountQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getBlockTransactionCountQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetBytecodeErrorType,\r\n  type GetBytecodeParameters,\r\n  type GetBytecodeReturnType,\r\n  getBytecode,\r\n} from '../actions/getBytecode.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetBytecodeOptions<config extends Config> = Compute<\r\n  ExactPartial<GetBytecodeParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getBytecodeQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetBytecodeOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!address) throw new Error('address is required')\r\n      const bytecode = await getBytecode(config, { ...parameters, address })\r\n      return (bytecode ?? null) as any\r\n    },\r\n    queryKey: getBytecodeQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetBytecodeQueryFnData,\r\n    GetBytecodeErrorType,\r\n    GetBytecodeData,\r\n    GetBytecodeQueryKey<config>\r\n  >\r\n}\r\nexport type GetBytecodeQueryFnData = GetBytecodeReturnType\r\n\r\nexport type GetBytecodeData = GetBytecodeQueryFnData\r\n\r\nexport function getBytecodeQueryKey<config extends Config>(\r\n  options: GetBytecodeOptions<config>,\r\n) {\r\n  return ['getBytecode', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetBytecodeQueryKey<config extends Config> = ReturnType<\r\n  typeof getBytecodeQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetConnectorClientErrorType,\r\n  type GetConnectorClientParameters,\r\n  type GetConnectorClientReturnType,\r\n  getConnectorClient,\r\n} from '../actions/getConnectorClient.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetConnectorClientOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<GetConnectorClientParameters<config, chainId>> &\r\n    ScopeKeyParameter\r\n>\r\n\r\nexport function getConnectorClientQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: GetConnectorClientOptions<config, chainId> = {}) {\r\n  return {\r\n    gcTime: 0,\r\n    async queryFn({ queryKey }) {\r\n      const { connector } = options\r\n      const { connectorUid: _, scopeKey: _s, ...parameters } = queryKey[1]\r\n      return getConnectorClient(config, {\r\n        ...parameters,\r\n        connector,\r\n      }) as unknown as Promise<GetConnectorClientReturnType<config, chainId>>\r\n    },\r\n    queryKey: getConnectorClientQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetConnectorClientQueryFnData<config, chainId>,\r\n    GetConnectorClientErrorType,\r\n    GetConnectorClientData<config, chainId>,\r\n    GetConnectorClientQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetConnectorClientQueryFnData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetConnectorClientReturnType<config, chainId>\r\n\r\nexport type GetConnectorClientData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetConnectorClientQueryFnData<config, chainId>\r\n\r\nexport function getConnectorClientQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetConnectorClientOptions<config, chainId> = {}) {\r\n  const { connector, ...parameters } = options\r\n  return [\r\n    'connectorClient',\r\n    { ...filterQueryOptions(parameters), connectorUid: connector?.uid },\r\n  ] as const\r\n}\r\n\r\nexport type GetConnectorClientQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getConnectorClientQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetEnsAddressErrorType,\r\n  type GetEnsAddressParameters,\r\n  type GetEnsAddressReturnType,\r\n  getEnsAddress,\r\n} from '../actions/getEnsAddress.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetEnsAddressOptions<config extends Config> = Compute<\r\n  ExactPartial<GetEnsAddressParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getEnsAddressQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetEnsAddressOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { name, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!name) throw new Error('name is required')\r\n      return getEnsAddress(config, { ...parameters, name })\r\n    },\r\n    queryKey: getEnsAddressQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetEnsAddressQueryFnData,\r\n    GetEnsAddressErrorType,\r\n    GetEnsAddressData,\r\n    GetEnsAddressQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetEnsAddressQueryFnData = GetEnsAddressReturnType\r\n\r\nexport type GetEnsAddressData = GetEnsAddressQueryFnData\r\n\r\nexport function getEnsAddressQueryKey<config extends Config>(\r\n  options: GetEnsAddressOptions<config> = {},\r\n) {\r\n  return ['ensAddress', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetEnsAddressQueryKey<config extends Config> = ReturnType<\r\n  typeof getEnsAddressQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetEnsAvatarErrorType,\r\n  type GetEnsAvatarParameters,\r\n  type GetEnsAvatarReturnType,\r\n  getEnsAvatar,\r\n} from '../actions/getEnsAvatar.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetEnsAvatarOptions<config extends Config> = Compute<\r\n  ExactPartial<GetEnsAvatarParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getEnsAvatarQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetEnsAvatarOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { name, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!name) throw new Error('name is required')\r\n      return getEnsAvatar(config, { ...parameters, name })\r\n    },\r\n    queryKey: getEnsAvatarQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetEnsAvatarQueryFnData,\r\n    GetEnsAvatarErrorType,\r\n    GetEnsAvatarData,\r\n    GetEnsAvatarQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetEnsAvatarQueryFnData = GetEnsAvatarReturnType\r\n\r\nexport type GetEnsAvatarData = GetEnsAvatarQueryFnData\r\n\r\nexport function getEnsAvatarQueryKey<config extends Config>(\r\n  options: GetEnsAvatarOptions<config> = {},\r\n) {\r\n  return ['ensAvatar', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetEnsAvatarQueryKey<config extends Config> = ReturnType<\r\n  typeof getEnsAvatarQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetEnsNameErrorType,\r\n  type GetEnsNameParameters,\r\n  type GetEnsNameReturnType,\r\n  getEnsName,\r\n} from '../actions/getEnsName.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetEnsNameOptions<config extends Config> = Compute<\r\n  ExactPartial<GetEnsNameParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getEnsNameQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetEnsNameOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!address) throw new Error('address is required')\r\n      return getEnsName(config, { ...parameters, address })\r\n    },\r\n    queryKey: getEnsNameQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetEnsNameQueryFnData,\r\n    GetEnsNameErrorType,\r\n    GetEnsNameData,\r\n    GetEnsNameQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetEnsNameQueryFnData = GetEnsNameReturnType\r\n\r\nexport type GetEnsNameData = GetEnsNameQueryFnData\r\n\r\nexport function getEnsNameQueryKey<config extends Config>(\r\n  options: GetEnsNameOptions<config> = {},\r\n) {\r\n  return ['ensName', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetEnsNameQueryKey<config extends Config> = ReturnType<\r\n  typeof getEnsNameQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetEnsResolverErrorType,\r\n  type GetEnsResolverParameters,\r\n  type GetEnsResolverReturnType,\r\n  getEnsResolver,\r\n} from '../actions/getEnsResolver.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetEnsResolverOptions<config extends Config> = Compute<\r\n  ExactPartial<GetEnsResolverParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getEnsResolverQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetEnsResolverOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { name, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!name) throw new Error('name is required')\r\n      return getEnsResolver(config, { ...parameters, name })\r\n    },\r\n    queryKey: getEnsResolverQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetEnsResolverQueryFnData,\r\n    GetEnsResolverErrorType,\r\n    GetEnsResolverData,\r\n    GetEnsResolverQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetEnsResolverQueryFnData = GetEnsResolverReturnType\r\n\r\nexport type GetEnsResolverData = GetEnsResolverQueryFnData\r\n\r\nexport function getEnsResolverQueryKey<config extends Config>(\r\n  options: GetEnsResolverOptions<config> = {},\r\n) {\r\n  return ['ensResolver', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetEnsResolverQueryKey<config extends Config> = ReturnType<\r\n  typeof getEnsResolverQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetEnsTextErrorType,\r\n  type GetEnsTextParameters,\r\n  type GetEnsTextReturnType,\r\n  getEnsText,\r\n} from '../actions/getEnsText.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetEnsTextOptions<config extends Config> = Compute<\r\n  ExactPartial<GetEnsTextParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getEnsTextQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetEnsTextOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { key, name, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!key || !name) throw new Error('key and name are required')\r\n      return getEnsText(config, { ...parameters, key, name })\r\n    },\r\n    queryKey: getEnsTextQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetEnsTextQueryFnData,\r\n    GetEnsTextErrorType,\r\n    GetEnsTextData,\r\n    GetEnsTextQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetEnsTextQueryFnData = GetEnsTextReturnType\r\n\r\nexport type GetEnsTextData = GetEnsTextQueryFnData\r\n\r\nexport function getEnsTextQueryKey<config extends Config>(\r\n  options: GetEnsTextOptions<config> = {},\r\n) {\r\n  return ['ensText', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetEnsTextQueryKey<config extends Config> = ReturnType<\r\n  typeof getEnsTextQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetFeeHistoryErrorType,\r\n  type GetFeeHistoryParameters,\r\n  type GetFeeHistoryReturnType,\r\n  getFeeHistory,\r\n} from '../actions/getFeeHistory.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, PartialBy } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetFeeHistoryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  PartialBy<\r\n    GetFeeHistoryParameters<config, chainId>,\r\n    'blockCount' | 'rewardPercentiles'\r\n  > &\r\n    ScopeKeyParameter\r\n>\r\n\r\nexport function getFeeHistoryQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: GetFeeHistoryOptions<config, chainId> = {}) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const {\r\n        blockCount,\r\n        rewardPercentiles,\r\n        scopeKey: _,\r\n        ...parameters\r\n      } = queryKey[1]\r\n      if (!blockCount) throw new Error('blockCount is required')\r\n      if (!rewardPercentiles) throw new Error('rewardPercentiles is required')\r\n      const feeHistory = await getFeeHistory(config, {\r\n        ...(parameters as GetFeeHistoryParameters),\r\n        blockCount,\r\n        rewardPercentiles,\r\n      })\r\n      return feeHistory ?? null\r\n    },\r\n    queryKey: getFeeHistoryQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetFeeHistoryQueryFnData,\r\n    GetFeeHistoryErrorType,\r\n    GetFeeHistoryData,\r\n    GetFeeHistoryQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetFeeHistoryQueryFnData = GetFeeHistoryReturnType\r\n\r\nexport type GetFeeHistoryData = GetFeeHistoryQueryFnData\r\n\r\nexport function getFeeHistoryQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetFeeHistoryOptions<config, chainId> = {}) {\r\n  return ['feeHistory', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetFeeHistoryQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getFeeHistoryQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetGasPriceErrorType,\r\n  type GetGasPriceParameters,\r\n  type GetGasPriceReturnType,\r\n  getGasPrice,\r\n} from '../actions/getGasPrice.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetGasPriceOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<GetGasPriceParameters<config, chainId>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getGasPriceQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: GetGasPriceOptions<config, chainId> = {}) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      const gasPrice = await getGasPrice(config, parameters)\r\n      return gasPrice ?? null\r\n    },\r\n    queryKey: getGasPriceQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetGasPriceQueryFnData,\r\n    GetGasPriceErrorType,\r\n    GetGasPriceData,\r\n    GetGasPriceQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetGasPriceQueryFnData = GetGasPriceReturnType\r\n\r\nexport type GetGasPriceData = GetGasPriceQueryFnData\r\n\r\nexport function getGasPriceQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetGasPriceOptions<config, chainId> = {}) {\r\n  return ['gasPrice', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetGasPriceQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getGasPriceQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetProofErrorType,\r\n  type GetProofParameters,\r\n  type GetProofReturnType,\r\n  getProof,\r\n} from '../actions/getProof.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetProofOptions<config extends Config> = Compute<\r\n  ExactPartial<GetProofParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getProofQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetProofOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { address, scopeKey: _, storageKeys, ...parameters } = queryKey[1]\r\n      if (!address || !storageKeys)\r\n        throw new Error('address and storageKeys are required')\r\n      return getProof(config, { ...parameters, address, storageKeys })\r\n    },\r\n    queryKey: getProofQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetProofQueryFnData,\r\n    GetProofErrorType,\r\n    GetProofData,\r\n    GetProofQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetProofQueryFnData = GetProofReturnType\r\n\r\nexport type GetProofData = GetProofQueryFnData\r\n\r\nexport function getProofQueryKey<config extends Config>(\r\n  options: GetProofOptions<config>,\r\n) {\r\n  return ['getProof', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetProofQueryKey<config extends Config> = ReturnType<\r\n  typeof getProofQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetStorageAtErrorType,\r\n  type GetStorageAtParameters,\r\n  type GetStorageAtReturnType,\r\n  getStorageAt,\r\n} from '../actions/getStorageAt.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetStorageAtOptions<config extends Config> = Compute<\r\n  ExactPartial<GetStorageAtParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getStorageAtQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetStorageAtOptions<config> = {},\r\n) {\r\n  return {\r\n    queryFn({ queryKey }) {\r\n      const { address, slot, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!address || !slot) throw new Error('address and slot are required')\r\n      return getStorageAt(config, { ...parameters, address, slot })\r\n    },\r\n    queryKey: getStorageAtQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetStorageAtQueryFnData,\r\n    GetStorageAtErrorType,\r\n    GetStorageAtData,\r\n    GetStorageAtQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetStorageAtQueryFnData = GetStorageAtReturnType\r\n\r\nexport type GetStorageAtData = GetStorageAtQueryFnData\r\n\r\nexport function getStorageAtQueryKey<config extends Config>(\r\n  options: GetStorageAtOptions<config>,\r\n) {\r\n  return ['getStorageAt', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetStorageAtQueryKey<config extends Config> = ReturnType<\r\n  typeof getStorageAtQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetTokenErrorType,\r\n  type GetTokenParameters,\r\n  type GetTokenReturnType,\r\n  getToken,\r\n} from '../actions/getToken.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetTokenOptions<config extends Config> = Compute<\r\n  ExactPartial<GetTokenParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getTokenQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetTokenOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!address) throw new Error('address is required')\r\n      return getToken(config, { ...parameters, address })\r\n    },\r\n    queryKey: getTokenQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetTokenQueryFnData,\r\n    GetTokenErrorType,\r\n    GetTokenData,\r\n    GetTokenQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetTokenQueryFnData = GetTokenReturnType\r\n\r\nexport type GetTokenData = GetTokenQueryFnData\r\n\r\nexport function getTokenQueryKey<config extends Config>(\r\n  options: GetTokenOptions<config> = {},\r\n) {\r\n  return ['token', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetTokenQueryKey<config extends Config> = ReturnType<\r\n  typeof getTokenQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetTransactionErrorType,\r\n  type GetTransactionParameters,\r\n  type GetTransactionReturnType,\r\n  getTransaction,\r\n} from '../actions/getTransaction.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetTransactionOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<GetTransactionParameters<config, chainId>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getTransactionQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: GetTransactionOptions<config, chainId> = {}) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { blockHash, blockNumber, blockTag, hash, index } = queryKey[1]\r\n      if (!blockHash && !blockNumber && !blockTag && !hash)\r\n        throw new Error('blockHash, blockNumber, blockTag, or hash is required')\r\n      if (!hash && !index)\r\n        throw new Error(\r\n          'index is required for blockHash, blockNumber, or blockTag',\r\n        )\r\n      const { scopeKey: _, ...rest } = queryKey[1]\r\n      return getTransaction(\r\n        config,\r\n        rest as GetTransactionParameters,\r\n      ) as unknown as Promise<GetTransactionQueryFnData<config, chainId>>\r\n    },\r\n    queryKey: getTransactionQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetTransactionQueryFnData<config, chainId>,\r\n    GetTransactionErrorType,\r\n    GetTransactionData<config, chainId>,\r\n    GetTransactionQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetTransactionQueryFnData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetTransactionReturnType<config, chainId>\r\n\r\nexport type GetTransactionData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetTransactionQueryFnData<config, chainId>\r\n\r\nexport function getTransactionQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetTransactionOptions<config, chainId> = {}) {\r\n  return ['transaction', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetTransactionQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getTransactionQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetTransactionConfirmationsErrorType,\r\n  type GetTransactionConfirmationsParameters,\r\n  type GetTransactionConfirmationsReturnType,\r\n  getTransactionConfirmations,\r\n} from '../actions/getTransactionConfirmations.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { UnionExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetTransactionConfirmationsOptions<\r\n  config extends Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n> = UnionExactPartial<GetTransactionConfirmationsParameters<config, chainId>> &\r\n  ScopeKeyParameter\r\n\r\nexport function getTransactionConfirmationsQueryOptions<\r\n  config extends Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  options: GetTransactionConfirmationsOptions<config, chainId> = {} as any,\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const {\r\n        hash,\r\n        transactionReceipt,\r\n        scopeKey: _,\r\n        ...parameters\r\n      } = queryKey[1]\r\n      if (!hash && !transactionReceipt)\r\n        throw new Error('hash or transactionReceipt is required')\r\n\r\n      const confirmations = await getTransactionConfirmations(config, {\r\n        hash,\r\n        transactionReceipt,\r\n        ...(parameters as any),\r\n      })\r\n      return confirmations ?? null\r\n    },\r\n    queryKey: getTransactionConfirmationsQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetTransactionConfirmationsQueryFnData,\r\n    GetTransactionConfirmationsErrorType,\r\n    GetTransactionConfirmationsData,\r\n    GetTransactionConfirmationsQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetTransactionConfirmationsQueryFnData =\r\n  GetTransactionConfirmationsReturnType\r\n\r\nexport type GetTransactionConfirmationsData =\r\n  GetTransactionConfirmationsQueryFnData\r\n\r\nexport function getTransactionConfirmationsQueryKey<\r\n  config extends Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n>(options: GetTransactionConfirmationsOptions<config, chainId> = {} as any) {\r\n  return ['transactionConfirmations', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetTransactionConfirmationsQueryKey<\r\n  config extends Config,\r\n  chainId extends\r\n    | config['chains'][number]['id']\r\n    | undefined = config['chains'][number]['id'],\r\n> = ReturnType<typeof getTransactionConfirmationsQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetTransactionCountErrorType,\r\n  type GetTransactionCountParameters,\r\n  type GetTransactionCountReturnType,\r\n  getTransactionCount,\r\n} from '../actions/getTransactionCount.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, PartialBy } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetTransactionCountOptions<config extends Config> = Compute<\r\n  PartialBy<GetTransactionCountParameters<config>, 'address'> &\r\n    ScopeKeyParameter\r\n>\r\n\r\nexport function getTransactionCountQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: GetTransactionCountOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { address, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!address) throw new Error('address is required')\r\n      const transactionCount = await getTransactionCount(config, {\r\n        ...(parameters as GetTransactionCountParameters),\r\n        address,\r\n      })\r\n      return transactionCount ?? null\r\n    },\r\n    queryKey: getTransactionCountQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetTransactionCountQueryFnData,\r\n    GetTransactionCountErrorType,\r\n    GetTransactionCountData,\r\n    GetTransactionCountQueryKey<config>\r\n  >\r\n}\r\n\r\nexport type GetTransactionCountQueryFnData =\r\n  Compute<GetTransactionCountReturnType>\r\n\r\nexport type GetTransactionCountData = GetTransactionCountQueryFnData\r\n\r\nexport function getTransactionCountQueryKey<config extends Config>(\r\n  options: GetTransactionCountOptions<config> = {},\r\n) {\r\n  return ['transactionCount', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetTransactionCountQueryKey<config extends Config> = ReturnType<\r\n  typeof getTransactionCountQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetTransactionReceiptErrorType,\r\n  type GetTransactionReceiptParameters,\r\n  getTransactionReceipt,\r\n} from '../actions/getTransactionReceipt.js'\r\nimport type { GetTransactionReceiptReturnType } from '../actions/getTransactionReceipt.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetTransactionReceiptOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<GetTransactionReceiptParameters<config, chainId>> &\r\n    ScopeKeyParameter\r\n>\r\n\r\nexport function getTransactionReceiptQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: GetTransactionReceiptOptions<config, chainId> = {}) {\r\n  return {\r\n    queryFn({ queryKey }) {\r\n      const { hash, scopeKey: _, ...parameters } = queryKey[1]\r\n      if (!hash) throw new Error('hash is required')\r\n      return getTransactionReceipt(config, { ...parameters, hash })\r\n    },\r\n    queryKey: getTransactionReceiptQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetTransactionReceiptQueryFnData<config, chainId>,\r\n    GetTransactionReceiptErrorType,\r\n    GetTransactionReceiptData<config, chainId>,\r\n    GetTransactionReceiptQueryKey<config, chainId>\r\n  >\r\n}\r\nexport type GetTransactionReceiptQueryFnData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetTransactionReceiptReturnType<config, chainId>\r\n\r\nexport type GetTransactionReceiptData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetTransactionReceiptQueryFnData<config, chainId>\r\n\r\nexport function getTransactionReceiptQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetTransactionReceiptOptions<config, chainId>) {\r\n  return ['getTransactionReceipt', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type GetTransactionReceiptQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getTransactionReceiptQueryKey<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type GetWalletClientErrorType,\r\n  type GetWalletClientParameters,\r\n  type GetWalletClientReturnType,\r\n  getWalletClient,\r\n} from '../actions/getWalletClient.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type GetWalletClientOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<GetWalletClientParameters<config, chainId>> & ScopeKeyParameter\r\n>\r\n\r\nexport function getWalletClientQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(config: config, options: GetWalletClientOptions<config, chainId> = {}) {\r\n  return {\r\n    gcTime: 0,\r\n    async queryFn({ queryKey }) {\r\n      const { connector } = options\r\n      const { connectorUid: _, scopeKey: _s, ...parameters } = queryKey[1]\r\n      return getWalletClient(config, { ...parameters, connector })\r\n    },\r\n    queryKey: getWalletClientQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    GetWalletClientQueryFnData<config, chainId>,\r\n    GetWalletClientErrorType,\r\n    GetWalletClientData<config, chainId>,\r\n    GetWalletClientQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type GetWalletClientQueryFnData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetWalletClientReturnType<config, chainId>\r\n\r\nexport type GetWalletClientData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = GetWalletClientQueryFnData<config, chainId>\r\n\r\nexport function getWalletClientQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: GetWalletClientOptions<config, chainId> = {}) {\r\n  const { connector, ...parameters } = options\r\n  return [\r\n    'walletClient',\r\n    { ...filterQueryOptions(parameters), connectorUid: connector?.uid },\r\n  ] as const\r\n}\r\n\r\nexport type GetWalletClientQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof getWalletClientQueryKey<config, chainId>>\r\n", "import type { ContractFunctionParameters } from 'viem'\r\nimport {\r\n  type ReadContractsErrorType,\r\n  type ReadContractsParameters,\r\n  type ReadContractsReturnType,\r\n  readContracts,\r\n} from '../actions/readContracts.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type {\r\n  ChainIdParameter,\r\n  ScopeKeyParameter,\r\n} from '../types/properties.js'\r\nimport type { StrictOmit } from '../types/utils.js'\r\nimport type { InfiniteQueryOptions } from './types.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type InfiniteReadContractsOptions<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n  pageParam,\r\n  config extends Config,\r\n> = {\r\n  cacheKey: string\r\n  contracts(\r\n    pageParam: pageParam,\r\n  ): ReadContractsParameters<contracts, allowFailure, config>['contracts']\r\n} & StrictOmit<\r\n  ReadContractsParameters<contracts, allowFailure, config>,\r\n  'contracts'\r\n> &\r\n  ScopeKeyParameter\r\n\r\nexport function infiniteReadContractsQueryOptions<\r\n  config extends Config,\r\n  const contracts extends readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  pageParam = unknown,\r\n>(\r\n  config: config,\r\n  options: InfiniteReadContractsOptions<\r\n    contracts,\r\n    allowFailure,\r\n    pageParam,\r\n    config\r\n  > &\r\n    ChainIdParameter<config> &\r\n    RequiredPageParamsParameters<contracts, allowFailure, pageParam>,\r\n) {\r\n  return {\r\n    ...options.query,\r\n    async queryFn({ pageParam, queryKey }) {\r\n      const { contracts } = options\r\n      const { cacheKey: _, scopeKey: _s, ...parameters } = queryKey[1]\r\n      return (await readContracts(config, {\r\n        ...parameters,\r\n        contracts: contracts(pageParam as any),\r\n      })) as ReadContractsReturnType<contracts, allowFailure>\r\n    },\r\n    queryKey: infiniteReadContractsQueryKey(options),\r\n  } as const satisfies InfiniteQueryOptions<\r\n    InfiniteReadContractsQueryFnData<contracts, allowFailure>,\r\n    ReadContractsErrorType,\r\n    InfiniteReadContractsData<contracts, allowFailure>,\r\n    InfiniteReadContractsData<contracts, allowFailure>,\r\n    InfiniteReadContractsQueryKey<contracts, allowFailure, pageParam, config>,\r\n    pageParam\r\n  >\r\n}\r\n\r\ntype RequiredPageParamsParameters<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n  pageParam,\r\n> = {\r\n  query: {\r\n    initialPageParam: pageParam\r\n    getNextPageParam(\r\n      lastPage: InfiniteReadContractsQueryFnData<contracts, allowFailure>,\r\n      allPages: InfiniteReadContractsQueryFnData<contracts, allowFailure>[],\r\n      lastPageParam: pageParam,\r\n      allPageParams: pageParam[],\r\n    ): pageParam | undefined | null\r\n  }\r\n}\r\n\r\nexport type InfiniteReadContractsQueryFnData<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n> = ReadContractsReturnType<contracts, allowFailure>\r\n\r\nexport type InfiniteReadContractsData<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n> = InfiniteReadContractsQueryFnData<contracts, allowFailure>\r\n\r\nexport function infiniteReadContractsQueryKey<\r\n  config extends Config,\r\n  const contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n  pageParam,\r\n>(\r\n  options: InfiniteReadContractsOptions<\r\n    contracts,\r\n    allowFailure,\r\n    pageParam,\r\n    config\r\n  > &\r\n    ChainIdParameter<config> &\r\n    RequiredPageParamsParameters<contracts, allowFailure, pageParam>,\r\n) {\r\n  const { contracts: _, query: _q, ...parameters } = options\r\n  return ['infiniteReadContracts', filterQueryOptions(parameters)] as const\r\n}\r\n\r\nexport type InfiniteReadContractsQueryKey<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n  pageParam,\r\n  config extends Config,\r\n> = ReturnType<\r\n  typeof infiniteReadContractsQueryKey<\r\n    config,\r\n    contracts,\r\n    allowFailure,\r\n    pageParam\r\n  >\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport type { PrepareTransactionRequestRequest as viem_PrepareTransactionRequestRequest } from 'viem'\r\n\r\nimport {\r\n  type PrepareTransactionRequestErrorType,\r\n  type PrepareTransactionRequestParameters,\r\n  type PrepareTransactionRequestReturnType,\r\n  prepareTransactionRequest,\r\n} from '../actions/prepareTransactionRequest.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { SelectChains } from '../types/chain.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { UnionExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type PrepareTransactionRequestOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n> = UnionExactPartial<\r\n  PrepareTransactionRequestParameters<config, chainId, request>\r\n> &\r\n  ScopeKeyParameter\r\n\r\nexport function prepareTransactionRequestQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n>(\r\n  config: config,\r\n  options: PrepareTransactionRequestOptions<\r\n    config,\r\n    chainId,\r\n    request\r\n  > = {} as any,\r\n) {\r\n  return {\r\n    queryFn({ queryKey }) {\r\n      const { scopeKey: _, to, ...parameters } = queryKey[1]\r\n      if (!to) throw new Error('to is required')\r\n      return prepareTransactionRequest(config, {\r\n        to,\r\n        ...(parameters as any),\r\n      }) as unknown as Promise<\r\n        PrepareTransactionRequestQueryFnData<config, chainId, request>\r\n      >\r\n    },\r\n    queryKey: prepareTransactionRequestQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    PrepareTransactionRequestQueryFnData<config, chainId, request>,\r\n    PrepareTransactionRequestErrorType,\r\n    PrepareTransactionRequestData<config, chainId, request>,\r\n    PrepareTransactionRequestQueryKey<config, chainId, request>\r\n  >\r\n}\r\nexport type PrepareTransactionRequestQueryFnData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n> = PrepareTransactionRequestReturnType<config, chainId, request>\r\n\r\nexport type PrepareTransactionRequestData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n> = PrepareTransactionRequestQueryFnData<config, chainId, request>\r\n\r\nexport function prepareTransactionRequestQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n>(options: PrepareTransactionRequestOptions<config, chainId, request>) {\r\n  return ['prepareTransactionRequest', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type PrepareTransactionRequestQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n> = ReturnType<\r\n  typeof prepareTransactionRequestQueryKey<config, chainId, request>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\r\n\r\nimport {\r\n  type ReadContractErrorType,\r\n  type ReadContractParameters,\r\n  type ReadContractReturnType,\r\n  readContract,\r\n} from '../actions/readContract.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { UnionExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type ReadContractOptions<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  config extends Config,\r\n> = UnionExactPartial<ReadContractParameters<abi, functionName, args, config>> &\r\n  ScopeKeyParameter\r\n\r\nexport function readContractQueryOptions<\r\n  config extends Config,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n>(\r\n  config: config,\r\n  options: ReadContractOptions<abi, functionName, args, config> = {} as any,\r\n) {\r\n  return {\r\n    // TODO: Support `signal` once Viem actions allow passthrough\r\n    // https://tkdodo.eu/blog/why-you-want-react-query#bonus-cancellation\r\n    async queryFn({ queryKey }) {\r\n      const abi = options.abi as Abi\r\n      if (!abi) throw new Error('abi is required')\r\n\r\n      const { functionName, scopeKey: _, ...parameters } = queryKey[1]\r\n      const addressOrCodeParams = (() => {\r\n        const params = queryKey[1] as unknown as ReadContractParameters\r\n        if (params.address) return { address: params.address }\r\n        if (params.code) return { code: params.code }\r\n        throw new Error('address or code is required')\r\n      })()\r\n\r\n      if (!functionName) throw new Error('functionName is required')\r\n\r\n      return readContract(config, {\r\n        abi,\r\n        functionName,\r\n        args: parameters.args as readonly unknown[],\r\n        ...addressOrCodeParams,\r\n        ...parameters,\r\n      }) as Promise<ReadContractData<abi, functionName, args>>\r\n    },\r\n    queryKey: readContractQueryKey(options as any) as any,\r\n  } as const satisfies QueryOptions<\r\n    ReadContractQueryFnData<abi, functionName, args>,\r\n    ReadContractErrorType,\r\n    ReadContractData<abi, functionName, args>,\r\n    ReadContractQueryKey<abi, functionName, args, config>\r\n  >\r\n}\r\n\r\nexport type ReadContractQueryFnData<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n> = ReadContractReturnType<abi, functionName, args>\r\n\r\nexport type ReadContractData<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n> = ReadContractQueryFnData<abi, functionName, args>\r\n\r\nexport function readContractQueryKey<\r\n  config extends Config,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n>(options: ReadContractOptions<abi, functionName, args, config> = {} as any) {\r\n  const { abi: _, ...rest } = options\r\n  return ['readContract', filterQueryOptions(rest)] as const\r\n}\r\n\r\nexport type ReadContractQueryKey<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  config extends Config,\r\n> = ReturnType<typeof readContractQueryKey<config, abi, functionName, args>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\nimport type {\r\n  ContractFunctionParameters,\r\n  MulticallParameters as viem_MulticallParameters,\r\n} from 'viem'\r\n\r\nimport {\r\n  type ReadContractsErrorType,\r\n  type ReadContractsReturnType,\r\n  readContracts,\r\n} from '../actions/readContracts.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ChainIdParameter } from '../types/properties.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type ReadContractsOptions<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n  config extends Config,\r\n> = ExactPartial<\r\n  viem_MulticallParameters<\r\n    contracts,\r\n    allowFailure,\r\n    { optional: true; properties: ChainIdParameter<config> }\r\n  >\r\n> &\r\n  ScopeKeyParameter\r\n\r\nexport function readContractsQueryOptions<\r\n  config extends Config,\r\n  const contracts extends readonly unknown[],\r\n  allowFailure extends boolean = true,\r\n>(\r\n  config: config,\r\n  options: ReadContractsOptions<contracts, allowFailure, config> &\r\n    ChainIdParameter<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const contracts: ContractFunctionParameters[] = []\r\n      const length = queryKey[1].contracts.length\r\n      for (let i = 0; i < length; i++) {\r\n        const contract = queryKey[1].contracts[i]!\r\n        const abi = (options.contracts?.[i] as ContractFunctionParameters).abi\r\n        contracts.push({ ...contract, abi })\r\n      }\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      return readContracts(config, {\r\n        ...parameters,\r\n        contracts,\r\n      }) as Promise<ReadContractsReturnType<contracts, allowFailure>>\r\n    },\r\n    queryKey: readContractsQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    ReadContractsQueryFnData<contracts, allowFailure>,\r\n    ReadContractsErrorType,\r\n    ReadContractsData<contracts, allowFailure>,\r\n    ReadContractsQueryKey<contracts, allowFailure, config>\r\n  >\r\n}\r\n\r\nexport type ReadContractsQueryFnData<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n> = ReadContractsReturnType<contracts, allowFailure>\r\n\r\nexport type ReadContractsData<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n> = ReadContractsQueryFnData<contracts, allowFailure>\r\n\r\nexport function readContractsQueryKey<\r\n  config extends Config,\r\n  const contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n>(\r\n  options: ReadContractsOptions<contracts, allowFailure, config> &\r\n    ChainIdParameter<config> = {},\r\n) {\r\n  const contracts = []\r\n  for (const contract of (options.contracts ??\r\n    []) as (ContractFunctionParameters & { chainId: number })[]) {\r\n    const { abi: _, ...rest } = contract\r\n    contracts.push({ ...rest, chainId: rest.chainId ?? options.chainId })\r\n  }\r\n  return [\r\n    'readContracts',\r\n    filterQueryOptions({ ...options, contracts }),\r\n  ] as const\r\n}\r\n\r\nexport type ReadContractsQueryKey<\r\n  contracts extends readonly unknown[],\r\n  allowFailure extends boolean,\r\n  config extends Config,\r\n> = ReturnType<typeof readContractsQueryKey<config, contracts, allowFailure>>\r\n", "import type { MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type ReconnectErrorType,\r\n  type ReconnectParameters,\r\n  type ReconnectReturnType,\r\n  reconnect,\r\n} from '../actions/reconnect.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport type { Mutate, MutateAsync } from './types.js'\r\n\r\nexport function reconnectMutationOptions(config: Config) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return reconnect(config, variables)\r\n    },\r\n    mutationKey: ['reconnect'],\r\n  } as const satisfies MutationOptions<\r\n    ReconnectData,\r\n    ReconnectErrorType,\r\n    ReconnectVariables\r\n  >\r\n}\r\n\r\nexport type ReconnectData = Compute<ReconnectReturnType>\r\n\r\nexport type ReconnectVariables = ReconnectParameters | undefined\r\n\r\nexport type ReconnectMutate<context = unknown> = Mutate<\r\n  ReconnectData,\r\n  ReconnectErrorType,\r\n  ReconnectVariables,\r\n  context\r\n>\r\n\r\nexport type ReconnectMutateAsync<context = unknown> = MutateAsync<\r\n  ReconnectData,\r\n  ReconnectErrorType,\r\n  ReconnectVariables,\r\n  context\r\n>\r\n", "import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type SendTransactionErrorType,\r\n  type SendTransactionParameters,\r\n  type SendTransactionReturnType,\r\n  sendTransaction,\r\n} from '../actions/sendTransaction.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport function sendTransactionMutationOptions<config extends Config>(\r\n  config: config,\r\n) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return sendTransaction(config, variables)\r\n    },\r\n    mutationKey: ['sendTransaction'],\r\n  } as const satisfies MutationOptions<\r\n    SendTransactionData,\r\n    SendTransactionErrorType,\r\n    SendTransactionVariables<config, config['chains'][number]['id']>\r\n  >\r\n}\r\n\r\nexport type SendTransactionData = Compute<SendTransactionReturnType>\r\n\r\nexport type SendTransactionVariables<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = SendTransactionParameters<config, chainId>\r\n\r\nexport type SendTransactionMutate<config extends Config, context = unknown> = <\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  variables: SendTransactionVariables<config, chainId>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          SendTransactionData,\r\n          SendTransactionErrorType,\r\n          Compute<SendTransactionVariables<config, chainId>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => void\r\n\r\nexport type SendTransactionMutateAsync<\r\n  config extends Config,\r\n  context = unknown,\r\n> = <chainId extends config['chains'][number]['id']>(\r\n  variables: SendTransactionVariables<config, chainId>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          SendTransactionData,\r\n          SendTransactionErrorType,\r\n          Compute<SendTransactionVariables<config, chainId>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => Promise<SendTransactionData>\r\n", "import type { MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type SignMessageErrorType,\r\n  type SignMessageParameters,\r\n  type SignMessageReturnType,\r\n  signMessage,\r\n} from '../actions/signMessage.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport type { Mutate, MutateAsync } from './types.js'\r\n\r\nexport function signMessageMutationOptions(config: Config) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return signMessage(config, variables)\r\n    },\r\n    mutationKey: ['signMessage'],\r\n  } as const satisfies MutationOptions<\r\n    SignMessageData,\r\n    SignMessageErrorType,\r\n    SignMessageVariables\r\n  >\r\n}\r\n\r\nexport type SignMessageData = SignMessageReturnType\r\n\r\nexport type SignMessageVariables = Compute<SignMessageParameters>\r\n\r\nexport type SignMessageMutate<context = unknown> = Mutate<\r\n  SignMessageData,\r\n  SignMessageErrorType,\r\n  SignMessageVariables,\r\n  context\r\n>\r\n\r\nexport type SignMessageMutateAsync<context = unknown> = MutateAsync<\r\n  SignMessageData,\r\n  SignMessageErrorType,\r\n  SignMessageVariables,\r\n  context\r\n>\r\n", "import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\r\n\r\nimport type { TypedData } from 'viem'\r\nimport {\r\n  type SignTypedDataErrorType,\r\n  type SignTypedDataParameters,\r\n  type SignTypedDataReturnType,\r\n  signTypedData,\r\n} from '../actions/signTypedData.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport function signTypedDataMutationOptions<config extends Config>(\r\n  config: config,\r\n) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return signTypedData(config, variables)\r\n    },\r\n    mutationKey: ['signTypedData'],\r\n  } as const satisfies MutationOptions<\r\n    SignTypedDataData,\r\n    SignTypedDataErrorType,\r\n    SignTypedDataVariables\r\n  >\r\n}\r\n\r\nexport type SignTypedDataData = Compute<SignTypedDataReturnType>\r\n\r\nexport type SignTypedDataVariables<\r\n  typedData extends TypedData | Record<string, unknown> = TypedData,\r\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\r\n  ///\r\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\r\n> = SignTypedDataParameters<typedData, primaryType, primaryTypes>\r\n\r\nexport type SignTypedDataMutate<context = unknown> = <\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(\r\n  variables: SignTypedDataVariables<typedData, primaryType>,\r\n  options?:\r\n    | MutateOptions<\r\n        SignTypedDataData,\r\n        SignTypedDataErrorType,\r\n        SignTypedDataVariables<\r\n          typedData,\r\n          primaryType,\r\n          // use `primaryType` to make sure it's not union of all possible primary types\r\n          primaryType\r\n        >,\r\n        context\r\n      >\r\n    | undefined,\r\n) => void\r\n\r\nexport type SignTypedDataMutateAsync<context = unknown> = <\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(\r\n  variables: SignTypedDataVariables<typedData, primaryType>,\r\n  options?:\r\n    | MutateOptions<\r\n        SignTypedDataData,\r\n        SignTypedDataErrorType,\r\n        SignTypedDataVariables<\r\n          typedData,\r\n          primaryType,\r\n          // use `primaryType` to make sure it's not union of all possible primary types\r\n          primaryType\r\n        >,\r\n        context\r\n      >\r\n    | undefined,\r\n) => Promise<SignTypedDataData>\r\n", "import type { MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type SwitchAccountErrorType,\r\n  type SwitchAccountParameters,\r\n  type SwitchAccountReturnType,\r\n  switchAccount,\r\n} from '../actions/switchAccount.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport type { Mutate, MutateAsync } from './types.js'\r\n\r\nexport function switchAccountMutationOptions<config extends Config>(\r\n  config: config,\r\n) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return switchAccount(config, variables)\r\n    },\r\n    mutationKey: ['switchAccount'],\r\n  } as const satisfies MutationOptions<\r\n    SwitchAccountData<config>,\r\n    SwitchAccountErrorType,\r\n    SwitchAccountVariables\r\n  >\r\n}\r\n\r\nexport type SwitchAccountData<config extends Config> = Compute<\r\n  SwitchAccountReturnType<config>\r\n>\r\n\r\nexport type SwitchAccountVariables = Compute<SwitchAccountParameters>\r\n\r\nexport type SwitchAccountMutate<\r\n  config extends Config,\r\n  context = unknown,\r\n> = Mutate<\r\n  SwitchAccountData<config>,\r\n  SwitchAccountErrorType,\r\n  SwitchAccountVariables,\r\n  context\r\n>\r\n\r\nexport type SwitchAccountMutateAsync<\r\n  config extends Config,\r\n  context = unknown,\r\n> = MutateAsync<\r\n  SwitchAccountData<config>,\r\n  SwitchAccountErrorType,\r\n  SwitchAccountVariables,\r\n  context\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\r\n\r\nimport {\r\n  type SimulateContractErrorType,\r\n  type SimulateContractParameters,\r\n  type SimulateContractReturnType,\r\n  simulateContract,\r\n} from '../actions/simulateContract.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { UnionExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type SimulateContractOptions<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n> = UnionExactPartial<\r\n  SimulateContractParameters<abi, functionName, args, config, chainId>\r\n> &\r\n  ScopeKeyParameter\r\n\r\nexport function simulateContractQueryOptions<\r\n  config extends Config,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n>(\r\n  config: config,\r\n  options: SimulateContractOptions<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    config,\r\n    chainId\r\n  > = {} as any,\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { abi, connector } = options\r\n      if (!abi) throw new Error('abi is required')\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n      const { address, functionName } = parameters\r\n      if (!address) throw new Error('address is required')\r\n      if (!functionName) throw new Error('functionName is required')\r\n      return simulateContract(config, {\r\n        abi,\r\n        connector,\r\n        ...(parameters as any),\r\n      })\r\n    },\r\n    queryKey: simulateContractQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    SimulateContractQueryFnData<abi, functionName, args, config, chainId>,\r\n    SimulateContractErrorType,\r\n    SimulateContractData<abi, functionName, args, config, chainId>,\r\n    SimulateContractQueryKey<abi, functionName, args, config, chainId>\r\n  >\r\n}\r\n\r\nexport type SimulateContractQueryFnData<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n> = SimulateContractReturnType<abi, functionName, args, config, chainId>\r\n\r\nexport type SimulateContractData<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n> = SimulateContractQueryFnData<abi, functionName, args, config, chainId>\r\n\r\nexport function simulateContractQueryKey<\r\n  config extends Config,\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n>(\r\n  options: SimulateContractOptions<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    config,\r\n    chainId\r\n  > = {} as any,\r\n) {\r\n  const { abi: _, connector: _c, ...rest } = options\r\n  return ['simulateContract', filterQueryOptions(rest)] as const\r\n}\r\n\r\nexport type SimulateContractQueryKey<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'] | undefined,\r\n> = ReturnType<\r\n  typeof simulateContractQueryKey<config, abi, functionName, args, chainId>\r\n>\r\n", "import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type SwitchChainErrorType,\r\n  type SwitchChainParameters,\r\n  type SwitchChainReturnType,\r\n  switchChain,\r\n} from '../actions/switchChain.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport function switchChainMutationOptions<config extends Config>(\r\n  config: config,\r\n) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return switchChain(config, variables)\r\n    },\r\n    mutationKey: ['switchChain'],\r\n  } as const satisfies MutationOptions<\r\n    SwitchChainData<config, config['chains'][number]['id']>,\r\n    SwitchChainErrorType,\r\n    SwitchChainVariables<config, config['chains'][number]['id']>\r\n  >\r\n}\r\n\r\nexport type SwitchChainData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<SwitchChainReturnType<config, chainId>>\r\n\r\nexport type SwitchChainVariables<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<SwitchChainParameters<config, chainId>>\r\n\r\nexport type SwitchChainMutate<config extends Config, context = unknown> = <\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  variables: SwitchChainVariables<config, chainId>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          SwitchChainData<config, chainId>,\r\n          SwitchChainErrorType,\r\n          Compute<SwitchChainVariables<config, chainId>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => void\r\n\r\nexport type SwitchChainMutateAsync<config extends Config, context = unknown> = <\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  variables: SwitchChainVariables<config, chainId>,\r\n  options?:\r\n    | Compute<\r\n        MutateOptions<\r\n          SwitchChainData<config, chainId>,\r\n          SwitchChainErrorType,\r\n          Compute<SwitchChainVariables<config, chainId>>,\r\n          context\r\n        >\r\n      >\r\n    | undefined,\r\n) => Promise<SwitchChainData<config, chainId>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type VerifyMessageErrorType,\r\n  type VerifyMessageParameters,\r\n  type VerifyMessageReturnType,\r\n  verifyMessage,\r\n} from '../actions/verifyMessage.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type VerifyMessageOptions<config extends Config> = Compute<\r\n  ExactPartial<VerifyMessageParameters<config>> & ScopeKeyParameter\r\n>\r\n\r\nexport function verifyMessageQueryOptions<config extends Config>(\r\n  config: config,\r\n  options: VerifyMessageOptions<config> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { address, message, signature } = queryKey[1]\r\n      if (!address || !message || !signature)\r\n        throw new Error('address, message, and signature are required')\r\n\r\n      const { scopeKey: _, ...parameters } = queryKey[1]\r\n\r\n      const verified = await verifyMessage(\r\n        config,\r\n        parameters as VerifyMessageParameters,\r\n      )\r\n      return verified ?? null\r\n    },\r\n    queryKey: verifyMessageQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    VerifyMessageQueryFnData,\r\n    VerifyMessageErrorType,\r\n    VerifyMessageData,\r\n    VerifyMessageQueryKey<config>\r\n  >\r\n}\r\nexport type VerifyMessageQueryFnData = VerifyMessageReturnType\r\n\r\nexport type VerifyMessageData = VerifyMessageQueryFnData\r\n\r\nexport function verifyMessageQueryKey<config extends Config>(\r\n  options: VerifyMessageOptions<config>,\r\n) {\r\n  return ['verifyMessage', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type VerifyMessageQueryKey<config extends Config> = ReturnType<\r\n  typeof verifyMessageQueryKey<config>\r\n>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\nimport type { TypedData } from 'viem'\r\n\r\nimport {\r\n  type VerifyTypedDataErrorType,\r\n  type VerifyTypedDataParameters,\r\n  type VerifyTypedDataReturnType,\r\n  verifyTypedData,\r\n} from '../actions/verifyTypedData.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type VerifyTypedDataOptions<\r\n  typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n  config extends Config,\r\n> = ExactPartial<VerifyTypedDataParameters<typedData, primaryType, config>> &\r\n  ScopeKeyParameter\r\n\r\nexport function verifyTypedDataQueryOptions<\r\n  config extends Config,\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(\r\n  config: config,\r\n  options: VerifyTypedDataOptions<typedData, primaryType, config> = {} as any,\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const {\r\n        address,\r\n        message,\r\n        primaryType,\r\n        signature,\r\n        types,\r\n        scopeKey: _,\r\n        ...parameters\r\n      } = queryKey[1]\r\n      if (!address) throw new Error('address is required')\r\n      if (!message) throw new Error('message is required')\r\n      if (!primaryType) throw new Error('primaryType is required')\r\n      if (!signature) throw new Error('signature is required')\r\n      if (!types) throw new Error('types is required')\r\n\r\n      const verified = await verifyTypedData(config, {\r\n        ...parameters,\r\n        address,\r\n        message,\r\n        primaryType,\r\n        signature,\r\n        types,\r\n      } as VerifyTypedDataParameters)\r\n      return verified ?? null\r\n    },\r\n    queryKey: verifyTypedDataQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    VerifyTypedDataQueryFnData,\r\n    VerifyTypedDataErrorType,\r\n    VerifyTypedDataData,\r\n    VerifyTypedDataQueryKey<typedData, primaryType, config>\r\n  >\r\n}\r\n\r\nexport type VerifyTypedDataQueryFnData = VerifyTypedDataReturnType\r\n\r\nexport type VerifyTypedDataData = VerifyTypedDataQueryFnData\r\n\r\nexport function verifyTypedDataQueryKey<\r\n  config extends Config,\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(options: VerifyTypedDataOptions<typedData, primaryType, config>) {\r\n  return ['verifyTypedData', filterQueryOptions(options)] as const\r\n}\r\n\r\nexport type VerifyTypedDataQueryKey<\r\n  typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n  config extends Config,\r\n> = ReturnType<typeof verifyTypedDataQueryKey<config, typedData, primaryType>>\r\n", "import type { QueryOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type WaitForTransactionReceiptErrorType,\r\n  type WaitForTransactionReceiptParameters,\r\n  type WaitForTransactionReceiptReturnType,\r\n  waitForTransactionReceipt,\r\n} from '../actions/waitForTransactionReceipt.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { ScopeKeyParameter } from '../types/properties.js'\r\nimport type { Compute, ExactPartial } from '../types/utils.js'\r\nimport { filterQueryOptions } from './utils.js'\r\n\r\nexport type WaitForTransactionReceiptOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = Compute<\r\n  ExactPartial<WaitForTransactionReceiptParameters<config, chainId>> &\r\n    ScopeKeyParameter\r\n>\r\n\r\nexport function waitForTransactionReceiptQueryOptions<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  config: config,\r\n  options: WaitForTransactionReceiptOptions<config, chainId> = {},\r\n) {\r\n  return {\r\n    async queryFn({ queryKey }) {\r\n      const { hash, ...parameters } = queryKey[1]\r\n      if (!hash) throw new Error('hash is required')\r\n      return waitForTransactionReceipt(config, {\r\n        ...parameters,\r\n        onReplaced: options.onReplaced,\r\n        hash,\r\n      }) as unknown as Promise<\r\n        WaitForTransactionReceiptReturnType<config, chainId>\r\n      >\r\n    },\r\n    queryKey: waitForTransactionReceiptQueryKey(options),\r\n  } as const satisfies QueryOptions<\r\n    WaitForTransactionReceiptQueryFnData<config, chainId>,\r\n    WaitForTransactionReceiptErrorType,\r\n    WaitForTransactionReceiptData<config, chainId>,\r\n    WaitForTransactionReceiptQueryKey<config, chainId>\r\n  >\r\n}\r\n\r\nexport type WaitForTransactionReceiptQueryFnData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = WaitForTransactionReceiptReturnType<config, chainId>\r\n\r\nexport type WaitForTransactionReceiptData<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = WaitForTransactionReceiptQueryFnData<config, chainId>\r\n\r\nexport function waitForTransactionReceiptQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n>(options: WaitForTransactionReceiptOptions<config, chainId> = {}) {\r\n  const { onReplaced: _, ...rest } = options\r\n  return ['waitForTransactionReceipt', filterQueryOptions(rest)] as const\r\n}\r\n\r\nexport type WaitForTransactionReceiptQueryKey<\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n> = ReturnType<typeof waitForTransactionReceiptQueryKey<config, chainId>>\r\n", "import type { MutationOptions } from '@tanstack/query-core'\r\n\r\nimport {\r\n  type WatchAssetErrorType,\r\n  type WatchAssetParameters,\r\n  type WatchAssetReturnType,\r\n  watchAsset,\r\n} from '../actions/watchAsset.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\nimport type { Mutate, MutateAsync } from './types.js'\r\n\r\nexport function watchAssetMutationOptions(config: Config) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return watchAsset(config, variables)\r\n    },\r\n    mutationKey: ['watchAsset'],\r\n  } as const satisfies MutationOptions<\r\n    WatchAssetData,\r\n    WatchAssetErrorType,\r\n    WatchAssetVariables\r\n  >\r\n}\r\n\r\nexport type WatchAssetData = WatchAssetReturnType\r\n\r\nexport type WatchAssetVariables = Compute<WatchAssetParameters>\r\n\r\nexport type WatchAssetMutate<context = unknown> = Mutate<\r\n  WatchAssetData,\r\n  WatchAssetErrorType,\r\n  WatchAssetVariables,\r\n  context\r\n>\r\n\r\nexport type WatchAssetMutateAsync<context = unknown> = MutateAsync<\r\n  WatchAssetData,\r\n  WatchAssetErrorType,\r\n  WatchAssetVariables,\r\n  context\r\n>\r\n", "import type { MutateOptions, MutationOptions } from '@tanstack/query-core'\r\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\r\n\r\nimport {\r\n  type WriteContractErrorType,\r\n  type WriteContractParameters,\r\n  type WriteContractReturnType,\r\n  writeContract,\r\n} from '../actions/writeContract.js'\r\nimport type { Config } from '../createConfig.js'\r\nimport type { Compute } from '../types/utils.js'\r\n\r\nexport function writeContractMutationOptions<config extends Config>(\r\n  config: config,\r\n) {\r\n  return {\r\n    mutationFn(variables) {\r\n      return writeContract(config, variables)\r\n    },\r\n    mutationKey: ['writeContract'],\r\n  } as const satisfies MutationOptions<\r\n    WriteContractData,\r\n    WriteContractErrorType,\r\n    WriteContractVariables<\r\n      Abi,\r\n      string,\r\n      readonly unknown[],\r\n      config,\r\n      config['chains'][number]['id']\r\n    >\r\n  >\r\n}\r\n\r\nexport type WriteContractData = Compute<WriteContractReturnType>\r\n\r\nexport type WriteContractVariables<\r\n  abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  config extends Config,\r\n  chainId extends config['chains'][number]['id'],\r\n  ///\r\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n> = WriteContractParameters<\r\n  abi,\r\n  functionName,\r\n  args,\r\n  config,\r\n  chainId,\r\n  allFunctionNames\r\n>\r\n\r\nexport type WriteContractMutate<config extends Config, context = unknown> = <\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  variables: WriteContractVariables<abi, functionName, args, config, chainId>,\r\n  options?:\r\n    | MutateOptions<\r\n        WriteContractData,\r\n        WriteContractErrorType,\r\n        WriteContractVariables<\r\n          abi,\r\n          functionName,\r\n          args,\r\n          config,\r\n          chainId,\r\n          // use `functionName` to make sure it's not union of all possible function names\r\n          functionName\r\n        >,\r\n        context\r\n      >\r\n    | undefined,\r\n) => void\r\n\r\nexport type WriteContractMutateAsync<\r\n  config extends Config,\r\n  context = unknown,\r\n> = <\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainId extends config['chains'][number]['id'],\r\n>(\r\n  variables: WriteContractVariables<abi, functionName, args, config, chainId>,\r\n  options?:\r\n    | MutateOptions<\r\n        WriteContractData,\r\n        WriteContractErrorType,\r\n        WriteContractVariables<\r\n          abi,\r\n          functionName,\r\n          args,\r\n          config,\r\n          chainId,\r\n          // use `functionName` to make sure it's not union of all possible function names\r\n          functionName\r\n        >,\r\n        context\r\n      >\r\n    | undefined,\r\n) => Promise<WriteContractData>\r\n", "import {\r\n  type DefaultError,\r\n  type QueryKey,\r\n  type UseInfiniteQueryOptions,\r\n  type UseInfiniteQueryResult,\r\n  type UseMutationOptions,\r\n  type UseMutationResult,\r\n  type UseQueryOptions,\r\n  type UseQueryResult,\r\n  useInfiniteQuery as tanstack_useInfiniteQuery,\r\n  useQuery as tanstack_useQuery,\r\n  useMutation,\r\n} from '@tanstack/react-query'\r\nimport type {\r\n  Compute,\r\n  ExactPartial,\r\n  Omit,\r\n  UnionStrictOmit,\r\n} from '@wagmi/core/internal'\r\nimport { hashFn } from '@wagmi/core/query'\r\n\r\nexport type UseMutationParameters<\r\n  data = unknown,\r\n  error = Error,\r\n  variables = void,\r\n  context = unknown,\r\n> = Compute<\r\n  Omit<\r\n    UseMutationOptions<data, error, Compute<variables>, context>,\r\n    'mutationFn' | 'mutationKey' | 'throwOnError'\r\n  >\r\n>\r\n\r\nexport type UseMutationReturnType<\r\n  data = unknown,\r\n  error = Error,\r\n  variables = void,\r\n  context = unknown,\r\n> = Compute<\r\n  UnionStrictOmit<\r\n    UseMutationResult<data, error, variables, context>,\r\n    'mutate' | 'mutateAsync'\r\n  >\r\n>\r\n\r\nexport { useMutation }\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport type UseQueryParameters<\r\n  queryFnData = unknown,\r\n  error = DefaultError,\r\n  data = queryFnData,\r\n  queryKey extends QueryKey = QueryKey,\r\n> = Compute<\r\n  ExactPartial<\r\n    Omit<UseQueryOptions<queryFnData, error, data, queryKey>, 'initialData'>\r\n  > & {\r\n    // Fix `initialData` type\r\n    initialData?:\r\n      | UseQueryOptions<queryFnData, error, data, queryKey>['initialData']\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseQueryReturnType<data = unknown, error = DefaultError> = Compute<\r\n  UseQueryResult<data, error> & {\r\n    queryKey: QueryKey\r\n  }\r\n>\r\n\r\n// Adding some basic customization.\r\n// Ideally we don't have this function, but `import('@tanstack/react-query').useQuery` currently has some quirks where it is super hard to\r\n// pass down the inferred `initialData` type because of it's discriminated overload in the on `useQuery`.\r\nexport function useQuery<queryFnData, error, data, queryKey extends QueryKey>(\r\n  parameters: UseQueryParameters<queryFnData, error, data, queryKey> & {\r\n    queryKey: QueryKey\r\n  },\r\n): UseQueryReturnType<data, error> {\r\n  const result = tanstack_useQuery({\r\n    ...(parameters as any),\r\n    queryKeyHashFn: hashFn, // for bigint support\r\n  }) as UseQueryReturnType<data, error>\r\n  result.queryKey = parameters.queryKey\r\n  return result\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport type UseInfiniteQueryParameters<\r\n  queryFnData = unknown,\r\n  error = DefaultError,\r\n  data = queryFnData,\r\n  queryData = queryFnData,\r\n  queryKey extends QueryKey = QueryKey,\r\n  pageParam = unknown,\r\n> = Compute<\r\n  Omit<\r\n    UseInfiniteQueryOptions<\r\n      queryFnData,\r\n      error,\r\n      data,\r\n      queryData,\r\n      queryKey,\r\n      pageParam\r\n    >,\r\n    'initialData'\r\n  > & {\r\n    // Fix `initialData` type\r\n    initialData?:\r\n      | UseInfiniteQueryOptions<\r\n          queryFnData,\r\n          error,\r\n          data,\r\n          queryKey\r\n        >['initialData']\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseInfiniteQueryReturnType<\r\n  data = unknown,\r\n  error = DefaultError,\r\n> = UseInfiniteQueryResult<data, error> & {\r\n  queryKey: QueryKey\r\n}\r\n\r\n// Adding some basic customization.\r\nexport function useInfiniteQuery<\r\n  queryFnData,\r\n  error,\r\n  data,\r\n  queryKey extends QueryKey,\r\n>(\r\n  parameters: UseInfiniteQueryParameters<queryFnData, error, data, queryKey> & {\r\n    queryKey: QueryKey\r\n  },\r\n): UseInfiniteQueryReturnType<data, error> {\r\n  const result = tanstack_useInfiniteQuery({\r\n    ...(parameters as any),\r\n    queryKeyHashFn: hashFn, // for bigint support\r\n  }) as UseInfiniteQueryReturnType<data, error>\r\n  result.queryKey = parameters.queryKey\r\n  return result\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type GetChainIdReturnType,\r\n  type ResolvedRegister,\r\n  getChainId,\r\n  watchChainId,\r\n} from '@wagmi/core'\r\nimport { useSyncExternalStore } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseChainIdParameters<config extends Config = Config> =\r\n  ConfigParameter<config>\r\n\r\nexport type UseChainIdReturnType<config extends Config = Config> =\r\n  GetChainIdReturnType<config>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useChainId */\r\nexport function useChainId<config extends Config = ResolvedRegister['config']>(\r\n  parameters: UseChainIdParameters<config> = {},\r\n): UseChainIdReturnType<config> {\r\n  const config = useConfig(parameters)\r\n\r\n  return useSyncExternalStore(\r\n    (onChange) => watchChainId(config, { onChange }),\r\n    () => getChainId(config),\r\n    () => getChainId(config),\r\n  )\r\n}\r\n", "'use client'\r\n\r\nimport type { Config, GetBalanceErrorType, ResolvedRegister } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetBalanceData,\r\n  type GetBalanceOptions,\r\n  type GetBalanceQueryKey,\r\n  getBalanceQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { GetBalanceQueryFnData } from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseBalanceParameters<\r\n  config extends Config = Config,\r\n  selectData = GetBalanceData,\r\n> = Compute<\r\n  GetBalanceOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetBalanceQueryFnData,\r\n      GetBalanceErrorType,\r\n      selectData,\r\n      GetBalanceQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseBalanceReturnType<selectData = GetBalanceData> =\r\n  UseQueryReturnType<selectData, GetBalanceErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useBalance */\r\nexport function useBalance<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetBalanceData,\r\n>(\r\n  parameters: UseBalanceParameters<config, selectData> = {},\r\n): UseBalanceReturnType<selectData> {\r\n  const { address, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getBalanceQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(address && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type ResolvedRegister,\r\n  type WatchBlocksParameters,\r\n  watchBlocks,\r\n} from '@wagmi/core'\r\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\r\nimport { useEffect } from 'react'\r\nimport type { BlockTag } from 'viem'\r\n\r\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWatchBlocksParameters<\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = UnionCompute<\r\n  UnionExactPartial<\r\n    WatchBlocksParameters<includeTransactions, blockTag, config, chainId>\r\n  > &\r\n    ConfigParameter<config> &\r\n    EnabledParameter\r\n>\r\n\r\nexport type UseWatchBlocksReturnType = void\r\n\r\n/** https://wagmi.sh/react/hooks/useWatchBlocks */\r\nexport function useWatchBlocks<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n>(\r\n  parameters: UseWatchBlocksParameters<\r\n    includeTransactions,\r\n    blockTag,\r\n    config,\r\n    chainId\r\n  > = {} as any,\r\n): UseWatchBlocksReturnType {\r\n  const { enabled = true, onBlock, config: _, ...rest } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  // TODO(react@19): cleanup\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\r\n  useEffect(() => {\r\n    if (!enabled) return\r\n    if (!onBlock) return\r\n    return watchBlocks(config, {\r\n      ...(rest as any),\r\n      chainId,\r\n      onBlock,\r\n    })\r\n  }, [\r\n    chainId,\r\n    config,\r\n    enabled,\r\n    onBlock,\r\n    ///\r\n    rest.blockTag,\r\n    rest.emitMissed,\r\n    rest.emitOnBegin,\r\n    rest.includeTransactions,\r\n    rest.onError,\r\n    rest.poll,\r\n    rest.pollingInterval,\r\n    rest.syncConnectedChain,\r\n  ])\r\n}\r\n", "'use client'\r\n\r\nimport { useQueryClient } from '@tanstack/react-query'\r\nimport type { Config, GetBlockErrorType, ResolvedRegister } from '@wagmi/core'\r\nimport type {\r\n  Compute,\r\n  UnionCompute,\r\n  UnionStrictOmit,\r\n} from '@wagmi/core/internal'\r\nimport {\r\n  type GetBlockData,\r\n  type GetBlockOptions,\r\n  type GetBlockQueryFnData,\r\n  type GetBlockQueryKey,\r\n  getBlockQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { BlockTag } from 'viem'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport {\r\n  type UseWatchBlocksParameters,\r\n  useWatchBlocks,\r\n} from './useWatchBlocks.js'\r\n\r\nexport type UseBlockParameters<\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetBlockData<includeTransactions, blockTag, config, chainId>,\r\n> = Compute<\r\n  GetBlockOptions<includeTransactions, blockTag, config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetBlockQueryFnData<includeTransactions, blockTag, config, chainId>,\r\n      GetBlockErrorType,\r\n      selectData,\r\n      GetBlockQueryKey<includeTransactions, blockTag, config, chainId>\r\n    > & {\r\n      watch?:\r\n        | boolean\r\n        | UnionCompute<\r\n            UnionStrictOmit<\r\n              UseWatchBlocksParameters<\r\n                includeTransactions,\r\n                blockTag,\r\n                config,\r\n                chainId\r\n              >,\r\n              'chainId' | 'config' | 'onBlock' | 'onError'\r\n            >\r\n          >\r\n        | undefined\r\n    }\r\n>\r\n\r\nexport type UseBlockReturnType<\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetBlockData<includeTransactions, blockTag, config, chainId>,\r\n> = UseQueryReturnType<selectData, GetBlockErrorType>\r\n\r\n/** https://wagmi.sh/react/hooks/useBlock */\r\nexport function useBlock<\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetBlockData<includeTransactions, blockTag, config, chainId>,\r\n>(\r\n  parameters: UseBlockParameters<\r\n    includeTransactions,\r\n    blockTag,\r\n    config,\r\n    chainId,\r\n    selectData\r\n  > = {},\r\n): UseBlockReturnType<\r\n  includeTransactions,\r\n  blockTag,\r\n  config,\r\n  chainId,\r\n  selectData\r\n> {\r\n  const { query = {}, watch } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const queryClient = useQueryClient()\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  const options = getBlockQueryOptions(config, {\r\n    ...parameters,\r\n    chainId,\r\n  })\r\n  const enabled = Boolean(query.enabled ?? true)\r\n\r\n  useWatchBlocks({\r\n    ...({\r\n      config: parameters.config,\r\n      chainId: parameters.chainId!,\r\n      ...(typeof watch === 'object' ? watch : {}),\r\n    } as UseWatchBlocksParameters),\r\n    enabled: Boolean(\r\n      enabled && (typeof watch === 'object' ? watch.enabled : watch),\r\n    ),\r\n    onBlock(block) {\r\n      queryClient.setQueryData(options.queryKey, block)\r\n    },\r\n  })\r\n\r\n  return useQuery({\r\n    ...(query as any),\r\n    ...options,\r\n    enabled,\r\n  }) as UseBlockReturnType<\r\n    includeTransactions,\r\n    blockTag,\r\n    config,\r\n    chainId,\r\n    selectData\r\n  >\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type ResolvedRegister,\r\n  type WatchBlockNumberParameters,\r\n  watchBlockNumber,\r\n} from '@wagmi/core'\r\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\r\nimport { useEffect } from 'react'\r\n\r\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWatchBlockNumberParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = UnionCompute<\r\n  UnionExactPartial<WatchBlockNumberParameters<config, chainId>> &\r\n    ConfigParameter<config> &\r\n    EnabledParameter\r\n>\r\n\r\nexport type UseWatchBlockNumberReturnType = void\r\n\r\n/** https://wagmi.sh/react/api/hooks/useWatchBlockNumber */\r\nexport function useWatchBlockNumber<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  parameters: UseWatchBlockNumberParameters<config, chainId> = {} as any,\r\n): UseWatchBlockNumberReturnType {\r\n  const { enabled = true, onBlockNumber, config: _, ...rest } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  // TODO(react@19): cleanup\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\r\n  useEffect(() => {\r\n    if (!enabled) return\r\n    if (!onBlockNumber) return\r\n    return watchBlockNumber(config, {\r\n      ...(rest as any),\r\n      chainId,\r\n      onBlockNumber,\r\n    })\r\n  }, [\r\n    chainId,\r\n    config,\r\n    enabled,\r\n    onBlockNumber,\r\n    ///\r\n    rest.onError,\r\n    rest.emitMissed,\r\n    rest.emitOnBegin,\r\n    rest.poll,\r\n    rest.pollingInterval,\r\n    rest.syncConnectedChain,\r\n  ])\r\n}\r\n", "'use client'\r\n\r\nimport { useQueryClient } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  GetBlockNumberErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type {\r\n  Compute,\r\n  UnionCompute,\r\n  UnionStrictOmit,\r\n} from '@wagmi/core/internal'\r\nimport {\r\n  type GetBlockNumberData,\r\n  type GetBlockNumberOptions,\r\n  type GetBlockNumberQueryFnData,\r\n  type GetBlockNumberQueryKey,\r\n  getBlockNumberQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport {\r\n  type UseWatchBlockNumberParameters,\r\n  useWatchBlockNumber,\r\n} from './useWatchBlockNumber.js'\r\n\r\nexport type UseBlockNumberParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetBlockNumberData,\r\n> = Compute<\r\n  GetBlockNumberOptions<config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetBlockNumberQueryFnData,\r\n      GetBlockNumberErrorType,\r\n      selectData,\r\n      GetBlockNumberQueryKey<config, chainId>\r\n    > & {\r\n      watch?:\r\n        | boolean\r\n        | UnionCompute<\r\n            UnionStrictOmit<\r\n              UseWatchBlockNumberParameters<config, chainId>,\r\n              'chainId' | 'config' | 'onBlockNumber' | 'onError'\r\n            >\r\n          >\r\n        | undefined\r\n    }\r\n>\r\n\r\nexport type UseBlockNumberReturnType<selectData = GetBlockNumberData> =\r\n  UseQueryReturnType<selectData, GetBlockNumberErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useBlockNumber */\r\nexport function useBlockNumber<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetBlockNumberData,\r\n>(\r\n  parameters: UseBlockNumberParameters<config, chainId, selectData> = {},\r\n): UseBlockNumberReturnType<selectData> {\r\n  const { query = {}, watch } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const queryClient = useQueryClient()\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  const options = getBlockNumberQueryOptions(config, {\r\n    ...parameters,\r\n    chainId,\r\n  })\r\n\r\n  useWatchBlockNumber({\r\n    ...({\r\n      config: parameters.config,\r\n      chainId: parameters.chainId,\r\n      ...(typeof watch === 'object' ? watch : {}),\r\n    } as UseWatchBlockNumberParameters),\r\n    enabled: Boolean(\r\n      (query.enabled ?? true) &&\r\n        (typeof watch === 'object' ? watch.enabled : watch),\r\n    ),\r\n    onBlockNumber(blockNumber) {\r\n      queryClient.setQueryData(options.queryKey, blockNumber)\r\n    },\r\n  })\r\n\r\n  return useQuery({ ...query, ...options })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetBlockTransactionCountErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { UnionCompute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetBlockTransactionCountData,\r\n  type GetBlockTransactionCountOptions,\r\n  type GetBlockTransactionCountQueryFnData,\r\n  type GetBlockTransactionCountQueryKey,\r\n  getBlockTransactionCountQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseBlockTransactionCountParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetBlockTransactionCountData,\r\n> = UnionCompute<\r\n  GetBlockTransactionCountOptions<config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetBlockTransactionCountQueryFnData,\r\n      GetBlockTransactionCountErrorType,\r\n      selectData,\r\n      GetBlockTransactionCountQueryKey<config, chainId>\r\n    >\r\n>\r\n\r\nexport type UseBlockTransactionCountReturnType<\r\n  selectData = GetBlockTransactionCountData,\r\n> = UseQueryReturnType<selectData, GetBlockTransactionCountErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useBlockTransactionCount */\r\nexport function useBlockTransactionCount<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetBlockTransactionCountData,\r\n>(\r\n  parameters: UseBlockTransactionCountParameters<\r\n    config,\r\n    chainId,\r\n    selectData\r\n  > = {},\r\n): UseBlockTransactionCountReturnType<selectData> {\r\n  const { query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  const options = getBlockTransactionCountQueryOptions(config, {\r\n    ...parameters,\r\n    chainId,\r\n  })\r\n\r\n  return useQuery({ ...query, ...options })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetBytecodeErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetBytecodeData,\r\n  type GetBytecodeOptions,\r\n  type GetBytecodeQueryKey,\r\n  getBytecodeQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { GetBytecodeQueryFnData } from '@wagmi/core/query'\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseBytecodeParameters<\r\n  config extends Config = Config,\r\n  selectData = GetBytecodeData,\r\n> = Compute<\r\n  GetBytecodeOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetBytecodeQueryFnData,\r\n      GetBytecodeErrorType,\r\n      selectData,\r\n      GetBytecodeQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseBytecodeReturnType<selectData = GetBytecodeData> =\r\n  UseQueryReturnType<selectData, GetBytecodeErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useBytecode */\r\nexport function useBytecode<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetBytecodeData,\r\n>(\r\n  parameters: UseBytecodeParameters<config, selectData> = {},\r\n): UseBytecodeReturnType<selectData> {\r\n  const { address, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getBytecodeQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(address && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type { CallErrorType, Config, ResolvedRegister } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type CallData,\r\n  type CallOptions,\r\n  type CallQueryKey,\r\n  callQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { CallQueryFnData } from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseCallParameters<\r\n  config extends Config = Config,\r\n  selectData = CallData,\r\n> = Compute<\r\n  CallOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      CallQueryFnData,\r\n      CallErrorType,\r\n      selectData,\r\n      CallQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseCallReturnType<selectData = CallData> = UseQueryReturnType<\r\n  selectData,\r\n  CallErrorType\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useCall */\r\nexport function useCall<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = CallData,\r\n>(\r\n  parameters: UseCallParameters<config, selectData> = {},\r\n): UseCallReturnType<selectData> {\r\n  const { query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = callQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n\r\n  return useQuery({ ...query, ...options })\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type GetChainsReturnType,\r\n  type ResolvedRegister,\r\n  getChains,\r\n} from '@wagmi/core'\r\nimport { watchChains } from '@wagmi/core/internal'\r\nimport { useSyncExternalStore } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseChainsParameters<config extends Config = Config> =\r\n  ConfigParameter<config>\r\n\r\nexport type UseChainsReturnType<config extends Config = Config> =\r\n  GetChainsReturnType<config>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useChains */\r\nexport function useChains<config extends Config = ResolvedRegister['config']>(\r\n  parameters: UseChainsParameters<config> = {},\r\n): UseChainsReturnType<config> {\r\n  const config = useConfig(parameters)\r\n\r\n  return useSyncExternalStore(\r\n    (onChange) => watchChains(config, { onChange }),\r\n    () => getChains(config),\r\n    () => getChains(config),\r\n  )\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type GetClientParameters,\r\n  type GetClientReturnType,\r\n  type ResolvedRegister,\r\n  getClient,\r\n  watchClient,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | number | undefined =\r\n    | config['chains'][number]['id']\r\n    | undefined,\r\n> = Compute<GetClientParameters<config, chainId> & ConfigParameter<config>>\r\n\r\nexport type UseClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | number | undefined =\r\n    | config['chains'][number]['id']\r\n    | undefined,\r\n> = GetClientReturnType<config, chainId>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useClient */\r\nexport function useClient<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends config['chains'][number]['id'] | number | undefined =\r\n    | config['chains'][number]['id']\r\n    | undefined,\r\n>(\r\n  parameters: UseClientParameters<config, chainId> = {},\r\n): UseClientReturnType<config, chainId> {\r\n  const config = useConfig(parameters)\r\n\r\n  return useSyncExternalStoreWithSelector(\r\n    (onChange) => watchClient(config, { onChange }),\r\n    () => getClient(config, parameters),\r\n    () => getClient(config, parameters),\r\n    (x) => x,\r\n    (a, b) => a?.uid === b?.uid,\r\n  ) as any\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type { Config, ConnectErrorType, ResolvedRegister } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type ConnectData,\r\n  type ConnectMutate,\r\n  type ConnectMutateAsync,\r\n  type ConnectVariables,\r\n  connectMutationOptions,\r\n} from '@wagmi/core/query'\r\nimport { useEffect } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport { type UseConnectorsReturnType, useConnectors } from './useConnectors.js'\r\n\r\nexport type UseConnectParameters<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  ConfigParameter<config> & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          ConnectData<config>,\r\n          ConnectErrorType,\r\n          ConnectVariables<config, config['connectors'][number]>,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseConnectReturnType<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  UseMutationReturnType<\r\n    ConnectData<config>,\r\n    ConnectErrorType,\r\n    ConnectVariables<config, config['connectors'][number]>,\r\n    context\r\n  > & {\r\n    connect: ConnectMutate<config, context>\r\n    connectAsync: ConnectMutateAsync<config, context>\r\n    connectors: Compute<UseConnectorsReturnType> | config['connectors']\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useConnect */\r\nexport function useConnect<\r\n  config extends Config = ResolvedRegister['config'],\r\n  context = unknown,\r\n>(\r\n  parameters: UseConnectParameters<config, context> = {},\r\n): UseConnectReturnType<config, context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = connectMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  // Reset mutation back to an idle state when the connector disconnects.\r\n  useEffect(() => {\r\n    return config.subscribe(\r\n      ({ status }) => status,\r\n      (status, previousStatus) => {\r\n        if (previousStatus === 'connected' && status === 'disconnected')\r\n          result.reset()\r\n      },\r\n    )\r\n  }, [config, result.reset])\r\n\r\n  type Return = UseConnectReturnType<config, context>\r\n  return {\r\n    ...(result as Return),\r\n    connect: mutate as Return['connect'],\r\n    connectAsync: mutateAsync as Return['connectAsync'],\r\n    connectors: useConnectors({ config }),\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type GetConnectorsReturnType,\r\n  type ResolvedRegister,\r\n  getConnectors,\r\n  watchConnectors,\r\n} from '@wagmi/core'\r\nimport { useSyncExternalStore } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseConnectorsParameters<config extends Config = Config> =\r\n  ConfigParameter<config>\r\n\r\nexport type UseConnectorsReturnType<config extends Config = Config> =\r\n  GetConnectorsReturnType<config>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useConnectors */\r\nexport function useConnectors<\r\n  config extends Config = ResolvedRegister['config'],\r\n>(\r\n  parameters: UseConnectorsParameters<config> = {},\r\n): UseConnectorsReturnType<config> {\r\n  const config = useConfig(parameters)\r\n\r\n  return useSyncExternalStore(\r\n    (onChange) => watchConnectors(config, { onChange }),\r\n    () => getConnectors(config),\r\n    () => getConnectors(config),\r\n  )\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type GetConnectionsReturnType,\r\n  getConnections,\r\n  watchConnections,\r\n} from '@wagmi/core'\r\nimport { useSyncExternalStore } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseConnectionsParameters = ConfigParameter\r\n\r\nexport type UseConnectionsReturnType = GetConnectionsReturnType\r\n\r\n/** https://wagmi.sh/react/api/hooks/useConnections */\r\nexport function useConnections(\r\n  parameters: UseConnectionsParameters = {},\r\n): UseConnectionsReturnType {\r\n  const config = useConfig(parameters)\r\n\r\n  return useSyncExternalStore(\r\n    (onChange) => watchConnections(config, { onChange }),\r\n    () => getConnections(config),\r\n    () => getConnections(config),\r\n  )\r\n}\r\n", "'use client'\r\n\r\nimport { useQueryClient } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  GetConnectorClientErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute, Omit } from '@wagmi/core/internal'\r\nimport {\r\n  type GetConnectorClientData,\r\n  type GetConnectorClientOptions,\r\n  type GetConnectorClientQueryFnData,\r\n  type GetConnectorClientQueryKey,\r\n  getConnectorClientQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport { useEffect, useRef } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport {\r\n  type UseQueryParameters,\r\n  type UseQueryReturnType,\r\n  useQuery,\r\n} from '../utils/query.js'\r\nimport { useAccount } from './useAccount.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseConnectorClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetConnectorClientData<config, chainId>,\r\n> = Compute<\r\n  GetConnectorClientOptions<config, chainId> &\r\n    ConfigParameter<config> & {\r\n      query?:\r\n        | Compute<\r\n            Omit<\r\n              UseQueryParameters<\r\n                GetConnectorClientQueryFnData<config, chainId>,\r\n                GetConnectorClientErrorType,\r\n                selectData,\r\n                GetConnectorClientQueryKey<config, chainId>\r\n              >,\r\n              'gcTime' | 'staleTime'\r\n            >\r\n          >\r\n        | undefined\r\n    }\r\n>\r\n\r\nexport type UseConnectorClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetConnectorClientData<config, chainId>,\r\n> = UseQueryReturnType<selectData, GetConnectorClientErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useConnectorClient */\r\nexport function useConnectorClient<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetConnectorClientData<config, chainId>,\r\n>(\r\n  parameters: UseConnectorClientParameters<config, chainId, selectData> = {},\r\n): UseConnectorClientReturnType<config, chainId, selectData> {\r\n  const { query = {}, ...rest } = parameters\r\n\r\n  const config = useConfig(rest)\r\n  const queryClient = useQueryClient()\r\n  const { address, connector, status } = useAccount({ config })\r\n  const chainId = useChainId({ config })\r\n  const activeConnector = parameters.connector ?? connector\r\n\r\n  const { queryKey, ...options } = getConnectorClientQueryOptions<\r\n    config,\r\n    chainId\r\n  >(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n    connector: activeConnector,\r\n  })\r\n  const enabled = Boolean(\r\n    (status === 'connected' ||\r\n      (status === 'reconnecting' && activeConnector?.getProvider)) &&\r\n      (query.enabled ?? true),\r\n  )\r\n\r\n  const addressRef = useRef(address)\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\r\n  useEffect(() => {\r\n    const previousAddress = addressRef.current\r\n    if (!address && previousAddress) {\r\n      // remove when account is disconnected\r\n      queryClient.removeQueries({ queryKey })\r\n      addressRef.current = undefined\r\n    } else if (address !== previousAddress) {\r\n      // invalidate when address changes\r\n      queryClient.invalidateQueries({ queryKey })\r\n      addressRef.current = address\r\n    }\r\n  }, [address, queryClient])\r\n\r\n  return useQuery({\r\n    ...query,\r\n    ...options,\r\n    queryKey,\r\n    enabled,\r\n    staleTime: Number.POSITIVE_INFINITY,\r\n  })\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  DeployContractErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type DeployContractData,\r\n  type DeployContractMutate,\r\n  type DeployContractMutateAsync,\r\n  type DeployContractVariables,\r\n  deployContractMutationOptions,\r\n} from '@wagmi/core/query'\r\nimport type { Abi } from 'viem'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseDeployContractParameters<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  ConfigParameter<config> & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          DeployContractData,\r\n          DeployContractErrorType,\r\n          DeployContractVariables<Abi, config, config['chains'][number]['id']>,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseDeployContractReturnType<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = UseMutationReturnType<\r\n  DeployContractData,\r\n  DeployContractErrorType,\r\n  DeployContractVariables<Abi, config, config['chains'][number]['id']>,\r\n  context\r\n> & {\r\n  deployContract: DeployContractMutate<config, context>\r\n  deployContractAsync: DeployContractMutateAsync<config, context>\r\n}\r\n\r\n/** https://wagmi.sh/react/api/hooks/useDeployContract */\r\nexport function useDeployContract<\r\n  config extends Config = ResolvedRegister['config'],\r\n  context = unknown,\r\n>(\r\n  parameters: UseDeployContractParameters<config, context> = {},\r\n): UseDeployContractReturnType<config, context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = deployContractMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  type Return = UseDeployContractReturnType<config, context>\r\n  return {\r\n    ...result,\r\n    deployContract: mutate as Return['deployContract'],\r\n    deployContractAsync: mutateAsync as Return['deployContractAsync'],\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type { Connector, DisconnectErrorType } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type DisconnectData,\r\n  type DisconnectMutate,\r\n  type DisconnectMutateAsync,\r\n  type DisconnectVariables,\r\n  disconnectMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport { useConnections } from './useConnections.js'\r\n\r\nexport type UseDisconnectParameters<context = unknown> = Compute<\r\n  ConfigParameter & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          DisconnectData,\r\n          DisconnectErrorType,\r\n          DisconnectVariables,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseDisconnectReturnType<context = unknown> = Compute<\r\n  UseMutationReturnType<\r\n    DisconnectData,\r\n    DisconnectErrorType,\r\n    DisconnectVariables,\r\n    context\r\n  > & {\r\n    connectors: readonly Connector[]\r\n    disconnect: DisconnectMutate<context>\r\n    disconnectAsync: DisconnectMutateAsync<context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useDisconnect */\r\nexport function useDisconnect<context = unknown>(\r\n  parameters: UseDisconnectParameters<context> = {},\r\n): UseDisconnectReturnType<context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = disconnectMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  return {\r\n    ...result,\r\n    connectors: useConnections({ config }).map(\r\n      (connection) => connection.connector,\r\n    ),\r\n    disconnect: mutate,\r\n    disconnectAsync: mutateAsync,\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetEnsAddressErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetEnsAddressData,\r\n  type GetEnsAddressOptions,\r\n  type GetEnsAddressQueryFnData,\r\n  type GetEnsAddressQueryKey,\r\n  getEnsAddressQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseEnsAddressParameters<\r\n  config extends Config = Config,\r\n  selectData = GetEnsAddressData,\r\n> = Compute<\r\n  GetEnsAddressOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetEnsAddressQueryFnData,\r\n      GetEnsAddressErrorType,\r\n      selectData,\r\n      GetEnsAddressQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseEnsAddressReturnType<selectData = GetEnsAddressData> =\r\n  UseQueryReturnType<selectData, GetEnsAddressErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEnsAddress */\r\nexport function useEnsAddress<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetEnsAddressData,\r\n>(\r\n  parameters: UseEnsAddressParameters<config, selectData> = {},\r\n): UseEnsAddressReturnType<selectData> {\r\n  const { name, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getEnsAddressQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(name && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetEnsAvatarErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetEnsAvatarData,\r\n  type GetEnsAvatarOptions,\r\n  type GetEnsAvatarQueryFnData,\r\n  type GetEnsAvatarQueryKey,\r\n  getEnsAvatarQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseEnsAvatarParameters<\r\n  config extends Config = Config,\r\n  selectData = GetEnsAvatarData,\r\n> = Compute<\r\n  GetEnsAvatarOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetEnsAvatarQueryFnData,\r\n      GetEnsAvatarErrorType,\r\n      selectData,\r\n      GetEnsAvatarQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseEnsAvatarReturnType<selectData = GetEnsAvatarData> =\r\n  UseQueryReturnType<selectData, GetEnsAvatarErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEnsAvatar */\r\nexport function useEnsAvatar<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetEnsAvatarData,\r\n>(\r\n  parameters: UseEnsAvatarParameters<config, selectData> = {},\r\n): UseEnsAvatarReturnType<selectData> {\r\n  const { name, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getEnsAvatarQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(name && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type { Config, GetEnsNameErrorType, ResolvedRegister } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetEnsNameData,\r\n  type GetEnsNameOptions,\r\n  type GetEnsNameQueryFnData,\r\n  type GetEnsNameQueryKey,\r\n  getEnsNameQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseEnsNameParameters<\r\n  config extends Config = Config,\r\n  selectData = GetEnsNameData,\r\n> = Compute<\r\n  GetEnsNameOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetEnsNameQueryFnData,\r\n      GetEnsNameErrorType,\r\n      selectData,\r\n      GetEnsNameQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseEnsNameReturnType<selectData = GetEnsNameData> =\r\n  UseQueryReturnType<selectData, GetEnsNameErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEnsName */\r\nexport function useEnsName<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetEnsNameData,\r\n>(\r\n  parameters: UseEnsNameParameters<config, selectData> = {},\r\n): UseEnsNameReturnType<selectData> {\r\n  const { address, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getEnsNameQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(address && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetEnsResolverErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetEnsResolverData,\r\n  type GetEnsResolverOptions,\r\n  type GetEnsResolverQueryFnData,\r\n  type GetEnsResolverQueryKey,\r\n  getEnsResolverQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseEnsResolverParameters<\r\n  config extends Config = Config,\r\n  selectData = GetEnsResolverData,\r\n> = Compute<\r\n  GetEnsResolverOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetEnsResolverQueryFnData,\r\n      GetEnsResolverErrorType,\r\n      selectData,\r\n      GetEnsResolverQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseEnsResolverReturnType<selectData = GetEnsResolverData> =\r\n  UseQueryReturnType<selectData, GetEnsResolverErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEnsResolver */\r\nexport function useEnsResolver<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetEnsResolverData,\r\n>(\r\n  parameters: UseEnsResolverParameters<config, selectData> = {},\r\n): UseEnsResolverReturnType<selectData> {\r\n  const { name, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getEnsResolverQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(name && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type { Config, GetEnsTextErrorType, ResolvedRegister } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetEnsTextData,\r\n  type GetEnsTextOptions,\r\n  type GetEnsTextQueryFnData,\r\n  type GetEnsTextQueryKey,\r\n  getEnsTextQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseEnsTextParameters<\r\n  config extends Config = Config,\r\n  selectData = GetEnsTextData,\r\n> = Compute<\r\n  GetEnsTextOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetEnsTextQueryFnData,\r\n      GetEnsTextErrorType,\r\n      selectData,\r\n      GetEnsTextQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseEnsTextReturnType<selectData = GetEnsTextData> =\r\n  UseQueryReturnType<selectData, GetEnsTextErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEnsText */\r\nexport function useEnsText<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetEnsTextData,\r\n>(\r\n  parameters: UseEnsTextParameters<config, selectData> = {},\r\n): UseEnsTextReturnType<selectData> {\r\n  const { key, name, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getEnsTextQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(key && name && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  EstimateFeesPerGasErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type EstimateFeesPerGasData,\r\n  type EstimateFeesPerGasOptions,\r\n  type EstimateFeesPerGasQueryFnData,\r\n  type EstimateFeesPerGasQueryKey,\r\n  estimateFeesPerGasQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { FeeValuesType } from 'viem'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseEstimateFeesPerGasParameters<\r\n  type extends FeeValuesType = FeeValuesType,\r\n  config extends Config = Config,\r\n  selectData = EstimateFeesPerGasData<type>,\r\n> = Compute<\r\n  EstimateFeesPerGasOptions<type, config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      EstimateFeesPerGasQueryFnData<type>,\r\n      EstimateFeesPerGasErrorType,\r\n      selectData,\r\n      EstimateFeesPerGasQueryKey<config, type>\r\n    >\r\n>\r\n\r\nexport type UseEstimateFeesPerGasReturnType<\r\n  type extends FeeValuesType = FeeValuesType,\r\n  selectData = EstimateFeesPerGasData<type>,\r\n> = UseQueryReturnType<selectData, EstimateFeesPerGasErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEstimateFeesPerGas */\r\nexport function useEstimateFeesPerGas<\r\n  config extends Config = ResolvedRegister['config'],\r\n  type extends FeeValuesType = 'eip1559',\r\n  selectData = EstimateFeesPerGasData<type>,\r\n>(\r\n  parameters: UseEstimateFeesPerGasParameters<type, config, selectData> = {},\r\n): UseEstimateFeesPerGasReturnType<type, selectData> {\r\n  const { query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = estimateFeesPerGasQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n\r\n  return useQuery({ ...query, ...options })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  EstimateGasErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport {\r\n  type EstimateGasData,\r\n  type EstimateGasOptions,\r\n  type EstimateGasQueryFnData,\r\n  type EstimateGasQueryKey,\r\n  estimateGasQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport { useConnectorClient } from './useConnectorClient.js'\r\n\r\nexport type UseEstimateGasParameters<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  selectData = EstimateGasData,\r\n> = EstimateGasOptions<config, chainId> &\r\n  ConfigParameter<config> &\r\n  QueryParameter<\r\n    EstimateGasQueryFnData,\r\n    EstimateGasErrorType,\r\n    selectData,\r\n    EstimateGasQueryKey<config, chainId>\r\n  >\r\n\r\nexport type UseEstimateGasReturnType<selectData = EstimateGasData> =\r\n  UseQueryReturnType<selectData, EstimateGasErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEstimateGas */\r\nexport function useEstimateGas<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  selectData = EstimateGasData,\r\n>(\r\n  parameters?: UseEstimateGasParameters<config, chainId, selectData>,\r\n): UseEstimateGasReturnType<selectData>\r\n\r\nexport function useEstimateGas(\r\n  parameters: UseEstimateGasParameters = {},\r\n): UseEstimateGasReturnType {\r\n  const { connector, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const { data: connectorClient } = useConnectorClient({\r\n    config,\r\n    connector,\r\n    query: { enabled: parameters.account === undefined },\r\n  })\r\n  const account = parameters.account ?? connectorClient?.account\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = estimateGasQueryOptions(config, {\r\n    ...parameters,\r\n    account,\r\n    chainId: parameters.chainId ?? chainId,\r\n    connector,\r\n  })\r\n  const enabled = Boolean((account || connector) && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  EstimateMaxPriorityFeePerGasErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type EstimateMaxPriorityFeePerGasData,\r\n  type EstimateMaxPriorityFeePerGasOptions,\r\n  type EstimateMaxPriorityFeePerGasQueryFnData,\r\n  type EstimateMaxPriorityFeePerGasQueryKey,\r\n  estimateMaxPriorityFeePerGasQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseEstimateMaxPriorityFeePerGasParameters<\r\n  config extends Config = Config,\r\n  selectData = EstimateMaxPriorityFeePerGasData,\r\n> = Compute<\r\n  EstimateMaxPriorityFeePerGasOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      EstimateMaxPriorityFeePerGasQueryFnData,\r\n      EstimateMaxPriorityFeePerGasErrorType,\r\n      selectData,\r\n      EstimateMaxPriorityFeePerGasQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseEstimateMaxPriorityFeePerGasReturnType<\r\n  selectData = EstimateMaxPriorityFeePerGasData,\r\n> = UseQueryReturnType<selectData, EstimateMaxPriorityFeePerGasErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useEstimateMaxPriorityFeePerGas */\r\nexport function useEstimateMaxPriorityFeePerGas<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = EstimateMaxPriorityFeePerGasData,\r\n>(\r\n  parameters: UseEstimateMaxPriorityFeePerGasParameters<\r\n    config,\r\n    selectData\r\n  > = {},\r\n): UseEstimateMaxPriorityFeePerGasReturnType<selectData> {\r\n  const { query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = estimateMaxPriorityFeePerGasQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n\r\n  return useQuery({ ...query, ...options })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetFeeHistoryErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetFeeHistoryData,\r\n  type GetFeeHistoryOptions,\r\n  type GetFeeHistoryQueryFnData,\r\n  type GetFeeHistoryQueryKey,\r\n  getFeeHistoryQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseFeeHistoryParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetFeeHistoryData,\r\n> = Compute<\r\n  GetFeeHistoryOptions<config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetFeeHistoryQueryFnData,\r\n      GetFeeHistoryErrorType,\r\n      selectData,\r\n      GetFeeHistoryQueryKey<config, chainId>\r\n    >\r\n>\r\n\r\nexport type UseFeeHistoryReturnType<selectData = GetFeeHistoryData> =\r\n  UseQueryReturnType<selectData, GetFeeHistoryErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useFeeHistory */\r\nexport function useFeeHistory<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetFeeHistoryData,\r\n>(\r\n  parameters: UseFeeHistoryParameters<config, chainId, selectData> = {},\r\n): UseFeeHistoryReturnType<selectData> {\r\n  const { blockCount, rewardPercentiles, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getFeeHistoryQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(\r\n    blockCount && rewardPercentiles && (query.enabled ?? true),\r\n  )\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetGasPriceErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetGasPriceData,\r\n  type GetGasPriceOptions,\r\n  type GetGasPriceQueryFnData,\r\n  type GetGasPriceQueryKey,\r\n  getGasPriceQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseGasPriceParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetGasPriceData,\r\n> = Compute<\r\n  GetGasPriceOptions<config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetGasPriceQueryFnData,\r\n      GetGasPriceErrorType,\r\n      selectData,\r\n      GetGasPriceQueryKey<config, chainId>\r\n    >\r\n>\r\n\r\nexport type UseGasPriceReturnType<selectData = GetGasPriceData> =\r\n  UseQueryReturnType<selectData, GetGasPriceErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useGasPrice */\r\nexport function useGasPrice<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetGasPriceData,\r\n>(\r\n  parameters: UseGasPriceParameters<config, chainId, selectData> = {},\r\n): UseGasPriceReturnType<selectData> {\r\n  const { query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  const options = getGasPriceQueryOptions(config, {\r\n    ...parameters,\r\n    chainId,\r\n  })\r\n\r\n  return useQuery({ ...query, ...options })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  ReadContractsErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport {\r\n  type InfiniteReadContractsQueryFnData,\r\n  type InfiniteReadContractsQueryKey,\r\n  infiniteReadContractsQueryOptions,\r\n  structuralSharing,\r\n} from '@wagmi/core/query'\r\nimport type { ContractFunctionParameters } from 'viem'\r\n\r\nimport type {\r\n  InfiniteReadContractsData,\r\n  InfiniteReadContractsOptions,\r\n} from '../exports/query.js'\r\nimport type {\r\n  ConfigParameter,\r\n  InfiniteQueryParameter,\r\n} from '../types/properties.js'\r\nimport {\r\n  type UseInfiniteQueryParameters,\r\n  type UseInfiniteQueryReturnType,\r\n  useInfiniteQuery,\r\n} from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseInfiniteContractReadsParameters<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  config extends Config = Config,\r\n  pageParam = unknown,\r\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\r\n> = InfiniteReadContractsOptions<contracts, allowFailure, pageParam, config> &\r\n  ConfigParameter<config> &\r\n  InfiniteQueryParameter<\r\n    InfiniteReadContractsQueryFnData<contracts, allowFailure>,\r\n    ReadContractsErrorType,\r\n    selectData,\r\n    InfiniteReadContractsData<contracts, allowFailure>,\r\n    InfiniteReadContractsQueryKey<contracts, allowFailure, pageParam, config>,\r\n    pageParam\r\n  >\r\n\r\nexport type UseInfiniteContractReadsReturnType<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\r\n> = UseInfiniteQueryReturnType<selectData, ReadContractsErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useInfiniteReadContracts */\r\nexport function useInfiniteReadContracts<\r\n  const contracts extends readonly unknown[],\r\n  allowFailure extends boolean = true,\r\n  config extends Config = ResolvedRegister['config'],\r\n  pageParam = unknown,\r\n  selectData = InfiniteReadContractsData<contracts, allowFailure>,\r\n>(\r\n  parameters: UseInfiniteContractReadsParameters<\r\n    contracts,\r\n    allowFailure,\r\n    config,\r\n    pageParam,\r\n    selectData\r\n  >,\r\n): UseInfiniteContractReadsReturnType<contracts, allowFailure, selectData> {\r\n  const { contracts = [], query } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = infiniteReadContractsQueryOptions(config, {\r\n    ...parameters,\r\n    chainId,\r\n    contracts: contracts as UseInfiniteContractReadsParameters['contracts'],\r\n    query: query as UseInfiniteQueryParameters,\r\n  })\r\n\r\n  return useInfiniteQuery({\r\n    ...(query as any),\r\n    ...options,\r\n    initialPageParam: options.initialPageParam,\r\n    structuralSharing: query.structuralSharing ?? structuralSharing,\r\n  })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  PrepareTransactionRequestErrorType,\r\n  ResolvedRegister,\r\n  SelectChains,\r\n} from '@wagmi/core'\r\nimport {\r\n  type PrepareTransactionRequestData,\r\n  type PrepareTransactionRequestOptions,\r\n  type PrepareTransactionRequestQueryKey,\r\n  prepareTransactionRequestQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { PrepareTransactionRequestQueryFnData } from '@wagmi/core/query'\r\nimport type { PrepareTransactionRequestRequest as viem_PrepareTransactionRequestRequest } from 'viem'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UsePrepareTransactionRequestParameters<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  > = viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n  selectData = PrepareTransactionRequestData<config, chainId, request>,\r\n> = PrepareTransactionRequestOptions<config, chainId, request> &\r\n  ConfigParameter<config> &\r\n  QueryParameter<\r\n    PrepareTransactionRequestQueryFnData<config, chainId, request>,\r\n    PrepareTransactionRequestErrorType,\r\n    selectData,\r\n    PrepareTransactionRequestQueryKey<config, chainId, request>\r\n  >\r\n\r\nexport type UsePrepareTransactionRequestReturnType<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  > = viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n  selectData = PrepareTransactionRequestData<config, chainId, request>,\r\n> = UseQueryReturnType<selectData, PrepareTransactionRequestErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/usePrepareTransactionRequest */\r\nexport function usePrepareTransactionRequest<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  request extends viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  > = viem_PrepareTransactionRequestRequest<\r\n    SelectChains<config, chainId>[0],\r\n    SelectChains<config, chainId>[0]\r\n  >,\r\n  selectData = PrepareTransactionRequestData<config, chainId, request>,\r\n>(\r\n  parameters: UsePrepareTransactionRequestParameters<\r\n    config,\r\n    chainId,\r\n    request,\r\n    selectData\r\n  > = {} as any,\r\n): UsePrepareTransactionRequestReturnType<\r\n  config,\r\n  chainId,\r\n  request,\r\n  selectData\r\n> {\r\n  const { to, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = prepareTransactionRequestQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  } as PrepareTransactionRequestOptions<config, chainId, request>)\r\n  const enabled = Boolean(to && (query.enabled ?? true))\r\n\r\n  return useQuery({\r\n    ...(query as any),\r\n    ...options,\r\n    enabled,\r\n  }) as UsePrepareTransactionRequestReturnType<\r\n    config,\r\n    chainId,\r\n    request,\r\n    selectData\r\n  >\r\n}\r\n", "'use client'\r\n\r\nimport type { Config, GetProofErrorType, ResolvedRegister } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetProofData,\r\n  type GetProofOptions,\r\n  type GetProofQueryKey,\r\n  getProofQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { GetProofQueryFnData } from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseProofParameters<\r\n  config extends Config = Config,\r\n  selectData = GetProofData,\r\n> = Compute<\r\n  GetProofOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetProofQueryFnData,\r\n      GetProofErrorType,\r\n      selectData,\r\n      GetProofQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseProofReturnType<selectData = GetProofData> = UseQueryReturnType<\r\n  selectData,\r\n  GetProofErrorType\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useProof */\r\nexport function useProof<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetProofData,\r\n>(\r\n  parameters: UseProofParameters<config, selectData> = {},\r\n): UseProofReturnType<selectData> {\r\n  const { address, storageKeys, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getProofQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(address && storageKeys && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type GetPublicClientParameters,\r\n  type GetPublicClientReturnType,\r\n  type ResolvedRegister,\r\n  getPublicClient,\r\n  watchPublicClient,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector.js'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UsePublicClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | number | undefined =\r\n    | config['chains'][number]['id']\r\n    | undefined,\r\n> = Compute<\r\n  GetPublicClientParameters<config, chainId> & ConfigParameter<config>\r\n>\r\n\r\nexport type UsePublicClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | number | undefined =\r\n    | config['chains'][number]['id']\r\n    | undefined,\r\n> = GetPublicClientReturnType<config, chainId>\r\n\r\n/** https://wagmi.sh/react/api/hooks/usePublicClient */\r\nexport function usePublicClient<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends config['chains'][number]['id'] | number | undefined =\r\n    | config['chains'][number]['id']\r\n    | undefined,\r\n>(\r\n  parameters: UsePublicClientParameters<config, chainId> = {},\r\n): UsePublicClientReturnType<config, chainId> {\r\n  const config = useConfig(parameters)\r\n\r\n  return useSyncExternalStoreWithSelector(\r\n    (onChange) => watchPublicClient(config, { onChange }),\r\n    () => getPublicClient(config, parameters),\r\n    () => getPublicClient(config, parameters),\r\n    (x) => x,\r\n    (a, b) => a?.uid === b?.uid,\r\n  ) as any\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  ReadContractErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { UnionCompute } from '@wagmi/core/internal'\r\nimport {\r\n  type ReadContractData,\r\n  type ReadContractOptions,\r\n  type ReadContractQueryFnData,\r\n  type ReadContractQueryKey,\r\n  readContractQueryOptions,\r\n  structuralSharing,\r\n} from '@wagmi/core/query'\r\nimport type { Abi, ContractFunctionArgs, ContractFunctionName, Hex } from 'viem'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseReadContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'pure' | 'view'\r\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'pure' | 'view',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  config extends Config = Config,\r\n  selectData = ReadContractData<abi, functionName, args>,\r\n> = UnionCompute<\r\n  ReadContractOptions<abi, functionName, args, config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      ReadContractQueryFnData<abi, functionName, args>,\r\n      ReadContractErrorType,\r\n      selectData,\r\n      ReadContractQueryKey<abi, functionName, args, config>\r\n    >\r\n>\r\n\r\nexport type UseReadContractReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'pure' | 'view'\r\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'pure' | 'view',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  selectData = ReadContractData<abi, functionName, args>,\r\n> = UseQueryReturnType<selectData, ReadContractErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useReadContract */\r\nexport function useReadContract<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = ReadContractData<abi, functionName, args>,\r\n>(\r\n  parameters: UseReadContractParameters<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    config,\r\n    selectData\r\n  > = {} as any,\r\n): UseReadContractReturnType<abi, functionName, args, selectData> {\r\n  const { abi, address, functionName, query = {} } = parameters\r\n  // @ts-ignore\r\n  const code = parameters.code as Hex | undefined\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = readContractQueryOptions<config, abi, functionName, args>(\r\n    config,\r\n    { ...(parameters as any), chainId: parameters.chainId ?? chainId },\r\n  )\r\n  const enabled = Boolean(\r\n    (address || code) && abi && functionName && (query.enabled ?? true),\r\n  )\r\n\r\n  return useQuery({\r\n    ...query,\r\n    ...options,\r\n    enabled,\r\n    structuralSharing: query.structuralSharing ?? structuralSharing,\r\n  })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  ReadContractsErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type ReadContractsData,\r\n  type ReadContractsOptions,\r\n  type ReadContractsQueryFnData,\r\n  type ReadContractsQueryKey,\r\n  readContractsQueryOptions,\r\n  structuralSharing,\r\n} from '@wagmi/core/query'\r\nimport { useMemo } from 'react'\r\nimport type { ContractFunctionParameters } from 'viem'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseReadContractsParameters<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  config extends Config = Config,\r\n  selectData = ReadContractsData<contracts, allowFailure>,\r\n> = Compute<\r\n  ReadContractsOptions<contracts, allowFailure, config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      ReadContractsQueryFnData<contracts, allowFailure>,\r\n      ReadContractsErrorType,\r\n      selectData,\r\n      ReadContractsQueryKey<contracts, allowFailure, config>\r\n    >\r\n>\r\n\r\nexport type UseReadContractsReturnType<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  selectData = ReadContractsData<contracts, allowFailure>,\r\n> = UseQueryReturnType<selectData, ReadContractsErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useReadContracts */\r\nexport function useReadContracts<\r\n  const contracts extends readonly unknown[],\r\n  allowFailure extends boolean = true,\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = ReadContractsData<contracts, allowFailure>,\r\n>(\r\n  parameters: UseReadContractsParameters<\r\n    contracts,\r\n    allowFailure,\r\n    config,\r\n    selectData\r\n  > = {},\r\n): UseReadContractsReturnType<contracts, allowFailure, selectData> {\r\n  const { contracts = [], query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = readContractsQueryOptions<config, contracts, allowFailure>(\r\n    config,\r\n    { ...parameters, chainId },\r\n  )\r\n\r\n  const enabled = useMemo(() => {\r\n    let isContractsValid = false\r\n    for (const contract of contracts) {\r\n      const { abi, address, functionName } =\r\n        contract as ContractFunctionParameters\r\n      if (!abi || !address || !functionName) {\r\n        isContractsValid = false\r\n        break\r\n      }\r\n      isContractsValid = true\r\n    }\r\n    return Boolean(isContractsValid && (query.enabled ?? true))\r\n  }, [contracts, query.enabled])\r\n\r\n  return useQuery({\r\n    ...options,\r\n    ...query,\r\n    enabled,\r\n    structuralSharing: query.structuralSharing ?? structuralSharing,\r\n  })\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type { Connector, ReconnectErrorType } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type ReconnectData,\r\n  type ReconnectMutate,\r\n  type ReconnectMutateAsync,\r\n  type ReconnectVariables,\r\n  reconnectMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseReconnectParameters<context = unknown> = Compute<\r\n  ConfigParameter & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          ReconnectData,\r\n          ReconnectErrorType,\r\n          ReconnectVariables,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseReconnectReturnType<context = unknown> = Compute<\r\n  UseMutationReturnType<\r\n    ReconnectData,\r\n    ReconnectErrorType,\r\n    ReconnectVariables,\r\n    context\r\n  > & {\r\n    connectors: readonly Connector[]\r\n    reconnect: ReconnectMutate<context>\r\n    reconnectAsync: ReconnectMutateAsync<context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useReconnect */\r\nexport function useReconnect<context = unknown>(\r\n  parameters: UseReconnectParameters<context> = {},\r\n): UseReconnectReturnType<context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = reconnectMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  return {\r\n    ...result,\r\n    connectors: config.connectors,\r\n    reconnect: mutate,\r\n    reconnectAsync: mutateAsync,\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  ResolvedRegister,\r\n  SendTransactionErrorType,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type SendTransactionData,\r\n  type SendTransactionMutate,\r\n  type SendTransactionMutateAsync,\r\n  type SendTransactionVariables,\r\n  sendTransactionMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseSendTransactionParameters<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  ConfigParameter<config> & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          SendTransactionData,\r\n          SendTransactionErrorType,\r\n          SendTransactionVariables<config, config['chains'][number]['id']>,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseSendTransactionReturnType<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  UseMutationReturnType<\r\n    SendTransactionData,\r\n    SendTransactionErrorType,\r\n    SendTransactionVariables<config, config['chains'][number]['id']>,\r\n    context\r\n  > & {\r\n    sendTransaction: SendTransactionMutate<config, context>\r\n    sendTransactionAsync: SendTransactionMutateAsync<config, context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useSendTransaction */\r\nexport function useSendTransaction<\r\n  config extends Config = ResolvedRegister['config'],\r\n  context = unknown,\r\n>(\r\n  parameters: UseSendTransactionParameters<config, context> = {},\r\n): UseSendTransactionReturnType<config, context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = sendTransactionMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  type Return = UseSendTransactionReturnType<config, context>\r\n  return {\r\n    ...result,\r\n    sendTransaction: mutate as Return['sendTransaction'],\r\n    sendTransactionAsync: mutateAsync as Return['sendTransactionAsync'],\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type { SignMessageErrorType } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type SignMessageData,\r\n  type SignMessageMutate,\r\n  type SignMessageMutateAsync,\r\n  type SignMessageVariables,\r\n  signMessageMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseSignMessageParameters<context = unknown> = Compute<\r\n  ConfigParameter & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          SignMessageData,\r\n          SignMessageErrorType,\r\n          SignMessageVariables,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseSignMessageReturnType<context = unknown> = Compute<\r\n  UseMutationReturnType<\r\n    SignMessageData,\r\n    SignMessageErrorType,\r\n    SignMessageVariables,\r\n    context\r\n  > & {\r\n    signMessage: SignMessageMutate<context>\r\n    signMessageAsync: SignMessageMutateAsync<context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useSignMessage */\r\nexport function useSignMessage<context = unknown>(\r\n  parameters: UseSignMessageParameters<context> = {},\r\n): UseSignMessageReturnType<context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = signMessageMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  return {\r\n    ...result,\r\n    signMessage: mutate,\r\n    signMessageAsync: mutateAsync,\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type { SignTypedDataErrorType } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type SignTypedDataData,\r\n  type SignTypedDataMutate,\r\n  type SignTypedDataMutateAsync,\r\n  type SignTypedDataVariables,\r\n  signTypedDataMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseSignTypedDataParameters<context = unknown> = Compute<\r\n  ConfigParameter & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          SignTypedDataData,\r\n          SignTypedDataErrorType,\r\n          SignTypedDataVariables,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseSignTypedDataReturnType<context = unknown> = Compute<\r\n  UseMutationReturnType<\r\n    SignTypedDataData,\r\n    SignTypedDataErrorType,\r\n    SignTypedDataVariables,\r\n    context\r\n  > & {\r\n    signTypedData: SignTypedDataMutate<context>\r\n    signTypedDataAsync: SignTypedDataMutateAsync<context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useSignTypedData */\r\nexport function useSignTypedData<context = unknown>(\r\n  parameters: UseSignTypedDataParameters<context> = {},\r\n): UseSignTypedDataReturnType<context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = signTypedDataMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  type Return = UseSignTypedDataReturnType<context>\r\n  return {\r\n    ...result,\r\n    signTypedData: mutate as Return['signTypedData'],\r\n    signTypedDataAsync: mutateAsync as Return['signTypedDataAsync'],\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  ResolvedRegister,\r\n  SimulateContractErrorType,\r\n} from '@wagmi/core'\r\nimport {\r\n  type SimulateContractData,\r\n  type SimulateContractOptions,\r\n  type SimulateContractQueryFnData,\r\n  type SimulateContractQueryKey,\r\n  simulateContractQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { Abi, ContractFunctionArgs, ContractFunctionName } from 'viem'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport { useConnectorClient } from './useConnectorClient.js'\r\n\r\nexport type UseSimulateContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\r\n> = SimulateContractOptions<abi, functionName, args, config, chainId> &\r\n  ConfigParameter<config> &\r\n  QueryParameter<\r\n    SimulateContractQueryFnData<abi, functionName, args, config, chainId>,\r\n    SimulateContractErrorType,\r\n    selectData,\r\n    SimulateContractQueryKey<abi, functionName, args, config, chainId>\r\n  >\r\n\r\nexport type UseSimulateContractReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\r\n> = UseQueryReturnType<selectData, SimulateContractErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useSimulateContract */\r\nexport function useSimulateContract<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  selectData = SimulateContractData<abi, functionName, args, config, chainId>,\r\n>(\r\n  parameters: UseSimulateContractParameters<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    config,\r\n    chainId,\r\n    selectData\r\n  > = {} as any,\r\n): UseSimulateContractReturnType<\r\n  abi,\r\n  functionName,\r\n  args,\r\n  config,\r\n  chainId,\r\n  selectData\r\n> {\r\n  const { abi, address, connector, functionName, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const { data: connectorClient } = useConnectorClient({\r\n    config,\r\n    connector,\r\n    query: { enabled: parameters.account === undefined },\r\n  })\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = simulateContractQueryOptions<\r\n    config,\r\n    abi,\r\n    functionName,\r\n    args,\r\n    chainId\r\n  >(config, {\r\n    ...parameters,\r\n    account: parameters.account ?? connectorClient?.account,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(\r\n    abi && address && functionName && (query.enabled ?? true),\r\n  )\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetStorageAtErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetStorageAtData,\r\n  type GetStorageAtOptions,\r\n  type GetStorageAtQueryKey,\r\n  getStorageAtQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { GetStorageAtQueryFnData } from '@wagmi/core/query'\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseStorageAtParameters<\r\n  config extends Config = Config,\r\n  selectData = GetStorageAtData,\r\n> = Compute<\r\n  GetStorageAtOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetStorageAtQueryFnData,\r\n      GetStorageAtErrorType,\r\n      selectData,\r\n      GetStorageAtQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseStorageAtReturnType<selectData = GetStorageAtData> =\r\n  UseQueryReturnType<selectData, GetStorageAtErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useStorageAt */\r\nexport function useStorageAt<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetStorageAtData,\r\n>(\r\n  parameters: UseStorageAtParameters<config, selectData> = {},\r\n): UseStorageAtReturnType<selectData> {\r\n  const { address, slot, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getStorageAtQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(address && slot && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  Connector,\r\n  ResolvedRegister,\r\n  SwitchAccountErrorType,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type SwitchAccountData,\r\n  type SwitchAccountMutate,\r\n  type SwitchAccountMutateAsync,\r\n  type SwitchAccountVariables,\r\n  switchAccountMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\nimport { useConnections } from './useConnections.js'\r\n\r\nexport type UseSwitchAccountParameters<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  ConfigParameter<config> & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          SwitchAccountData<config>,\r\n          SwitchAccountErrorType,\r\n          SwitchAccountVariables,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseSwitchAccountReturnType<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  UseMutationReturnType<\r\n    SwitchAccountData<config>,\r\n    SwitchAccountErrorType,\r\n    SwitchAccountVariables,\r\n    context\r\n  > & {\r\n    connectors: readonly Connector[]\r\n    switchAccount: SwitchAccountMutate<config, context>\r\n    switchAccountAsync: SwitchAccountMutateAsync<config, context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useSwitchAccount */\r\nexport function useSwitchAccount<\r\n  config extends Config = ResolvedRegister['config'],\r\n  context = unknown,\r\n>(\r\n  parameters: UseSwitchAccountParameters<config, context> = {},\r\n): UseSwitchAccountReturnType<config, context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = switchAccountMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  return {\r\n    ...result,\r\n    connectors: useConnections({ config }).map(\r\n      (connection) => connection.connector,\r\n    ),\r\n    switchAccount: mutate,\r\n    switchAccountAsync: mutateAsync,\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  ResolvedRegister,\r\n  SwitchChainErrorType,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type SwitchChainData,\r\n  type SwitchChainMutate,\r\n  type SwitchChainMutateAsync,\r\n  type SwitchChainVariables,\r\n  switchChainMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useChains } from './useChains.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseSwitchChainParameters<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  ConfigParameter<config> & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          SwitchChainData<config, config['chains'][number]['id']>,\r\n          SwitchChainErrorType,\r\n          SwitchChainVariables<config, config['chains'][number]['id']>,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseSwitchChainReturnType<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = Compute<\r\n  UseMutationReturnType<\r\n    SwitchChainData<config, config['chains'][number]['id']>,\r\n    SwitchChainErrorType,\r\n    SwitchChainVariables<config, config['chains'][number]['id']>,\r\n    context\r\n  > & {\r\n    chains: config['chains']\r\n    switchChain: SwitchChainMutate<config, context>\r\n    switchChainAsync: SwitchChainMutateAsync<config, context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useSwitchChain */\r\nexport function useSwitchChain<\r\n  config extends Config = ResolvedRegister['config'],\r\n  context = unknown,\r\n>(\r\n  parameters: UseSwitchChainParameters<config, context> = {},\r\n): UseSwitchChainReturnType<config, context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = switchChainMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  type Return = UseSwitchChainReturnType<config, context>\r\n  return {\r\n    ...result,\r\n    chains: useChains({ config }) as unknown as config['chains'],\r\n    switchChain: mutate as Return['switchChain'],\r\n    switchChainAsync: mutateAsync as Return['switchChainAsync'],\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport type { Config, GetTokenErrorType, ResolvedRegister } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetTokenData,\r\n  type GetTokenOptions,\r\n  type GetTokenQueryFnData,\r\n  type GetTokenQueryKey,\r\n  getTokenQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseTokenParameters<\r\n  config extends Config = Config,\r\n  selectData = GetTokenData,\r\n> = Compute<\r\n  GetTokenOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetTokenQueryFnData,\r\n      GetTokenErrorType,\r\n      selectData,\r\n      GetTokenQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseTokenReturnType<selectData = GetTokenData> = UseQueryReturnType<\r\n  selectData,\r\n  GetTokenErrorType\r\n>\r\n\r\n/**\r\n * @deprecated\r\n *\r\n * https://wagmi.sh/react/api/hooks/useToken\r\n */\r\nexport function useToken<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetTokenData,\r\n>(\r\n  parameters: UseTokenParameters<config, selectData> = {},\r\n): UseTokenReturnType<selectData> {\r\n  const { address, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getTokenQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(address && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetTransactionErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetTransactionData,\r\n  type GetTransactionOptions,\r\n  type GetTransactionQueryFnData,\r\n  type GetTransactionQueryKey,\r\n  getTransactionQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseTransactionParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetTransactionData<config, chainId>,\r\n> = Compute<\r\n  GetTransactionOptions<config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetTransactionQueryFnData<config, chainId>,\r\n      GetTransactionErrorType,\r\n      selectData,\r\n      GetTransactionQueryKey<config, chainId>\r\n    >\r\n>\r\n\r\nexport type UseTransactionReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetTransactionData<config, chainId>,\r\n> = UseQueryReturnType<selectData, GetTransactionErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useTransaction */\r\nexport function useTransaction<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetTransactionData<config, chainId>,\r\n>(\r\n  parameters: UseTransactionParameters<config, chainId, selectData> = {},\r\n): UseTransactionReturnType<config, chainId, selectData> {\r\n  const { blockHash, blockNumber, blockTag, hash, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getTransactionQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(\r\n    !(blockHash && blockNumber && blockTag && hash) && (query.enabled ?? true),\r\n  )\r\n\r\n  return useQuery({\r\n    ...(query as any),\r\n    ...options,\r\n    enabled,\r\n  }) as UseTransactionReturnType<config, chainId, selectData>\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetTransactionConfirmationsErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport {\r\n  type GetTransactionConfirmationsData,\r\n  type GetTransactionConfirmationsOptions,\r\n  type GetTransactionConfirmationsQueryFnData,\r\n  type GetTransactionConfirmationsQueryKey,\r\n  getTransactionConfirmationsQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseTransactionConfirmationsParameters<\r\n  config extends Config = Config,\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  selectData = GetTransactionConfirmationsData,\r\n> = GetTransactionConfirmationsOptions<config, chainId> &\r\n  ConfigParameter<config> &\r\n  QueryParameter<\r\n    GetTransactionConfirmationsQueryFnData,\r\n    GetTransactionConfirmationsErrorType,\r\n    selectData,\r\n    GetTransactionConfirmationsQueryKey<config, chainId>\r\n  >\r\n\r\nexport type UseTransactionConfirmationsReturnType<\r\n  selectData = GetTransactionConfirmationsData,\r\n> = UseQueryReturnType<selectData, GetTransactionConfirmationsErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useTransactionConfirmations */\r\nexport function useTransactionConfirmations<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends config['chains'][number]['id'] | undefined = undefined,\r\n  selectData = GetTransactionConfirmationsData,\r\n>(\r\n  parameters: UseTransactionConfirmationsParameters<\r\n    config,\r\n    chainId,\r\n    selectData\r\n  > = {} as any,\r\n): UseTransactionConfirmationsReturnType<selectData> {\r\n  const { hash, transactionReceipt, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getTransactionConfirmationsQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(\r\n    !(hash && transactionReceipt) &&\r\n      (hash || transactionReceipt) &&\r\n      (query.enabled ?? true),\r\n  )\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetTransactionCountErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport type { GetTransactionCountQueryFnData } from '@wagmi/core/query'\r\nimport {\r\n  type GetTransactionCountData,\r\n  type GetTransactionCountOptions,\r\n  type GetTransactionCountQueryKey,\r\n  getTransactionCountQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseTransactionCountParameters<\r\n  config extends Config = Config,\r\n  selectData = GetTransactionCountData,\r\n> = Compute<\r\n  GetTransactionCountOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetTransactionCountQueryFnData,\r\n      GetTransactionCountErrorType,\r\n      selectData,\r\n      GetTransactionCountQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseTransactionCountReturnType<\r\n  selectData = GetTransactionCountData,\r\n> = UseQueryReturnType<selectData, GetTransactionCountErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useTransactionCount */\r\nexport function useTransactionCount<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = GetTransactionCountData,\r\n>(\r\n  parameters: UseTransactionCountParameters<config, selectData> = {},\r\n): UseTransactionCountReturnType<selectData> {\r\n  const { address, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getTransactionCountQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(address && (query.enabled ?? true))\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  GetTransactionReceiptErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type GetTransactionReceiptData,\r\n  type GetTransactionReceiptOptions,\r\n  type GetTransactionReceiptQueryKey,\r\n  getTransactionReceiptQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { GetTransactionReceiptQueryFnData } from '@wagmi/core/query'\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseTransactionReceiptParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetTransactionReceiptData<config, chainId>,\r\n> = Compute<\r\n  GetTransactionReceiptOptions<config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      GetTransactionReceiptQueryFnData<config, chainId>,\r\n      GetTransactionReceiptErrorType,\r\n      selectData,\r\n      GetTransactionReceiptQueryKey<config, chainId>\r\n    >\r\n>\r\n\r\nexport type UseTransactionReceiptReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetTransactionReceiptData<config, chainId>,\r\n> = UseQueryReturnType<selectData, GetTransactionReceiptErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useTransactionReceipt */\r\nexport function useTransactionReceipt<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetTransactionReceiptData<config, chainId>,\r\n>(\r\n  parameters: UseTransactionReceiptParameters<config, chainId, selectData> = {},\r\n): UseTransactionReceiptReturnType<config, chainId, selectData> {\r\n  const { hash, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = getTransactionReceiptQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(hash && (query.enabled ?? true))\r\n\r\n  return useQuery({\r\n    ...(query as any),\r\n    ...options,\r\n    enabled,\r\n  }) as UseTransactionReceiptReturnType<config, chainId, selectData>\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  ResolvedRegister,\r\n  VerifyMessageErrorType,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type VerifyMessageData,\r\n  type VerifyMessageOptions,\r\n  type VerifyMessageQueryKey,\r\n  verifyMessageQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { VerifyMessageQueryFnData } from '@wagmi/core/query'\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseVerifyMessageParameters<\r\n  config extends Config = Config,\r\n  selectData = VerifyMessageData,\r\n> = Compute<\r\n  VerifyMessageOptions<config> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      VerifyMessageQueryFnData,\r\n      VerifyMessageErrorType,\r\n      selectData,\r\n      VerifyMessageQueryKey<config>\r\n    >\r\n>\r\n\r\nexport type UseVerifyMessageReturnType<selectData = VerifyMessageData> =\r\n  UseQueryReturnType<selectData, VerifyMessageErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useVerifyMessage */\r\nexport function useVerifyMessage<\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = VerifyMessageData,\r\n>(\r\n  parameters: UseVerifyMessageParameters<config, selectData> = {},\r\n): UseVerifyMessageReturnType<selectData> {\r\n  const { address, message, signature, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = verifyMessageQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(\r\n    address && message && signature && (query.enabled ?? true),\r\n  )\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  ResolvedRegister,\r\n  VerifyTypedDataErrorType,\r\n} from '@wagmi/core'\r\nimport {\r\n  type VerifyTypedDataData,\r\n  type VerifyTypedDataOptions,\r\n  type VerifyTypedDataQueryKey,\r\n  verifyTypedDataQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport type { VerifyTypedDataQueryFnData } from '@wagmi/core/query'\r\nimport type { TypedData } from 'viem'\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseVerifyTypedDataParameters<\r\n  typedData extends TypedData | Record<string, unknown> = TypedData,\r\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\r\n  config extends Config = Config,\r\n  selectData = VerifyTypedDataData,\r\n> = VerifyTypedDataOptions<typedData, primaryType, config> &\r\n  ConfigParameter<config> &\r\n  QueryParameter<\r\n    VerifyTypedDataQueryFnData,\r\n    VerifyTypedDataErrorType,\r\n    selectData,\r\n    VerifyTypedDataQueryKey<typedData, primaryType, config>\r\n  >\r\n\r\nexport type UseVerifyTypedDataReturnType<selectData = VerifyTypedDataData> =\r\n  UseQueryReturnType<selectData, VerifyTypedDataErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useVerifyTypedData */\r\nexport function useVerifyTypedData<\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n  config extends Config = ResolvedRegister['config'],\r\n  selectData = VerifyTypedDataData,\r\n>(\r\n  parameters: UseVerifyTypedDataParameters<\r\n    typedData,\r\n    primaryType,\r\n    config,\r\n    selectData\r\n  > = {} as any,\r\n): UseVerifyTypedDataReturnType<selectData> {\r\n  const {\r\n    address,\r\n    message,\r\n    primaryType,\r\n    signature,\r\n    types,\r\n    query = {},\r\n  } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = verifyTypedDataQueryOptions<config, typedData, primaryType>(\r\n    config,\r\n    {\r\n      ...parameters,\r\n      chainId: parameters.chainId ?? chainId,\r\n    },\r\n  )\r\n  const enabled = Boolean(\r\n    address &&\r\n      message &&\r\n      primaryType &&\r\n      signature &&\r\n      types &&\r\n      (query.enabled ?? true),\r\n  )\r\n\r\n  return useQuery({ ...query, ...options, enabled })\r\n}\r\n", "'use client'\r\n\r\n// Almost identical implementation to `useConnectorClient` (except for return type)\r\n// Should update both in tandem\r\n\r\nimport { useQueryClient } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  GetWalletClientErrorType,\r\n  ResolvedRegister,\r\n} from '@wagmi/core'\r\nimport type { Compute, Omit } from '@wagmi/core/internal'\r\nimport {\r\n  type GetWalletClientData,\r\n  type GetWalletClientOptions,\r\n  type GetWalletClientQueryFnData,\r\n  type GetWalletClientQueryKey,\r\n  getWalletClientQueryOptions,\r\n} from '@wagmi/core/query'\r\nimport { useEffect, useRef } from 'react'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport {\r\n  type UseQueryParameters,\r\n  type UseQueryReturnType,\r\n  useQuery,\r\n} from '../utils/query.js'\r\nimport { useAccount } from './useAccount.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWalletClientParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetWalletClientData<config, chainId>,\r\n> = Compute<\r\n  GetWalletClientOptions<config, chainId> &\r\n    ConfigParameter<config> & {\r\n      query?:\r\n        | Compute<\r\n            Omit<\r\n              UseQueryParameters<\r\n                GetWalletClientQueryFnData<config, chainId>,\r\n                GetWalletClientErrorType,\r\n                selectData,\r\n                GetWalletClientQueryKey<config, chainId>\r\n              >,\r\n              'gcTime' | 'staleTime'\r\n            >\r\n          >\r\n        | undefined\r\n    }\r\n>\r\n\r\nexport type UseWalletClientReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetWalletClientData<config, chainId>,\r\n> = UseQueryReturnType<selectData, GetWalletClientErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useWalletClient */\r\nexport function useWalletClient<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = GetWalletClientData<config, chainId>,\r\n>(\r\n  parameters: UseWalletClientParameters<config, chainId, selectData> = {},\r\n): UseWalletClientReturnType<config, chainId, selectData> {\r\n  const { query = {}, ...rest } = parameters\r\n\r\n  const config = useConfig(rest)\r\n  const queryClient = useQueryClient()\r\n  const { address, connector, status } = useAccount({ config })\r\n  const chainId = useChainId({ config })\r\n  const activeConnector = parameters.connector ?? connector\r\n\r\n  const { queryKey, ...options } = getWalletClientQueryOptions<config, chainId>(\r\n    config,\r\n    {\r\n      ...parameters,\r\n      chainId: parameters.chainId ?? chainId,\r\n      connector: parameters.connector ?? connector,\r\n    },\r\n  )\r\n  const enabled = Boolean(\r\n    (status === 'connected' ||\r\n      (status === 'reconnecting' && activeConnector?.getProvider)) &&\r\n      (query.enabled ?? true),\r\n  )\r\n\r\n  const addressRef = useRef(address)\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `queryKey` not required\r\n  useEffect(() => {\r\n    const previousAddress = addressRef.current\r\n    if (!address && previousAddress) {\r\n      // remove when account is disconnected\r\n      queryClient.removeQueries({ queryKey })\r\n      addressRef.current = undefined\r\n    } else if (address !== previousAddress) {\r\n      // invalidate when address changes\r\n      queryClient.invalidateQueries({ queryKey })\r\n      addressRef.current = address\r\n    }\r\n  }, [address, queryClient])\r\n\r\n  return useQuery({\r\n    ...query,\r\n    ...options,\r\n    queryKey,\r\n    enabled,\r\n    staleTime: Number.POSITIVE_INFINITY,\r\n  } as any) as UseWalletClientReturnType<config, chainId, selectData>\r\n}\r\n", "'use client'\r\n\r\nimport type {\r\n  Config,\r\n  ResolvedRegister,\r\n  WaitForTransactionReceiptErrorType,\r\n} from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type WaitForTransactionReceiptData,\r\n  type WaitForTransactionReceiptOptions,\r\n  type WaitForTransactionReceiptQueryFnData,\r\n  type WaitForTransactionReceiptQueryKey,\r\n  waitForTransactionReceiptQueryOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter, QueryParameter } from '../types/properties.js'\r\nimport { type UseQueryReturnType, useQuery } from '../utils/query.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWaitForTransactionReceiptParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = WaitForTransactionReceiptData<config, chainId>,\r\n> = Compute<\r\n  WaitForTransactionReceiptOptions<config, chainId> &\r\n    ConfigParameter<config> &\r\n    QueryParameter<\r\n      WaitForTransactionReceiptQueryFnData<config, chainId>,\r\n      WaitForTransactionReceiptErrorType,\r\n      selectData,\r\n      WaitForTransactionReceiptQueryKey<config, chainId>\r\n    >\r\n>\r\n\r\nexport type UseWaitForTransactionReceiptReturnType<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = WaitForTransactionReceiptData<config, chainId>,\r\n> = UseQueryReturnType<selectData, WaitForTransactionReceiptErrorType>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useWaitForTransactionReceipt */\r\nexport function useWaitForTransactionReceipt<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n  selectData = WaitForTransactionReceiptData<config, chainId>,\r\n>(\r\n  parameters: UseWaitForTransactionReceiptParameters<\r\n    config,\r\n    chainId,\r\n    selectData\r\n  > = {},\r\n): UseWaitForTransactionReceiptReturnType<config, chainId, selectData> {\r\n  const { hash, query = {} } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const chainId = useChainId({ config })\r\n\r\n  const options = waitForTransactionReceiptQueryOptions(config, {\r\n    ...parameters,\r\n    chainId: parameters.chainId ?? chainId,\r\n  })\r\n  const enabled = Boolean(hash && (query.enabled ?? true))\r\n\r\n  return useQuery({\r\n    ...(query as any),\r\n    ...options,\r\n    enabled,\r\n  }) as UseWaitForTransactionReceiptReturnType<config, chainId, selectData>\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type { WatchAssetErrorType } from '@wagmi/core'\r\nimport type { Compute } from '@wagmi/core/internal'\r\nimport {\r\n  type WatchAssetData,\r\n  type WatchAssetMutate,\r\n  type WatchAssetMutateAsync,\r\n  type WatchAssetVariables,\r\n  watchAssetMutationOptions,\r\n} from '@wagmi/core/query'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWatchAssetParameters<context = unknown> = Compute<\r\n  ConfigParameter & {\r\n    mutation?:\r\n      | UseMutationParameters<\r\n          WatchAssetData,\r\n          WatchAssetErrorType,\r\n          WatchAssetVariables,\r\n          context\r\n        >\r\n      | undefined\r\n  }\r\n>\r\n\r\nexport type UseWatchAssetReturnType<context = unknown> = Compute<\r\n  UseMutationReturnType<\r\n    WatchAssetData,\r\n    WatchAssetErrorType,\r\n    WatchAssetVariables,\r\n    context\r\n  > & {\r\n    watchAsset: WatchAssetMutate<context>\r\n    watchAssetAsync: WatchAssetMutateAsync<context>\r\n  }\r\n>\r\n\r\n/** https://wagmi.sh/react/api/hooks/useWatchAsset */\r\nexport function useWatchAsset<context = unknown>(\r\n  parameters: UseWatchAssetParameters<context> = {},\r\n): UseWatchAssetReturnType<context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = watchAssetMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  return {\r\n    ...result,\r\n    watchAsset: mutate,\r\n    watchAssetAsync: mutateAsync,\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type ResolvedRegister,\r\n  type WatchContractEventParameters,\r\n  watchContractEvent,\r\n} from '@wagmi/core'\r\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\r\nimport { useEffect } from 'react'\r\nimport type { Abi, ContractEventName } from 'viem'\r\n\r\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWatchContractEventParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\r\n  strict extends boolean | undefined = undefined,\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = UnionCompute<\r\n  UnionExactPartial<\r\n    WatchContractEventParameters<abi, eventName, strict, config, chainId>\r\n  > &\r\n    ConfigParameter<config> &\r\n    EnabledParameter\r\n>\r\n\r\nexport type UseWatchContractEventReturnType = void\r\n\r\n/** https://wagmi.sh/react/api/hooks/useWatchContractEvent */\r\nexport function useWatchContractEvent<\r\n  const abi extends Abi | readonly unknown[],\r\n  eventName extends ContractEventName<abi>,\r\n  strict extends boolean | undefined = undefined,\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  parameters: UseWatchContractEventParameters<\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    config,\r\n    chainId\r\n  > = {} as any,\r\n): UseWatchContractEventReturnType {\r\n  const { enabled = true, onLogs, config: _, ...rest } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  // TODO(react@19): cleanup\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\r\n  useEffect(() => {\r\n    if (!enabled) return\r\n    if (!onLogs) return\r\n    return watchContractEvent(config, {\r\n      ...(rest as any),\r\n      chainId,\r\n      onLogs,\r\n    })\r\n  }, [\r\n    chainId,\r\n    config,\r\n    enabled,\r\n    onLogs,\r\n    ///\r\n    rest.abi,\r\n    rest.address,\r\n    rest.args,\r\n    rest.batch,\r\n    rest.eventName,\r\n    rest.fromBlock,\r\n    rest.onError,\r\n    rest.poll,\r\n    rest.pollingInterval,\r\n    rest.strict,\r\n    rest.syncConnectedChain,\r\n  ])\r\n}\r\n", "'use client'\r\n\r\nimport {\r\n  type Config,\r\n  type ResolvedRegister,\r\n  type WatchPendingTransactionsParameters,\r\n  watchPendingTransactions,\r\n} from '@wagmi/core'\r\nimport type { UnionCompute, UnionExactPartial } from '@wagmi/core/internal'\r\nimport { useEffect } from 'react'\r\n\r\nimport type { ConfigParameter, EnabledParameter } from '../types/properties.js'\r\nimport { useChainId } from './useChainId.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWatchPendingTransactionsParameters<\r\n  config extends Config = Config,\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n> = UnionCompute<\r\n  UnionExactPartial<WatchPendingTransactionsParameters<config, chainId>> &\r\n    ConfigParameter<config> &\r\n    EnabledParameter\r\n>\r\n\r\nexport type UseWatchPendingTransactionsReturnType = void\r\n\r\n/** https://wagmi.sh/react/api/hooks/useWatchPendingTransactions */\r\nexport function useWatchPendingTransactions<\r\n  config extends Config = ResolvedRegister['config'],\r\n  chainId extends\r\n    config['chains'][number]['id'] = config['chains'][number]['id'],\r\n>(\r\n  parameters: UseWatchPendingTransactionsParameters<\r\n    config,\r\n    chainId\r\n  > = {} as any,\r\n): UseWatchPendingTransactionsReturnType {\r\n  const { enabled = true, onTransactions, config: _, ...rest } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n  const configChainId = useChainId({ config })\r\n  const chainId = parameters.chainId ?? configChainId\r\n\r\n  // TODO(react@19): cleanup\r\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `rest` changes every render so only including properties in dependency array\r\n  useEffect(() => {\r\n    if (!enabled) return\r\n    if (!onTransactions) return\r\n    return watchPendingTransactions(config, {\r\n      ...(rest as any),\r\n      chainId,\r\n      onTransactions,\r\n    })\r\n  }, [\r\n    chainId,\r\n    config,\r\n    enabled,\r\n    onTransactions,\r\n    ///\r\n    rest.batch,\r\n    rest.onError,\r\n    rest.poll,\r\n    rest.pollingInterval,\r\n    rest.syncConnectedChain,\r\n  ])\r\n}\r\n", "'use client'\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport type {\r\n  Config,\r\n  ResolvedRegister,\r\n  WriteContractErrorType,\r\n} from '@wagmi/core'\r\nimport {\r\n  type WriteContractData,\r\n  type WriteContractMutate,\r\n  type WriteContractMutateAsync,\r\n  type WriteContractVariables,\r\n  writeContractMutationOptions,\r\n} from '@wagmi/core/query'\r\nimport type { Abi } from 'viem'\r\n\r\nimport type { ConfigParameter } from '../types/properties.js'\r\nimport type {\r\n  UseMutationParameters,\r\n  UseMutationReturnType,\r\n} from '../utils/query.js'\r\nimport { useConfig } from './useConfig.js'\r\n\r\nexport type UseWriteContractParameters<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = ConfigParameter<config> & {\r\n  mutation?:\r\n    | UseMutationParameters<\r\n        WriteContractData,\r\n        WriteContractErrorType,\r\n        WriteContractVariables<\r\n          Abi,\r\n          string,\r\n          readonly unknown[],\r\n          config,\r\n          config['chains'][number]['id']\r\n        >,\r\n        context\r\n      >\r\n    | undefined\r\n}\r\n\r\nexport type UseWriteContractReturnType<\r\n  config extends Config = Config,\r\n  context = unknown,\r\n> = UseMutationReturnType<\r\n  WriteContractData,\r\n  WriteContractErrorType,\r\n  WriteContractVariables<\r\n    Abi,\r\n    string,\r\n    readonly unknown[],\r\n    config,\r\n    config['chains'][number]['id']\r\n  >,\r\n  context\r\n> & {\r\n  writeContract: WriteContractMutate<config, context>\r\n  writeContractAsync: WriteContractMutateAsync<config, context>\r\n}\r\n\r\n/** https://wagmi.sh/react/api/hooks/useWriteContract */\r\nexport function useWriteContract<\r\n  config extends Config = ResolvedRegister['config'],\r\n  context = unknown,\r\n>(\r\n  parameters: UseWriteContractParameters<config, context> = {},\r\n): UseWriteContractReturnType<config, context> {\r\n  const { mutation } = parameters\r\n\r\n  const config = useConfig(parameters)\r\n\r\n  const mutationOptions = writeContractMutationOptions(config)\r\n  const { mutate, mutateAsync, ...result } = useMutation({\r\n    ...mutation,\r\n    ...mutationOptions,\r\n  })\r\n\r\n  type Return = UseWriteContractReturnType<config, context>\r\n  return {\r\n    ...result,\r\n    writeContract: mutate as Return['writeContract'],\r\n    writeContractAsync: mutateAsync as Return['writeContractAsync'],\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["useEffect", "useSyncExternalStore", "useRef", "useEffect", "useMemo", "import_react", "call", "_BaseError_walk", "connector", "chainId", "chain", "deployContract", "connections", "connector", "estimateGas", "estimateFeesPerGas", "estimateMaxPriorityFeePerGas", "uid", "chain", "multicall", "readContract", "index", "contracts", "multicall", "readContract", "getBalance", "getBlock", "getBlockNumber", "getBlockTransactionCount", "getChainId", "getEnsAddress", "getEnsAvatar", "getEnsName", "getEnsResolver", "getEnsText", "getFeeHistory", "getGasPrice", "getProof", "getStorageAt", "getTransaction", "getTransactionConfirmations", "getTransactionCount", "getTransactionReceipt", "prepareTransactionRequest", "connections", "sendTransaction", "signMessage", "signTypedData", "simulateContract", "switchChain", "chain", "verifyMessage", "verifyTypedData", "watchAsset", "watchBlocks", "watchBlockNumber", "watchContractEvent", "watchPendingTransactions", "waitForTransactionReceipt", "writeContract", "window", "connect", "disconnect", "isReconnecting", "provider", "error", "call", "result", "error", "hydrate", "createStore", "uid", "EventEmitter", "value", "index", "value", "deserialize", "serialize", "createStore", "connect", "getClient", "client", "chainId", "parameters", "version", "uid", "x", "disconnect", "connector", "fallback", "version", "getVersion", "version", "BaseError", "getVersion", "BaseError", "import_react", "import_react", "import_react", "isPlainObject", "structuralSharing", "call", "deployContract", "estimateFeesPerGas", "estimateGas", "estimateMaxPriorityFeePerGas", "getBalance", "getBlock", "getBlockNumber", "getBlockTransactionCount", "getEnsAddress", "getEnsAvatar", "getEnsName", "getEnsResolver", "getEnsText", "getFeeHistory", "getGasPrice", "getProof", "getStorageAt", "index", "getTransaction", "getTransactionConfirmations", "getTransactionCount", "getTransactionReceipt", "prepareTransactionRequest", "readContract", "sendTransaction", "signMessage", "signTypedData", "simulateContract", "switchChain", "verifyMessage", "verifyTypedData", "waitForTransactionReceipt", "watchAsset", "writeContract", "useQuery", "useInfiniteQuery", "import_react", "getChainId", "useQuery", "import_react", "watchBlocks", "useQuery", "import_react", "watchBlockNumber", "useQuery", "useQuery", "useQuery", "useQuery", "import_react", "import_with_selector", "import_react", "import_react", "import_react", "import_react", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useInfiniteQuery", "useQuery", "useQuery", "import_with_selector", "useQuery", "import_react", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "useQuery", "import_react", "useQuery", "useQuery", "import_react", "watchContractEvent", "import_react", "watchPendingTransactions"]
}
