{
  "version": 3,
  "sources": ["../../viem/constants/abis.ts", "../../viem/constants/contract.ts", "../../viem/constants/contracts.ts", "../../viem/utils/abi/decodeFunctionResult.ts", "../../viem/utils/abi/encodeDeployData.ts", "../../viem/utils/abi/prepareEncodeFunctionData.ts", "../../viem/utils/abi/encodeFunctionData.ts", "../../viem/utils/promise/withResolvers.ts", "../../viem/utils/promise/createBatchScheduler.ts", "../../viem/utils/stateOverride.ts", "../../viem/actions/public/call.ts", "../../viem/errors/ccip.ts", "../../viem/utils/address/isAddressEqual.ts", "../../viem/utils/ccip.ts"],
  "sourcesContent": ["/* [Multicall3](https://github.com/mds1/multicall) */\r\nexport const multicall3Abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'target',\r\n            type: 'address',\r\n          },\r\n          {\r\n            name: 'allowFailure',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'aggregate3',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'success',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            name: 'returnData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        name: 'returnData',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n] as const\r\n\r\nconst universalResolverErrors = [\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverNotFound',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverWildcardNotSupported',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverNotContract',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'returnData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'ResolverError',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'status',\r\n            type: 'uint16',\r\n          },\r\n          {\r\n            name: 'message',\r\n            type: 'string',\r\n          },\r\n        ],\r\n        name: 'errors',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'HttpError',\r\n    type: 'error',\r\n  },\r\n] as const\r\n\r\nexport const universalResolverResolveAbi = [\r\n  ...universalResolverErrors,\r\n  {\r\n    name: 'resolve',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes' },\r\n      { name: 'data', type: 'bytes' },\r\n    ],\r\n    outputs: [\r\n      { name: '', type: 'bytes' },\r\n      { name: 'address', type: 'address' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'resolve',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes' },\r\n      { name: 'data', type: 'bytes' },\r\n      { name: 'gateways', type: 'string[]' },\r\n    ],\r\n    outputs: [\r\n      { name: '', type: 'bytes' },\r\n      { name: 'address', type: 'address' },\r\n    ],\r\n  },\r\n] as const\r\n\r\nexport const universalResolverReverseAbi = [\r\n  ...universalResolverErrors,\r\n  {\r\n    name: 'reverse',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [{ type: 'bytes', name: 'reverseName' }],\r\n    outputs: [\r\n      { type: 'string', name: 'resolvedName' },\r\n      { type: 'address', name: 'resolvedAddress' },\r\n      { type: 'address', name: 'reverseResolver' },\r\n      { type: 'address', name: 'resolver' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'reverse',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { type: 'bytes', name: 'reverseName' },\r\n      { type: 'string[]', name: 'gateways' },\r\n    ],\r\n    outputs: [\r\n      { type: 'string', name: 'resolvedName' },\r\n      { type: 'address', name: 'resolvedAddress' },\r\n      { type: 'address', name: 'reverseResolver' },\r\n      { type: 'address', name: 'resolver' },\r\n    ],\r\n  },\r\n] as const\r\n\r\nexport const textResolverAbi = [\r\n  {\r\n    name: 'text',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes32' },\r\n      { name: 'key', type: 'string' },\r\n    ],\r\n    outputs: [{ name: '', type: 'string' }],\r\n  },\r\n] as const\r\n\r\nexport const addressResolverAbi = [\r\n  {\r\n    name: 'addr',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [{ name: 'name', type: 'bytes32' }],\r\n    outputs: [{ name: '', type: 'address' }],\r\n  },\r\n  {\r\n    name: 'addr',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes32' },\r\n      { name: 'coinType', type: 'uint256' },\r\n    ],\r\n    outputs: [{ name: '', type: 'bytes' }],\r\n  },\r\n] as const\r\n\r\n// ERC-1271\r\n// isValidSignature(bytes32 hash, bytes signature) → bytes4 magicValue\r\n/** @internal */\r\nexport const smartAccountAbi = [\r\n  {\r\n    name: 'isValidSignature',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'hash', type: 'bytes32' },\r\n      { name: 'signature', type: 'bytes' },\r\n    ],\r\n    outputs: [{ name: '', type: 'bytes4' }],\r\n  },\r\n] as const\r\n\r\n// ERC-6492 - universal deployless signature validator contract\r\n// constructor(address _signer, bytes32 _hash, bytes _signature) → bytes4 returnValue\r\n// returnValue is either 0x1 (valid) or 0x0 (invalid)\r\nexport const universalSignatureValidatorAbi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        name: '_signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        name: '_signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: '_signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        name: '_signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n    name: 'isValidSig',\r\n  },\r\n] as const\r\n\r\n/** [ERC-20 Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20) */\r\nexport const erc20Abi = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'allowance',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'decimals',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transfer',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n] as const\r\n\r\n/**\r\n * [bytes32-flavored ERC-20](https://docs.makerdao.com/smart-contract-modules/mkr-module#4.-gotchas-potential-source-of-user-error)\r\n * for tokens (ie. Maker) that use bytes32 instead of string.\r\n */\r\nexport const erc20Abi_bytes32 = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'allowance',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'decimals',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transfer',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n] as const\r\n\r\n/** [ERC-721 Non-Fungible Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-721) */\r\nexport const erc721Abi = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'ApprovalForAll',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'getApproved',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'address',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'isApprovedForAll',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'ownerOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'safeTransferFrom',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'safeTransferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'setApprovalForAll',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenByIndex',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenByIndex',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenURI',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokeId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n] as const\r\n\r\n/** [ERC-4626 Tokenized Vaults Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-4626) */\r\nexport const erc4626Abi = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Deposit',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Withdraw',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'asset',\r\n    outputs: [\r\n      {\r\n        name: 'assetTokenAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'convertToAssets',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'convertToShares',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'deposit',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxDeposit',\r\n    outputs: [\r\n      {\r\n        name: 'maxAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxMint',\r\n    outputs: [\r\n      {\r\n        name: 'maxShares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxRedeem',\r\n    outputs: [\r\n      {\r\n        name: 'maxShares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxWithdraw',\r\n    outputs: [\r\n      {\r\n        name: 'maxAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'mint',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewDeposit',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewMint',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewRedeem',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewWithdraw',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'redeem',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalAssets',\r\n    outputs: [\r\n      {\r\n        name: 'totalManagedAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'withdraw',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n] as const\r\n", "export const aggregate3Signature = '0x82ad56cb'\r\n", "export const deploylessCallViaBytecodeBytecode =\r\n  '0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe'\r\n\r\nexport const deploylessCallViaFactoryBytecode =\r\n  '0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe'\r\n\r\nexport const universalSignatureValidatorByteCode =\r\n  '0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572'\r\n", "import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\r\n\r\nimport {\r\n  AbiFunctionNotFoundError,\r\n  type AbiFunctionNotFoundErrorType,\r\n  AbiFunctionOutputsNotFoundError,\r\n  type AbiFunctionOutputsNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  ContractFunctionReturnType,\r\n  Widen,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type DecodeAbiParametersErrorType,\r\n  decodeAbiParameters,\r\n} from './decodeAbiParameters.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/decodeFunctionResult'\r\n\r\nexport type DecodeFunctionResultParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n  data: Hex\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | undefined }\r\n      : { functionName: functionName | allFunctionNames }\r\n    : { functionName?: functionName | allFunctionNames | undefined }\r\n> &\r\n  UnionEvaluate<\r\n    readonly [] extends allArgs\r\n      ? {\r\n          args?:\r\n            | allArgs // show all options\r\n            // infer value, widen inferred value of `args` conditionally to match `allArgs`\r\n            | (abi extends Abi\r\n                ? args extends allArgs\r\n                  ? Widen<args>\r\n                  : never\r\n                : never)\r\n            | undefined\r\n        }\r\n      : {\r\n          args?:\r\n            | allArgs // show all options\r\n            | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\r\n            | undefined\r\n        }\r\n  > &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type DecodeFunctionResultReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n> = ContractFunctionReturnType<\r\n  abi,\r\n  AbiStateMutability,\r\n  functionName extends ContractFunctionName<abi>\r\n    ? functionName\r\n    : ContractFunctionName<abi>,\r\n  args\r\n>\r\n\r\nexport type DecodeFunctionResultErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | AbiFunctionOutputsNotFoundErrorType\r\n  | DecodeAbiParametersErrorType\r\n  | GetAbiItemErrorType\r\n  | ErrorType\r\n\r\nexport function decodeFunctionResult<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n  const args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n>(\r\n  parameters: DecodeFunctionResultParameters<abi, functionName, args>,\r\n): DecodeFunctionResultReturnType<abi, functionName, args> {\r\n  const { abi, args, functionName, data } =\r\n    parameters as DecodeFunctionResultParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (functionName) {\r\n    const item = getAbiItem({ abi, args, name: functionName })\r\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'function')\r\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\r\n  if (!abiItem.outputs)\r\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\r\n\r\n  const values = decodeAbiParameters(abiItem.outputs, data)\r\n  if (values && values.length > 1)\r\n    return values as DecodeFunctionResultReturnType<abi, functionName, args>\r\n  if (values && values.length === 1)\r\n    return values[0] as DecodeFunctionResultReturnType<abi, functionName, args>\r\n  return undefined as DecodeFunctionResultReturnType<abi, functionName, args>\r\n}\r\n", "import type { Abi } from 'abitype'\r\n\r\nimport {\r\n  AbiConstructorNotFoundError,\r\n  type AbiConstructorNotFoundErrorType,\r\n  AbiConstructorParamsNotFoundError,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ContractConstructorArgs } from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { UnionEvaluate } from '../../types/utils.js'\r\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\n\r\nconst docsPath = '/docs/contract/encodeDeployData'\r\n\r\nexport type EncodeDeployDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  ///\r\n  hasConstructor = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [Extract<abi[number], { type: 'constructor' }>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractConstructorArgs<abi>,\r\n> = {\r\n  abi: abi\r\n  bytecode: Hex\r\n} & UnionEvaluate<\r\n  hasConstructor extends false\r\n    ? { args?: undefined }\r\n    : readonly [] extends allArgs\r\n      ? { args?: allArgs | undefined }\r\n      : { args: allArgs }\r\n>\r\n\r\nexport type EncodeDeployDataReturnType = Hex\r\n\r\nexport type EncodeDeployDataErrorType =\r\n  | AbiConstructorNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | ErrorType\r\n\r\nexport function encodeDeployData<const abi extends Abi | readonly unknown[]>(\r\n  parameters: EncodeDeployDataParameters<abi>,\r\n): EncodeDeployDataReturnType {\r\n  const { abi, args, bytecode } = parameters as EncodeDeployDataParameters\r\n  if (!args || args.length === 0) return bytecode\r\n\r\n  const description = abi.find((x) => 'type' in x && x.type === 'constructor')\r\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\r\n  if (!('inputs' in description))\r\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\r\n  if (!description.inputs || description.inputs.length === 0)\r\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\r\n\r\n  const data = encodeAbiParameters(description.inputs, args)\r\n  return concatHex([bytecode, data!])\r\n}\r\n", "import type {\r\n  Abi,\r\n  AbiStateMutability,\r\n  ExtractAbiFunction,\r\n  ExtractAbiFunctions,\r\n} from 'abitype'\r\n\r\nimport {\r\n  AbiFunctionNotFoundError,\r\n  type AbiFunctionNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport type { ConcatHexErrorType } from '../data/concat.js'\r\nimport {\r\n  type ToFunctionSelectorErrorType,\r\n  toFunctionSelector,\r\n} from '../hash/toFunctionSelector.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/encodeFunctionData'\r\n\r\nexport type PrepareEncodeFunctionDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n      : { functionName: functionName | allFunctionNames | Hex }\r\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n> &\r\n  UnionEvaluate<{ args?: allArgs | undefined }> &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type PrepareEncodeFunctionDataReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi extends Abi\r\n    ? functionName extends ContractFunctionName<abi>\r\n      ? [ExtractAbiFunction<abi, functionName>]\r\n      : abi\r\n    : Abi\r\n  functionName: Hex\r\n}\r\n\r\nexport type PrepareEncodeFunctionDataErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | FormatAbiItemErrorType\r\n  | GetAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function prepareEncodeFunctionData<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n>(\r\n  parameters: PrepareEncodeFunctionDataParameters<abi, functionName>,\r\n): PrepareEncodeFunctionDataReturnType<abi, functionName> {\r\n  const { abi, args, functionName } =\r\n    parameters as PrepareEncodeFunctionDataParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (functionName) {\r\n    const item = getAbiItem({\r\n      abi,\r\n      args,\r\n      name: functionName,\r\n    })\r\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'function')\r\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\r\n\r\n  return {\r\n    abi: [abiItem],\r\n    functionName: toFunctionSelector(formatAbiItem(abiItem)),\r\n  } as unknown as PrepareEncodeFunctionDataReturnType<abi, functionName>\r\n}\r\n", "import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\r\n\r\nimport type { AbiFunctionNotFoundErrorType } from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\r\nimport type { ToFunctionSelectorErrorType } from '../hash/toFunctionSelector.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\nimport type { FormatAbiItemErrorType } from './formatAbiItem.js'\r\nimport type { GetAbiItemErrorType } from './getAbiItem.js'\r\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js'\r\n\r\nexport type EncodeFunctionDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | Hex\r\n    | undefined = ContractFunctionName<abi>,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n      : { functionName: functionName | allFunctionNames | Hex }\r\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n> &\r\n  UnionEvaluate<\r\n    readonly [] extends allArgs\r\n      ? { args?: allArgs | undefined }\r\n      : { args: allArgs }\r\n  > &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type EncodeFunctionDataReturnType = Hex\r\n\r\nexport type EncodeFunctionDataErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | FormatAbiItemErrorType\r\n  | GetAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function encodeFunctionData<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n>(\r\n  parameters: EncodeFunctionDataParameters<abi, functionName>,\r\n): EncodeFunctionDataReturnType {\r\n  const { args } = parameters as EncodeFunctionDataParameters\r\n\r\n  const { abi, functionName } = (() => {\r\n    if (\r\n      parameters.abi.length === 1 &&\r\n      parameters.functionName?.startsWith('0x')\r\n    )\r\n      return parameters as { abi: Abi; functionName: Hex }\r\n    return prepareEncodeFunctionData(parameters)\r\n  })()\r\n\r\n  const abiItem = abi[0]\r\n  const signature = functionName\r\n\r\n  const data =\r\n    'inputs' in abiItem && abiItem.inputs\r\n      ? encodeAbiParameters(abiItem.inputs, args ?? [])\r\n      : undefined\r\n  return concatHex([signature, data ?? '0x'])\r\n}\r\n", "/** @internal */\r\nexport type PromiseWithResolvers<type> = {\r\n  promise: Promise<type>\r\n  resolve: (value: type | PromiseLike<type>) => void\r\n  reject: (reason?: unknown) => void\r\n}\r\n\r\n/** @internal */\r\nexport function withResolvers<type>(): PromiseWithResolvers<type> {\r\n  let resolve: PromiseWithResolvers<type>['resolve'] = () => undefined\r\n  let reject: PromiseWithResolvers<type>['reject'] = () => undefined\r\n\r\n  const promise = new Promise<type>((resolve_, reject_) => {\r\n    resolve = resolve_\r\n    reject = reject_\r\n  })\r\n\r\n  return { promise, resolve, reject }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport { type PromiseWithResolvers, withResolvers } from './withResolvers.js'\r\n\r\ntype Resolved<returnType extends readonly unknown[] = any> = [\r\n  result: returnType[number],\r\n  results: returnType,\r\n]\r\n\r\ntype SchedulerItem = {\r\n  args: unknown\r\n  resolve: PromiseWithResolvers<unknown>['resolve']\r\n  reject: PromiseWithResolvers<unknown>['reject']\r\n}\r\n\r\ntype BatchResultsCompareFn<result = unknown> = (a: result, b: result) => number\r\n\r\ntype CreateBatchSchedulerArguments<\r\n  parameters = unknown,\r\n  returnType extends readonly unknown[] = readonly unknown[],\r\n> = {\r\n  fn: (args: parameters[]) => Promise<returnType>\r\n  id: number | string\r\n  shouldSplitBatch?: ((args: parameters[]) => boolean) | undefined\r\n  wait?: number | undefined\r\n  sort?: BatchResultsCompareFn<returnType[number]> | undefined\r\n}\r\n\r\ntype CreateBatchSchedulerReturnType<\r\n  parameters = unknown,\r\n  returnType extends readonly unknown[] = readonly unknown[],\r\n> = {\r\n  flush: () => void\r\n  schedule: parameters extends undefined\r\n    ? (args?: parameters | undefined) => Promise<Resolved<returnType>>\r\n    : (args: parameters) => Promise<Resolved<returnType>>\r\n}\r\n\r\nexport type CreateBatchSchedulerErrorType = ErrorType\r\n\r\nconst schedulerCache = /*#__PURE__*/ new Map<number | string, SchedulerItem[]>()\r\n\r\n/** @internal */\r\nexport function createBatchScheduler<\r\n  parameters,\r\n  returnType extends readonly unknown[],\r\n>({\r\n  fn,\r\n  id,\r\n  shouldSplitBatch,\r\n  wait = 0,\r\n  sort,\r\n}: CreateBatchSchedulerArguments<\r\n  parameters,\r\n  returnType\r\n>): CreateBatchSchedulerReturnType<parameters, returnType> {\r\n  const exec = async () => {\r\n    const scheduler = getScheduler()\r\n    flush()\r\n\r\n    const args = scheduler.map(({ args }) => args)\r\n\r\n    if (args.length === 0) return\r\n\r\n    fn(args as parameters[])\r\n      .then((data) => {\r\n        if (sort && Array.isArray(data)) data.sort(sort)\r\n        for (let i = 0; i < scheduler.length; i++) {\r\n          const { resolve } = scheduler[i]\r\n          resolve?.([data[i], data])\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        for (let i = 0; i < scheduler.length; i++) {\r\n          const { reject } = scheduler[i]\r\n          reject?.(err)\r\n        }\r\n      })\r\n  }\r\n\r\n  const flush = () => schedulerCache.delete(id)\r\n\r\n  const getBatchedArgs = () =>\r\n    getScheduler().map(({ args }) => args) as parameters[]\r\n\r\n  const getScheduler = () => schedulerCache.get(id) || []\r\n\r\n  const setScheduler = (item: SchedulerItem) =>\r\n    schedulerCache.set(id, [...getScheduler(), item])\r\n\r\n  return {\r\n    flush,\r\n    async schedule(args: parameters) {\r\n      const { promise, resolve, reject } = withResolvers()\r\n\r\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args])\r\n\r\n      if (split) exec()\r\n\r\n      const hasActiveScheduler = getScheduler().length > 0\r\n      if (hasActiveScheduler) {\r\n        setScheduler({ args, resolve, reject })\r\n        return promise\r\n      }\r\n\r\n      setScheduler({ args, resolve, reject })\r\n      setTimeout(exec, wait)\r\n      return promise\r\n    },\r\n  } as unknown as CreateBatchSchedulerReturnType<parameters, returnType>\r\n}\r\n", "import {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../errors/address.js'\r\nimport {\r\n  InvalidBytesLengthError,\r\n  type InvalidBytesLengthErrorType,\r\n} from '../errors/data.js'\r\nimport {\r\n  AccountStateConflictError,\r\n  type AccountStateConflictErrorType,\r\n  StateAssignmentConflictError,\r\n  type StateAssignmentConflictErrorType,\r\n} from '../errors/stateOverride.js'\r\nimport type {\r\n  RpcAccountStateOverride,\r\n  RpcStateMapping,\r\n  RpcStateOverride,\r\n} from '../types/rpc.js'\r\nimport type { StateMapping, StateOverride } from '../types/stateOverride.js'\r\nimport { isAddress } from './address/isAddress.js'\r\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\r\n\r\ntype SerializeStateMappingParameters = StateMapping | undefined\r\n\r\ntype SerializeStateMappingErrorType = InvalidBytesLengthErrorType\r\n\r\n/** @internal */\r\nexport function serializeStateMapping(\r\n  stateMapping: SerializeStateMappingParameters,\r\n): RpcStateMapping | undefined {\r\n  if (!stateMapping || stateMapping.length === 0) return undefined\r\n  return stateMapping.reduce((acc, { slot, value }) => {\r\n    if (slot.length !== 66)\r\n      throw new InvalidBytesLengthError({\r\n        size: slot.length,\r\n        targetSize: 66,\r\n        type: 'hex',\r\n      })\r\n    if (value.length !== 66)\r\n      throw new InvalidBytesLengthError({\r\n        size: value.length,\r\n        targetSize: 66,\r\n        type: 'hex',\r\n      })\r\n    acc[slot] = value\r\n    return acc\r\n  }, {} as RpcStateMapping)\r\n}\r\n\r\ntype SerializeAccountStateOverrideParameters = Omit<\r\n  StateOverride[number],\r\n  'address'\r\n>\r\n\r\ntype SerializeAccountStateOverrideErrorType =\r\n  | NumberToHexErrorType\r\n  | StateAssignmentConflictErrorType\r\n  | SerializeStateMappingErrorType\r\n\r\n/** @internal */\r\nexport function serializeAccountStateOverride(\r\n  parameters: SerializeAccountStateOverrideParameters,\r\n): RpcAccountStateOverride {\r\n  const { balance, nonce, state, stateDiff, code } = parameters\r\n  const rpcAccountStateOverride: RpcAccountStateOverride = {}\r\n  if (code !== undefined) rpcAccountStateOverride.code = code\r\n  if (balance !== undefined)\r\n    rpcAccountStateOverride.balance = numberToHex(balance)\r\n  if (nonce !== undefined) rpcAccountStateOverride.nonce = numberToHex(nonce)\r\n  if (state !== undefined)\r\n    rpcAccountStateOverride.state = serializeStateMapping(state)\r\n  if (stateDiff !== undefined) {\r\n    if (rpcAccountStateOverride.state) throw new StateAssignmentConflictError()\r\n    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff)\r\n  }\r\n  return rpcAccountStateOverride\r\n}\r\n\r\ntype SerializeStateOverrideParameters = StateOverride | undefined\r\n\r\nexport type SerializeStateOverrideErrorType =\r\n  | InvalidAddressErrorType\r\n  | AccountStateConflictErrorType\r\n  | SerializeAccountStateOverrideErrorType\r\n\r\n/** @internal */\r\nexport function serializeStateOverride(\r\n  parameters?: SerializeStateOverrideParameters,\r\n): RpcStateOverride | undefined {\r\n  if (!parameters) return undefined\r\n  const rpcStateOverride: RpcStateOverride = {}\r\n  for (const { address, ...accountState } of parameters) {\r\n    if (!isAddress(address, { strict: false }))\r\n      throw new InvalidAddressError({ address })\r\n    if (rpcStateOverride[address])\r\n      throw new AccountStateConflictError({ address: address })\r\n    rpcStateOverride[address] = serializeAccountStateOverride(accountState)\r\n  }\r\n  return rpcStateOverride\r\n}\r\n", "import { type Address, parseAbi } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { multicall3Abi } from '../../constants/abis.js'\r\nimport { aggregate3Signature } from '../../constants/contract.js'\r\nimport {\r\n  deploylessCallViaBytecodeBytecode,\r\n  deploylessCallViaFactoryBytecode,\r\n} from '../../constants/contracts.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport {\r\n  ChainDoesNotSupportContract,\r\n  ClientChainNotConfiguredError,\r\n} from '../../errors/chain.js'\r\nimport {\r\n  CounterfactualDeploymentFailedError,\r\n  RawContractError,\r\n  type RawContractErrorType,\r\n} from '../../errors/contract.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\r\nimport type { StateOverride } from '../../types/stateOverride.js'\r\nimport type { TransactionRequest } from '../../types/transaction.js'\r\nimport type { ExactPartial, UnionOmit } from '../../types/utils.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeDeployDataErrorType,\r\n  encodeDeployData,\r\n} from '../../utils/abi/encodeDeployData.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type GetCallErrorReturnType,\r\n  getCallError,\r\n} from '../../utils/errors/getCallError.js'\r\nimport { extract } from '../../utils/formatters/extract.js'\r\nimport {\r\n  type FormatTransactionRequestErrorType,\r\n  type FormattedTransactionRequest,\r\n  formatTransactionRequest,\r\n} from '../../utils/formatters/transactionRequest.js'\r\nimport {\r\n  type CreateBatchSchedulerErrorType,\r\n  createBatchScheduler,\r\n} from '../../utils/promise/createBatchScheduler.js'\r\nimport {\r\n  type SerializeStateOverrideErrorType,\r\n  serializeStateOverride,\r\n} from '../../utils/stateOverride.js'\r\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\r\nimport type {\r\n  AssertRequestErrorType,\r\n  AssertRequestParameters,\r\n} from '../../utils/transaction/assertRequest.js'\r\n\r\nexport type CallParameters<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = UnionOmit<FormattedCall<chain>, 'from'> & {\r\n  /** Account attached to the call (msg.sender). */\r\n  account?: Account | Address | undefined\r\n  /** Whether or not to enable multicall batching on this call. */\r\n  batch?: boolean | undefined\r\n  /** Bytecode to perform the call on. */\r\n  code?: Hex | undefined\r\n  /** Contract deployment factory address (ie. Create2 factory, Smart Account factory, etc). */\r\n  factory?: Address | undefined\r\n  /** Calldata to execute on the factory to deploy the contract. */\r\n  factoryData?: Hex | undefined\r\n  /** State overrides for the call. */\r\n  stateOverride?: StateOverride | undefined\r\n} & (\r\n    | {\r\n        /** The balance of the account at a block number. */\r\n        blockNumber?: bigint | undefined\r\n        blockTag?: undefined\r\n      }\r\n    | {\r\n        blockNumber?: undefined\r\n        /**\r\n         * The balance of the account at a block tag.\r\n         * @default 'latest'\r\n         */\r\n        blockTag?: BlockTag | undefined\r\n      }\r\n  )\r\ntype FormattedCall<chain extends Chain | undefined = Chain | undefined> =\r\n  FormattedTransactionRequest<chain>\r\n\r\nexport type CallReturnType = { data: Hex | undefined }\r\n\r\nexport type CallErrorType = GetCallErrorReturnType<\r\n  | ParseAccountErrorType\r\n  | SerializeStateOverrideErrorType\r\n  | AssertRequestErrorType\r\n  | NumberToHexErrorType\r\n  | FormatTransactionRequestErrorType\r\n  | ScheduleMulticallErrorType\r\n  | RequestErrorType\r\n  | ToDeploylessCallViaBytecodeDataErrorType\r\n  | ToDeploylessCallViaFactoryDataErrorType\r\n>\r\n\r\n/**\r\n * Executes a new message call immediately without submitting a transaction to the network.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/call\r\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link CallParameters}\r\n * @returns The call data. {@link CallReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { call } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const data = await call(client, {\r\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\r\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n * })\r\n */\r\nexport async function call<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  args: CallParameters<chain>,\r\n): Promise<CallReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    batch = Boolean(client.batch?.multicall),\r\n    blockNumber,\r\n    blockTag = 'latest',\r\n    accessList,\r\n    blobs,\r\n    code,\r\n    data: data_,\r\n    factory,\r\n    factoryData,\r\n    gas,\r\n    gasPrice,\r\n    maxFeePerBlobGas,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n    nonce,\r\n    to,\r\n    value,\r\n    stateOverride,\r\n    ...rest\r\n  } = args\r\n  const account = account_ ? parseAccount(account_) : undefined\r\n\r\n  if (code && (factory || factoryData))\r\n    throw new BaseError(\r\n      'Cannot provide both `code` & `factory`/`factoryData` as parameters.',\r\n    )\r\n  if (code && to)\r\n    throw new BaseError('Cannot provide both `code` & `to` as parameters.')\r\n\r\n  // Check if the call is deployless via bytecode.\r\n  const deploylessCallViaBytecode = code && data_\r\n  // Check if the call is deployless via a factory.\r\n  const deploylessCallViaFactory = factory && factoryData && to && data_\r\n  const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory\r\n\r\n  const data = (() => {\r\n    if (deploylessCallViaBytecode)\r\n      return toDeploylessCallViaBytecodeData({\r\n        code,\r\n        data: data_,\r\n      })\r\n    if (deploylessCallViaFactory)\r\n      return toDeploylessCallViaFactoryData({\r\n        data: data_,\r\n        factory,\r\n        factoryData,\r\n        to,\r\n      })\r\n    return data_\r\n  })()\r\n\r\n  try {\r\n    assertRequest(args as AssertRequestParameters)\r\n\r\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\r\n    const block = blockNumberHex || blockTag\r\n\r\n    const rpcStateOverride = serializeStateOverride(stateOverride)\r\n\r\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\r\n    const format = chainFormat || formatTransactionRequest\r\n\r\n    const request = format({\r\n      // Pick out extra data that might exist on the chain's transaction request type.\r\n      ...extract(rest, { format: chainFormat }),\r\n      from: account?.address,\r\n      accessList,\r\n      blobs,\r\n      data,\r\n      gas,\r\n      gasPrice,\r\n      maxFeePerBlobGas,\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas,\r\n      nonce,\r\n      to: deploylessCall ? undefined : to,\r\n      value,\r\n    } as TransactionRequest) as TransactionRequest\r\n\r\n    if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {\r\n      try {\r\n        return await scheduleMulticall(client, {\r\n          ...request,\r\n          blockNumber,\r\n          blockTag,\r\n        } as unknown as ScheduleMulticallParameters<chain>)\r\n      } catch (err) {\r\n        if (\r\n          !(err instanceof ClientChainNotConfiguredError) &&\r\n          !(err instanceof ChainDoesNotSupportContract)\r\n        )\r\n          throw err\r\n      }\r\n    }\r\n\r\n    const response = await client.request({\r\n      method: 'eth_call',\r\n      params: rpcStateOverride\r\n        ? [\r\n            request as ExactPartial<RpcTransactionRequest>,\r\n            block,\r\n            rpcStateOverride,\r\n          ]\r\n        : [request as ExactPartial<RpcTransactionRequest>, block],\r\n    })\r\n    if (response === '0x') return { data: undefined }\r\n    return { data: response }\r\n  } catch (err) {\r\n    const data = getRevertErrorData(err)\r\n\r\n    // Check for CCIP-Read offchain lookup signature.\r\n    const { offchainLookup, offchainLookupSignature } = await import(\r\n      '../../utils/ccip.js'\r\n    )\r\n    if (\r\n      client.ccipRead !== false &&\r\n      data?.slice(0, 10) === offchainLookupSignature &&\r\n      to\r\n    )\r\n      return { data: await offchainLookup(client, { data, to }) }\r\n\r\n    // Check for counterfactual deployment error.\r\n    if (deploylessCall && data?.slice(0, 10) === '0x101bb98d')\r\n      throw new CounterfactualDeploymentFailedError({ factory })\r\n\r\n    throw getCallError(err as ErrorType, {\r\n      ...args,\r\n      account,\r\n      chain: client.chain,\r\n    })\r\n  }\r\n}\r\n\r\n// We only want to perform a scheduled multicall if:\r\n// - The request has calldata,\r\n// - The request has a target address,\r\n// - The target address is not already the aggregate3 signature,\r\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\r\nfunction shouldPerformMulticall({ request }: { request: TransactionRequest }) {\r\n  const { data, to, ...request_ } = request\r\n  if (!data) return false\r\n  if (data.startsWith(aggregate3Signature)) return false\r\n  if (!to) return false\r\n  if (\r\n    Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0\r\n  )\r\n    return false\r\n  return true\r\n}\r\n\r\ntype ScheduleMulticallParameters<chain extends Chain | undefined> = Pick<\r\n  CallParameters<chain>,\r\n  'blockNumber' | 'blockTag'\r\n> & {\r\n  data: Hex\r\n  multicallAddress?: Address | undefined\r\n  to: Address\r\n}\r\n\r\ntype ScheduleMulticallErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | NumberToHexErrorType\r\n  | CreateBatchSchedulerErrorType\r\n  | EncodeFunctionDataErrorType\r\n  | DecodeFunctionResultErrorType\r\n  | RawContractErrorType\r\n  | ErrorType\r\n\r\nasync function scheduleMulticall<chain extends Chain | undefined>(\r\n  client: Client<Transport>,\r\n  args: ScheduleMulticallParameters<chain>,\r\n) {\r\n  const { batchSize = 1024, wait = 0 } =\r\n    typeof client.batch?.multicall === 'object' ? client.batch.multicall : {}\r\n  const {\r\n    blockNumber,\r\n    blockTag = 'latest',\r\n    data,\r\n    multicallAddress: multicallAddress_,\r\n    to,\r\n  } = args\r\n\r\n  let multicallAddress = multicallAddress_\r\n  if (!multicallAddress) {\r\n    if (!client.chain) throw new ClientChainNotConfiguredError()\r\n\r\n    multicallAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'multicall3',\r\n    })\r\n  }\r\n\r\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\r\n  const block = blockNumberHex || blockTag\r\n\r\n  const { schedule } = createBatchScheduler({\r\n    id: `${client.uid}.${block}`,\r\n    wait,\r\n    shouldSplitBatch(args) {\r\n      const size = args.reduce((size, { data }) => size + (data.length - 2), 0)\r\n      return size > batchSize * 2\r\n    },\r\n    fn: async (\r\n      requests: {\r\n        data: Hex\r\n        to: Address\r\n      }[],\r\n    ) => {\r\n      const calls = requests.map((request) => ({\r\n        allowFailure: true,\r\n        callData: request.data,\r\n        target: request.to,\r\n      }))\r\n\r\n      const calldata = encodeFunctionData({\r\n        abi: multicall3Abi,\r\n        args: [calls],\r\n        functionName: 'aggregate3',\r\n      })\r\n\r\n      const data = await client.request({\r\n        method: 'eth_call',\r\n        params: [\r\n          {\r\n            data: calldata,\r\n            to: multicallAddress,\r\n          },\r\n          block,\r\n        ],\r\n      })\r\n\r\n      return decodeFunctionResult({\r\n        abi: multicall3Abi,\r\n        args: [calls],\r\n        functionName: 'aggregate3',\r\n        data: data || '0x',\r\n      })\r\n    },\r\n  })\r\n\r\n  const [{ returnData, success }] = await schedule({ data, to })\r\n\r\n  if (!success) throw new RawContractError({ data: returnData })\r\n  if (returnData === '0x') return { data: undefined }\r\n  return { data: returnData }\r\n}\r\n\r\ntype ToDeploylessCallViaBytecodeDataErrorType =\r\n  | EncodeDeployDataErrorType\r\n  | ErrorType\r\n\r\nfunction toDeploylessCallViaBytecodeData(parameters: {\r\n  code: Hex\r\n  data: Hex\r\n}) {\r\n  const { code, data } = parameters\r\n  return encodeDeployData({\r\n    abi: parseAbi(['constructor(bytes, bytes)']),\r\n    bytecode: deploylessCallViaBytecodeBytecode,\r\n    args: [code, data],\r\n  })\r\n}\r\n\r\ntype ToDeploylessCallViaFactoryDataErrorType =\r\n  | EncodeDeployDataErrorType\r\n  | ErrorType\r\n\r\nfunction toDeploylessCallViaFactoryData(parameters: {\r\n  data: Hex\r\n  factory: Address\r\n  factoryData: Hex\r\n  to: Address\r\n}) {\r\n  const { data, factory, factoryData, to } = parameters\r\n  return encodeDeployData({\r\n    abi: parseAbi(['constructor(address, bytes, address, bytes)']),\r\n    bytecode: deploylessCallViaFactoryBytecode,\r\n    args: [to, data, factory, factoryData],\r\n  })\r\n}\r\n\r\n/** @internal */\r\nexport type GetRevertErrorDataErrorType = ErrorType\r\n\r\n/** @internal */\r\nexport function getRevertErrorData(err: unknown) {\r\n  if (!(err instanceof BaseError)) return undefined\r\n  const error = err.walk() as RawContractError\r\n  return typeof error?.data === 'object' ? error.data?.data : error.data\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Hex } from '../types/misc.js'\r\nimport { stringify } from '../utils/stringify.js'\r\n\r\nimport { BaseError } from './base.js'\r\nimport { getUrl } from './utils.js'\r\n\r\nexport type OffchainLookupErrorType = OffchainLookupError & {\r\n  name: 'OffchainLookupError'\r\n}\r\nexport class OffchainLookupError extends BaseError {\r\n  constructor({\r\n    callbackSelector,\r\n    cause,\r\n    data,\r\n    extraData,\r\n    sender,\r\n    urls,\r\n  }: {\r\n    callbackSelector: Hex\r\n    cause: BaseError\r\n    data: Hex\r\n    extraData: Hex\r\n    sender: Address\r\n    urls: readonly string[]\r\n  }) {\r\n    super(\r\n      cause.shortMessage ||\r\n        'An error occurred while fetching for an offchain result.',\r\n      {\r\n        cause,\r\n        metaMessages: [\r\n          ...(cause.metaMessages || []),\r\n          cause.metaMessages?.length ? '' : [],\r\n          'Offchain Gateway Call:',\r\n          urls && [\r\n            '  Gateway URL(s):',\r\n            ...urls.map((url) => `    ${getUrl(url)}`),\r\n          ],\r\n          `  Sender: ${sender}`,\r\n          `  Data: ${data}`,\r\n          `  Callback selector: ${callbackSelector}`,\r\n          `  Extra data: ${extraData}`,\r\n        ].flat(),\r\n        name: 'OffchainLookupError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type OffchainLookupResponseMalformedErrorType =\r\n  OffchainLookupResponseMalformedError & {\r\n    name: 'OffchainLookupResponseMalformedError'\r\n  }\r\nexport class OffchainLookupResponseMalformedError extends BaseError {\r\n  constructor({ result, url }: { result: any; url: string }) {\r\n    super(\r\n      'Offchain gateway response is malformed. Response data must be a hex value.',\r\n      {\r\n        metaMessages: [\r\n          `Gateway URL: ${getUrl(url)}`,\r\n          `Response: ${stringify(result)}`,\r\n        ],\r\n        name: 'OffchainLookupResponseMalformedError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport type OffchainLookupSenderMismatchErrorType =\r\n  OffchainLookupSenderMismatchError & {\r\n    name: 'OffchainLookupSenderMismatchError'\r\n  }\r\nexport class OffchainLookupSenderMismatchError extends BaseError {\r\n  constructor({ sender, to }: { sender: Address; to: Address }) {\r\n    super(\r\n      'Reverted sender address does not match target contract address (`to`).',\r\n      {\r\n        metaMessages: [\r\n          `Contract address: ${to}`,\r\n          `OffchainLookup sender address: ${sender}`,\r\n        ],\r\n        name: 'OffchainLookupSenderMismatchError',\r\n      },\r\n    )\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../../errors/address.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { isAddress } from './isAddress.js'\r\n\r\nexport type IsAddressEqualReturnType = boolean\r\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\r\n\r\nexport function isAddressEqual(a: Address, b: Address) {\r\n  if (!isAddress(a, { strict: false }))\r\n    throw new InvalidAddressError({ address: a })\r\n  if (!isAddress(b, { strict: false }))\r\n    throw new InvalidAddressError({ address: b })\r\n  return a.toLowerCase() === b.toLowerCase()\r\n}\r\n", "import type { Abi, Address } from 'abitype'\r\n\r\nimport { type CallParameters, call } from '../actions/public/call.js'\r\nimport type { Transport } from '../clients/transports/createTransport.js'\r\nimport type { BaseError } from '../errors/base.js'\r\nimport {\r\n  OffchainLookupError,\r\n  type OffchainLookupErrorType as OffchainLookupErrorType_,\r\n  OffchainLookupResponseMalformedError,\r\n  type OffchainLookupResponseMalformedErrorType,\r\n  OffchainLookupSenderMismatchError,\r\n} from '../errors/ccip.js'\r\nimport {\r\n  HttpRequestError,\r\n  type HttpRequestErrorType,\r\n} from '../errors/request.js'\r\nimport type { Chain } from '../types/chain.js'\r\nimport type { Hex } from '../types/misc.js'\r\n\r\nimport type { Client } from '../clients/createClient.js'\r\nimport type { ErrorType } from '../errors/utils.js'\r\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\r\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\r\nimport { isAddressEqual } from './address/isAddressEqual.js'\r\nimport { concat } from './data/concat.js'\r\nimport { isHex } from './data/isHex.js'\r\nimport { stringify } from './stringify.js'\r\n\r\nexport const offchainLookupSignature = '0x556f1830'\r\nexport const offchainLookupAbiItem = {\r\n  name: 'OffchainLookup',\r\n  type: 'error',\r\n  inputs: [\r\n    {\r\n      name: 'sender',\r\n      type: 'address',\r\n    },\r\n    {\r\n      name: 'urls',\r\n      type: 'string[]',\r\n    },\r\n    {\r\n      name: 'callData',\r\n      type: 'bytes',\r\n    },\r\n    {\r\n      name: 'callbackFunction',\r\n      type: 'bytes4',\r\n    },\r\n    {\r\n      name: 'extraData',\r\n      type: 'bytes',\r\n    },\r\n  ],\r\n} as const satisfies Abi[number]\r\n\r\nexport type OffchainLookupErrorType = OffchainLookupErrorType_ | ErrorType\r\n\r\nexport async function offchainLookup<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockNumber,\r\n    blockTag,\r\n    data,\r\n    to,\r\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\r\n    data: Hex\r\n    to: Address\r\n  },\r\n): Promise<Hex> {\r\n  const { args } = decodeErrorResult({\r\n    data,\r\n    abi: [offchainLookupAbiItem],\r\n  })\r\n  const [sender, urls, callData, callbackSelector, extraData] = args\r\n\r\n  const { ccipRead } = client\r\n  const ccipRequest_ =\r\n    ccipRead && typeof ccipRead?.request === 'function'\r\n      ? ccipRead.request\r\n      : ccipRequest\r\n\r\n  try {\r\n    if (!isAddressEqual(to, sender))\r\n      throw new OffchainLookupSenderMismatchError({ sender, to })\r\n\r\n    const result = await ccipRequest_({ data: callData, sender, urls })\r\n\r\n    const { data: data_ } = await call(client, {\r\n      blockNumber,\r\n      blockTag,\r\n      data: concat([\r\n        callbackSelector,\r\n        encodeAbiParameters(\r\n          [{ type: 'bytes' }, { type: 'bytes' }],\r\n          [result, extraData],\r\n        ),\r\n      ]),\r\n      to,\r\n    } as CallParameters)\r\n\r\n    return data_!\r\n  } catch (err) {\r\n    throw new OffchainLookupError({\r\n      callbackSelector,\r\n      cause: err as BaseError,\r\n      data,\r\n      extraData,\r\n      sender,\r\n      urls,\r\n    })\r\n  }\r\n}\r\n\r\nexport type CcipRequestParameters = {\r\n  data: Hex\r\n  sender: Address\r\n  urls: readonly string[]\r\n}\r\n\r\nexport type CcipRequestReturnType = Hex\r\n\r\nexport type CcipRequestErrorType =\r\n  | HttpRequestErrorType\r\n  | OffchainLookupResponseMalformedErrorType\r\n  | ErrorType\r\n\r\nexport async function ccipRequest({\r\n  data,\r\n  sender,\r\n  urls,\r\n}: CcipRequestParameters): Promise<CcipRequestReturnType> {\r\n  let error = new Error('An unknown error occurred.')\r\n\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const method = url.includes('{data}') ? 'GET' : 'POST'\r\n    const body = method === 'POST' ? { data, sender } : undefined\r\n    const headers: HeadersInit =\r\n      method === 'POST' ? { 'Content-Type': 'application/json' } : {}\r\n\r\n    try {\r\n      const response = await fetch(\r\n        url.replace('{sender}', sender.toLowerCase()).replace('{data}', data),\r\n        {\r\n          body: JSON.stringify(body),\r\n          headers,\r\n          method,\r\n        },\r\n      )\r\n\r\n      let result: any\r\n      if (\r\n        response.headers.get('Content-Type')?.startsWith('application/json')\r\n      ) {\r\n        result = (await response.json()).data\r\n      } else {\r\n        result = (await response.text()) as any\r\n      }\r\n\r\n      if (!response.ok) {\r\n        error = new HttpRequestError({\r\n          body,\r\n          details: result?.error\r\n            ? stringify(result.error)\r\n            : response.statusText,\r\n          headers: response.headers,\r\n          status: response.status,\r\n          url,\r\n        })\r\n        continue\r\n      }\r\n\r\n      if (!isHex(result)) {\r\n        error = new OffchainLookupResponseMalformedError({\r\n          result,\r\n          url,\r\n        })\r\n        continue\r\n      }\r\n\r\n      return result\r\n    } catch (err) {\r\n      error = new HttpRequestError({\r\n        body,\r\n        details: (err as Error).message,\r\n        url,\r\n      })\r\n    }\r\n  }\r\n\r\n  throw error\r\n}\r\n"],
  "mappings": "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",
  "names": ["docsPath", "docsPath", "args", "data", "offchainLookup", "offchainLookupSignature", "args", "size"]
}
