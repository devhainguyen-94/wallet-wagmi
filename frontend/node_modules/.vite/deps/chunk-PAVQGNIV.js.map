{
  "version": 3,
  "sources": ["../../@noble/hashes/src/crypto.ts", "../../@noble/hashes/src/_assert.ts", "../../@noble/hashes/src/utils.ts"],
  "sourcesContent": ["/**\r\n * Internal webcrypto alias.\r\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n * See utils.ts for details.\r\n * @module\r\n */\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto: any =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/**\r\n * Internal assertion helpers.\r\n * @module\r\n */\r\n\r\n/** Asserts something is positive integer. */\r\nfunction anumber(n: number): void {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\r\n}\r\n\r\n/** Is number an Uint8Array? Copied from utils for perf. */\r\nfunction isBytes(a: unknown): a is Uint8Array {\r\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\r\n}\r\n\r\n/** Asserts something is Uint8Array. */\r\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\r\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\r\n}\r\n\r\n/** Hash interface. */\r\nexport type Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\n\r\n/** Asserts something is hash */\r\nfunction ahash(h: Hash): void {\r\n  if (typeof h !== 'function' || typeof h.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  anumber(h.outputLen);\r\n  anumber(h.blockLen);\r\n}\r\n\r\n/** Asserts a hash instance has not been destroyed / finished */\r\nfunction aexists(instance: any, checkFinished = true): void {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\n\r\n/** Asserts output is properly-sized byte array */\r\nfunction aoutput(out: any, instance: any): void {\r\n  abytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\r\n  }\r\n}\r\n\r\nexport { anumber, abytes, ahash, aexists, aoutput };\r\n", "/**\r\n * Utilities for hex, bytes, CSPRNG.\r\n * @module\r\n */\r\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\nimport { abytes } from './_assert.js';\r\n// export { isBytes } from './_assert.js';\r\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\r\n}\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n// Cast array to different type\r\nexport function u8(arr: TypedArray): Uint8Array {\r\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\n}\r\nexport function u32(arr: TypedArray): Uint32Array {\r\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n}\r\n\r\n// Cast array to view\r\nexport function createView(arr: TypedArray): DataView {\r\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n}\r\n\r\n/** The rotate right (circular right shift) operation for uint32 */\r\nexport function rotr(word: number, shift: number): number {\r\n  return (word << (32 - shift)) | (word >>> shift);\r\n}\r\n/** The rotate left (circular left shift) operation for uint32 */\r\nexport function rotl(word: number, shift: number): number {\r\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\r\n}\r\n\r\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\r\nexport const isLE: boolean = /* @__PURE__ */ (() =>\r\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\r\n// The byte swap operation for uint32\r\nexport function byteSwap(word: number): number {\r\n  return (\r\n    ((word << 24) & 0xff000000) |\r\n    ((word << 8) & 0xff0000) |\r\n    ((word >>> 8) & 0xff00) |\r\n    ((word >>> 24) & 0xff)\r\n  );\r\n}\r\n/** Conditionally byte swap if on a big-endian platform */\r\nexport const byteSwapIfBE: (n: number) => number = isLE\r\n  ? (n: number) => n\r\n  : (n: number) => byteSwap(n);\r\n\r\n/** In place byte swap for Uint32Array */\r\nexport function byteSwap32(arr: Uint32Array): void {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = byteSwap(arr[i]);\r\n  }\r\n}\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * Convert byte array to hex string.\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  abytes(bytes);\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\r\nfunction asciiToBase16(ch: number): number | undefined {\r\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\r\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\r\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\r\n  return;\r\n}\r\n\r\n/**\r\n * Convert hex string to byte array.\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * There is no setImmediate in browser and setTimeout is slow.\r\n * Call of async fn will return Promise, which will be fullfiled only on\r\n * next scheduler queue processing step and this is exactly what we need.\r\n */\r\nexport const nextTick = async (): Promise<void> => {};\r\n\r\n/** Returns control to thread each 'tick' ms to avoid blocking. */\r\nexport async function asyncLoop(\r\n  iters: number,\r\n  tick: number,\r\n  cb: (i: number) => void\r\n): Promise<void> {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * Convert JS string to byte array.\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    abytes(a);\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\n/** For runtime check if class implements interface */\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\n/** Hash function */\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n/** Hash function with output */\r\nexport type CHashO = ReturnType<typeof wrapConstructorWithOpts>;\r\n/** XOF with output */\r\nexport type CHashXO = ReturnType<typeof wrapXOFConstructorWithOpts>;\r\n\r\n/** Wraps hash function, creating an interface on top of it */\r\nexport function wrapConstructor<T extends Hash<T>>(\r\n  hashCons: () => Hash<T>\r\n): {\r\n  (msg: Input): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(): Hash<T>;\r\n} {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n): {\r\n  (msg: Input, opts?: T): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(opts: T): Hash<H>;\r\n} {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n): {\r\n  (msg: Input, opts?: T): Uint8Array;\r\n  outputLen: number;\r\n  blockLen: number;\r\n  create(opts: T): HashXOF<H>;\r\n} {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  // Legacy Node.js compatibility\r\n  if (crypto && typeof crypto.randomBytes === 'function') {\r\n    return crypto.randomBytes(bytesLength);\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
