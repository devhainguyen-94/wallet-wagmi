{
  "version": 3,
  "sources": ["../../@walletconnect/utils/node_modules/viem/accounts/utils/parseAccount.ts", "../../@walletconnect/utils/node_modules/viem/constants/abis.ts", "../../@walletconnect/utils/node_modules/viem/constants/contract.ts", "../../@walletconnect/utils/node_modules/viem/constants/contracts.ts", "../../@walletconnect/utils/node_modules/viem/errors/version.ts", "../../@walletconnect/utils/node_modules/viem/errors/base.ts", "../../@walletconnect/utils/node_modules/viem/errors/chain.ts", "../../@walletconnect/utils/node_modules/viem/constants/solidity.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/formatAbiItem.ts", "../../@walletconnect/utils/node_modules/viem/utils/data/isHex.ts", "../../@walletconnect/utils/node_modules/viem/utils/data/size.ts", "../../@walletconnect/utils/node_modules/viem/errors/abi.ts", "../../@walletconnect/utils/node_modules/viem/errors/data.ts", "../../@walletconnect/utils/node_modules/viem/utils/data/slice.ts", "../../@walletconnect/utils/node_modules/viem/utils/data/pad.ts", "../../@walletconnect/utils/node_modules/viem/errors/encoding.ts", "../../@walletconnect/utils/node_modules/viem/utils/data/trim.ts", "../../@walletconnect/utils/node_modules/viem/utils/encoding/fromHex.ts", "../../@walletconnect/utils/node_modules/viem/utils/encoding/toHex.ts", "../../@walletconnect/utils/node_modules/viem/utils/encoding/toBytes.ts", "../../@walletconnect/utils/node_modules/viem/utils/hash/keccak256.ts", "../../@walletconnect/utils/node_modules/viem/utils/hash/hashSignature.ts", "../../@walletconnect/utils/node_modules/viem/utils/hash/normalizeSignature.ts", "../../@walletconnect/utils/node_modules/viem/utils/hash/toSignature.ts", "../../@walletconnect/utils/node_modules/viem/utils/hash/toSignatureHash.ts", "../../@walletconnect/utils/node_modules/viem/utils/hash/toFunctionSelector.ts", "../../@walletconnect/utils/node_modules/viem/errors/address.ts", "../../@walletconnect/utils/node_modules/viem/utils/lru.ts", "../../@walletconnect/utils/node_modules/viem/utils/address/isAddress.ts", "../../@walletconnect/utils/node_modules/viem/utils/address/getAddress.ts", "../../@walletconnect/utils/node_modules/viem/errors/cursor.ts", "../../@walletconnect/utils/node_modules/viem/utils/cursor.ts", "../../@walletconnect/utils/node_modules/viem/utils/encoding/fromBytes.ts", "../../@walletconnect/utils/node_modules/viem/utils/data/concat.ts", "../../@walletconnect/utils/node_modules/viem/utils/regex.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/encodeAbiParameters.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/decodeAbiParameters.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/decodeErrorResult.ts", "../../@walletconnect/utils/node_modules/viem/utils/stringify.ts", "../../@walletconnect/utils/node_modules/viem/utils/hash/toEventSelector.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/getAbiItem.ts", "../../@walletconnect/utils/node_modules/viem/constants/unit.ts", "../../@walletconnect/utils/node_modules/viem/utils/unit/formatUnits.ts", "../../@walletconnect/utils/node_modules/viem/utils/unit/formatEther.ts", "../../@walletconnect/utils/node_modules/viem/utils/unit/formatGwei.ts", "../../@walletconnect/utils/node_modules/viem/errors/stateOverride.ts", "../../@walletconnect/utils/node_modules/viem/errors/transaction.ts", "../../@walletconnect/utils/node_modules/viem/errors/utils.ts", "../../@walletconnect/utils/node_modules/viem/errors/contract.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/decodeFunctionResult.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/encodeDeployData.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/prepareEncodeFunctionData.ts", "../../@walletconnect/utils/node_modules/viem/utils/abi/encodeFunctionData.ts", "../../@walletconnect/utils/node_modules/viem/utils/chain/getChainContractAddress.ts", "../../@walletconnect/utils/node_modules/viem/errors/node.ts", "../../@walletconnect/utils/node_modules/viem/errors/request.ts", "../../@walletconnect/utils/node_modules/viem/errors/rpc.ts", "../../@walletconnect/utils/node_modules/viem/utils/errors/getNodeError.ts", "../../@walletconnect/utils/node_modules/viem/utils/errors/getCallError.ts", "../../@walletconnect/utils/node_modules/viem/utils/formatters/extract.ts", "../../@walletconnect/utils/node_modules/viem/utils/formatters/formatter.ts", "../../@walletconnect/utils/node_modules/viem/utils/formatters/transactionRequest.ts", "../../@walletconnect/utils/node_modules/viem/utils/promise/withResolvers.ts", "../../@walletconnect/utils/node_modules/viem/utils/promise/createBatchScheduler.ts", "../../@walletconnect/utils/node_modules/viem/utils/stateOverride.ts", "../../@walletconnect/utils/node_modules/viem/constants/number.ts", "../../@walletconnect/utils/node_modules/viem/utils/transaction/assertRequest.ts", "../../@walletconnect/utils/node_modules/viem/actions/public/call.ts", "../../@walletconnect/utils/node_modules/viem/errors/ccip.ts", "../../@walletconnect/utils/node_modules/viem/utils/address/isAddressEqual.ts", "../../@walletconnect/utils/node_modules/viem/utils/ccip.ts"],
  "sourcesContent": ["import type { Address } from 'abitype'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Account } from '../types.js'\r\n\r\nexport type ParseAccountErrorType = ErrorType\r\n\r\nexport function parseAccount<accountOrAddress extends Address | Account>(\r\n  account: accountOrAddress,\r\n): accountOrAddress extends Address ? Account : accountOrAddress {\r\n  if (typeof account === 'string')\r\n    return { address: account, type: 'json-rpc' } as any\r\n  return account as any\r\n}\r\n", "/* [Multicall3](https://github.com/mds1/multicall) */\r\nexport const multicall3Abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'target',\r\n            type: 'address',\r\n          },\r\n          {\r\n            name: 'allowFailure',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'aggregate3',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'success',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            name: 'returnData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        name: 'returnData',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n] as const\r\n\r\nconst universalResolverErrors = [\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverNotFound',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverWildcardNotSupported',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'ResolverNotContract',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'returnData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'ResolverError',\r\n    type: 'error',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            name: 'status',\r\n            type: 'uint16',\r\n          },\r\n          {\r\n            name: 'message',\r\n            type: 'string',\r\n          },\r\n        ],\r\n        name: 'errors',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'HttpError',\r\n    type: 'error',\r\n  },\r\n] as const\r\n\r\nexport const universalResolverResolveAbi = [\r\n  ...universalResolverErrors,\r\n  {\r\n    name: 'resolve',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes' },\r\n      { name: 'data', type: 'bytes' },\r\n    ],\r\n    outputs: [\r\n      { name: '', type: 'bytes' },\r\n      { name: 'address', type: 'address' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'resolve',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes' },\r\n      { name: 'data', type: 'bytes' },\r\n      { name: 'gateways', type: 'string[]' },\r\n    ],\r\n    outputs: [\r\n      { name: '', type: 'bytes' },\r\n      { name: 'address', type: 'address' },\r\n    ],\r\n  },\r\n] as const\r\n\r\nexport const universalResolverReverseAbi = [\r\n  ...universalResolverErrors,\r\n  {\r\n    name: 'reverse',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [{ type: 'bytes', name: 'reverseName' }],\r\n    outputs: [\r\n      { type: 'string', name: 'resolvedName' },\r\n      { type: 'address', name: 'resolvedAddress' },\r\n      { type: 'address', name: 'reverseResolver' },\r\n      { type: 'address', name: 'resolver' },\r\n    ],\r\n  },\r\n  {\r\n    name: 'reverse',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { type: 'bytes', name: 'reverseName' },\r\n      { type: 'string[]', name: 'gateways' },\r\n    ],\r\n    outputs: [\r\n      { type: 'string', name: 'resolvedName' },\r\n      { type: 'address', name: 'resolvedAddress' },\r\n      { type: 'address', name: 'reverseResolver' },\r\n      { type: 'address', name: 'resolver' },\r\n    ],\r\n  },\r\n] as const\r\n\r\nexport const textResolverAbi = [\r\n  {\r\n    name: 'text',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes32' },\r\n      { name: 'key', type: 'string' },\r\n    ],\r\n    outputs: [{ name: '', type: 'string' }],\r\n  },\r\n] as const\r\n\r\nexport const addressResolverAbi = [\r\n  {\r\n    name: 'addr',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [{ name: 'name', type: 'bytes32' }],\r\n    outputs: [{ name: '', type: 'address' }],\r\n  },\r\n  {\r\n    name: 'addr',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'name', type: 'bytes32' },\r\n      { name: 'coinType', type: 'uint256' },\r\n    ],\r\n    outputs: [{ name: '', type: 'bytes' }],\r\n  },\r\n] as const\r\n\r\n// ERC-1271\r\n// isValidSignature(bytes32 hash, bytes signature) → bytes4 magicValue\r\n/** @internal */\r\nexport const smartAccountAbi = [\r\n  {\r\n    name: 'isValidSignature',\r\n    type: 'function',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      { name: 'hash', type: 'bytes32' },\r\n      { name: 'signature', type: 'bytes' },\r\n    ],\r\n    outputs: [{ name: '', type: 'bytes4' }],\r\n  },\r\n] as const\r\n\r\n// ERC-6492 - universal deployless signature validator contract\r\n// constructor(address _signer, bytes32 _hash, bytes _signature) → bytes4 returnValue\r\n// returnValue is either 0x1 (valid) or 0x0 (invalid)\r\nexport const universalSignatureValidatorAbi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        name: '_signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        name: '_signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: '_signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        name: '_signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n    name: 'isValidSig',\r\n  },\r\n] as const\r\n\r\n/** [ERC-20 Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-20) */\r\nexport const erc20Abi = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'allowance',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'decimals',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transfer',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n] as const\r\n\r\n/**\r\n * [bytes32-flavored ERC-20](https://docs.makerdao.com/smart-contract-modules/mkr-module#4.-gotchas-potential-source-of-user-error)\r\n * for tokens (ie. Maker) that use bytes32 instead of string.\r\n */\r\nexport const erc20Abi_bytes32 = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'allowance',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'decimals',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transfer',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n] as const\r\n\r\n/** [ERC-721 Non-Fungible Token Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-721) */\r\nexport const erc721Abi = [\r\n  {\r\n    type: 'event',\r\n    name: 'Approval',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'ApprovalForAll',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'event',\r\n    name: 'Transfer',\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'approve',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'balanceOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'getApproved',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'address',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'isApprovedForAll',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'name',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'ownerOf',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'safeTransferFrom',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'safeTransferFrom',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'setApprovalForAll',\r\n    stateMutability: 'nonpayable',\r\n    inputs: [\r\n      {\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'symbol',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenByIndex',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenByIndex',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'index',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'tokenURI',\r\n    stateMutability: 'view',\r\n    inputs: [\r\n      {\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [\r\n      {\r\n        type: 'string',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'totalSupply',\r\n    stateMutability: 'view',\r\n    inputs: [],\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'function',\r\n    name: 'transferFrom',\r\n    stateMutability: 'payable',\r\n    inputs: [\r\n      {\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'tokeId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    outputs: [],\r\n  },\r\n] as const\r\n\r\n/** [ERC-4626 Tokenized Vaults Standard](https://ethereum.org/en/developers/docs/standards/tokens/erc-4626) */\r\nexport const erc4626Abi = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Deposit',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Withdraw',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'asset',\r\n    outputs: [\r\n      {\r\n        name: 'assetTokenAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'account',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'convertToAssets',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'convertToShares',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'deposit',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxDeposit',\r\n    outputs: [\r\n      {\r\n        name: 'maxAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxMint',\r\n    outputs: [\r\n      {\r\n        name: 'maxShares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxRedeem',\r\n    outputs: [\r\n      {\r\n        name: 'maxShares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'maxWithdraw',\r\n    outputs: [\r\n      {\r\n        name: 'maxAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'mint',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewDeposit',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewMint',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewRedeem',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'previewWithdraw',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'redeem',\r\n    outputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalAssets',\r\n    outputs: [\r\n      {\r\n        name: 'totalManagedAssets',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        name: 'assets',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        name: 'receiver',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'withdraw',\r\n    outputs: [\r\n      {\r\n        name: 'shares',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n] as const\r\n", "export const aggregate3Signature = '0x82ad56cb'\r\n", "export const deploylessCallViaBytecodeBytecode =\r\n  '0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe'\r\n\r\nexport const deploylessCallViaFactoryBytecode =\r\n  '0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe'\r\n\r\nexport const universalSignatureValidatorByteCode =\r\n  '0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572'\r\n", "export const version = '2.23.2'\r\n", "import { version } from './version.js'\r\n\r\ntype ErrorConfig = {\r\n  getDocsUrl?: ((args: BaseErrorParameters) => string | undefined) | undefined\r\n  version?: string | undefined\r\n}\r\n\r\nlet errorConfig: ErrorConfig = {\r\n  getDocsUrl: ({\r\n    docsBaseUrl,\r\n    docsPath = '',\r\n    docsSlug,\r\n  }: BaseErrorParameters) =>\r\n    docsPath\r\n      ? `${docsBaseUrl ?? 'https://viem.sh'}${docsPath}${\r\n          docsSlug ? `#${docsSlug}` : ''\r\n        }`\r\n      : undefined,\r\n  version: `viem@${version}`,\r\n}\r\n\r\nexport function setErrorConfig(config: ErrorConfig) {\r\n  errorConfig = config\r\n}\r\n\r\ntype BaseErrorParameters = {\r\n  cause?: BaseError | Error | undefined\r\n  details?: string | undefined\r\n  docsBaseUrl?: string | undefined\r\n  docsPath?: string | undefined\r\n  docsSlug?: string | undefined\r\n  metaMessages?: string[] | undefined\r\n  name?: string | undefined\r\n}\r\n\r\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\r\nexport class BaseError extends Error {\r\n  details: string\r\n  docsPath?: string | undefined\r\n  metaMessages?: string[] | undefined\r\n  shortMessage: string\r\n  version: string\r\n\r\n  override name = 'BaseError'\r\n\r\n  constructor(shortMessage: string, args: BaseErrorParameters = {}) {\r\n    const details = (() => {\r\n      if (args.cause instanceof BaseError) return args.cause.details\r\n      if (args.cause?.message) return args.cause.message\r\n      return args.details!\r\n    })()\r\n    const docsPath = (() => {\r\n      if (args.cause instanceof BaseError)\r\n        return args.cause.docsPath || args.docsPath\r\n      return args.docsPath\r\n    })()\r\n    const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath })\r\n\r\n    const message = [\r\n      shortMessage || 'An error occurred.',\r\n      '',\r\n      ...(args.metaMessages ? [...args.metaMessages, ''] : []),\r\n      ...(docsUrl ? [`Docs: ${docsUrl}`] : []),\r\n      ...(details ? [`Details: ${details}`] : []),\r\n      ...(errorConfig.version ? [`Version: ${errorConfig.version}`] : []),\r\n    ].join('\\n')\r\n\r\n    super(message, args.cause ? { cause: args.cause } : undefined)\r\n\r\n    this.details = details\r\n    this.docsPath = docsPath\r\n    this.metaMessages = args.metaMessages\r\n    this.name = args.name ?? this.name\r\n    this.shortMessage = shortMessage\r\n    this.version = version\r\n  }\r\n\r\n  walk(): Error\r\n  walk(fn: (err: unknown) => boolean): Error | null\r\n  walk(fn?: any): any {\r\n    return walk(this, fn)\r\n  }\r\n}\r\n\r\nfunction walk(\r\n  err: unknown,\r\n  fn?: ((err: unknown) => boolean) | undefined,\r\n): unknown {\r\n  if (fn?.(err)) return err\r\n  if (\r\n    err &&\r\n    typeof err === 'object' &&\r\n    'cause' in err &&\r\n    err.cause !== undefined\r\n  )\r\n    return walk(err.cause, fn)\r\n  return fn ? null : err\r\n}\r\n", "import type { Chain } from '../types/chain.js'\r\n\r\nimport { BaseError } from './base.js'\r\n\r\nexport type ChainDoesNotSupportContractErrorType =\r\n  ChainDoesNotSupportContract & {\r\n    name: 'ChainDoesNotSupportContract'\r\n  }\r\nexport class ChainDoesNotSupportContract extends BaseError {\r\n  constructor({\r\n    blockNumber,\r\n    chain,\r\n    contract,\r\n  }: {\r\n    blockNumber?: bigint | undefined\r\n    chain: Chain\r\n    contract: { name: string; blockCreated?: number | undefined }\r\n  }) {\r\n    super(\r\n      `Chain \"${chain.name}\" does not support contract \"${contract.name}\".`,\r\n      {\r\n        metaMessages: [\r\n          'This could be due to any of the following:',\r\n          ...(blockNumber &&\r\n          contract.blockCreated &&\r\n          contract.blockCreated > blockNumber\r\n            ? [\r\n                `- The contract \"${contract.name}\" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`,\r\n              ]\r\n            : [\r\n                `- The chain does not have the contract \"${contract.name}\" configured.`,\r\n              ]),\r\n        ],\r\n        name: 'ChainDoesNotSupportContract',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type ChainMismatchErrorType = ChainMismatchError & {\r\n  name: 'ChainMismatchError'\r\n}\r\nexport class ChainMismatchError extends BaseError {\r\n  constructor({\r\n    chain,\r\n    currentChainId,\r\n  }: {\r\n    chain: Chain\r\n    currentChainId: number\r\n  }) {\r\n    super(\r\n      `The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} – ${chain.name}).`,\r\n      {\r\n        metaMessages: [\r\n          `Current Chain ID:  ${currentChainId}`,\r\n          `Expected Chain ID: ${chain.id} – ${chain.name}`,\r\n        ],\r\n        name: 'ChainMismatchError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type ChainNotFoundErrorType = ChainNotFoundError & {\r\n  name: 'ChainNotFoundError'\r\n}\r\nexport class ChainNotFoundError extends BaseError {\r\n  constructor() {\r\n    super(\r\n      [\r\n        'No chain was provided to the request.',\r\n        'Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient.',\r\n      ].join('\\n'),\r\n      {\r\n        name: 'ChainNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type ClientChainNotConfiguredErrorType =\r\n  ClientChainNotConfiguredError & {\r\n    name: 'ClientChainNotConfiguredError'\r\n  }\r\nexport class ClientChainNotConfiguredError extends BaseError {\r\n  constructor() {\r\n    super('No chain was provided to the Client.', {\r\n      name: 'ClientChainNotConfiguredError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidChainIdErrorType = InvalidChainIdError & {\r\n  name: 'InvalidChainIdError'\r\n}\r\nexport class InvalidChainIdError extends BaseError {\r\n  constructor({ chainId }: { chainId?: number | undefined }) {\r\n    super(\r\n      typeof chainId === 'number'\r\n        ? `Chain ID \"${chainId}\" is invalid.`\r\n        : 'Chain ID is invalid.',\r\n      { name: 'InvalidChainIdError' },\r\n    )\r\n  }\r\n}\r\n", "import type { AbiError } from 'abitype'\r\n\r\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\r\nexport const panicReasons = {\r\n  1: 'An `assert` condition failed.',\r\n  17: 'Arithmetic operation resulted in underflow or overflow.',\r\n  18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\r\n  33: 'Attempted to convert to an invalid type.',\r\n  34: 'Attempted to access a storage byte array that is incorrectly encoded.',\r\n  49: 'Performed `.pop()` on an empty array',\r\n  50: 'Array index is out of bounds.',\r\n  65: 'Allocated too much memory or created an array which is too large.',\r\n  81: 'Attempted to call a zero-initialized variable of internal function type.',\r\n} as const\r\n\r\nexport const solidityError: AbiError = {\r\n  inputs: [\r\n    {\r\n      name: 'message',\r\n      type: 'string',\r\n    },\r\n  ],\r\n  name: 'Error',\r\n  type: 'error',\r\n}\r\nexport const solidityPanic: AbiError = {\r\n  inputs: [\r\n    {\r\n      name: 'reason',\r\n      type: 'uint256',\r\n    },\r\n  ],\r\n  name: 'Panic',\r\n  type: 'error',\r\n}\r\n", "import type { AbiParameter } from 'abitype'\r\n\r\nimport {\r\n  InvalidDefinitionTypeError,\r\n  type InvalidDefinitionTypeErrorType,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { AbiItem } from '../../types/contract.js'\r\n\r\nexport type FormatAbiItemErrorType =\r\n  | FormatAbiParamsErrorType\r\n  | InvalidDefinitionTypeErrorType\r\n  | ErrorType\r\n\r\nexport function formatAbiItem(\r\n  abiItem: AbiItem,\r\n  { includeName = false }: { includeName?: boolean | undefined } = {},\r\n) {\r\n  if (\r\n    abiItem.type !== 'function' &&\r\n    abiItem.type !== 'event' &&\r\n    abiItem.type !== 'error'\r\n  )\r\n    throw new InvalidDefinitionTypeError(abiItem.type)\r\n\r\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`\r\n}\r\n\r\nexport type FormatAbiParamsErrorType = ErrorType\r\n\r\nexport function formatAbiParams(\r\n  params: readonly AbiParameter[] | undefined,\r\n  { includeName = false }: { includeName?: boolean | undefined } = {},\r\n): string {\r\n  if (!params) return ''\r\n  return params\r\n    .map((param) => formatAbiParam(param, { includeName }))\r\n    .join(includeName ? ', ' : ',')\r\n}\r\n\r\nexport type FormatAbiParamErrorType = ErrorType\r\n\r\nfunction formatAbiParam(\r\n  param: AbiParameter,\r\n  { includeName }: { includeName: boolean },\r\n): string {\r\n  if (param.type.startsWith('tuple')) {\r\n    return `(${formatAbiParams(\r\n      (param as unknown as { components: AbiParameter[] }).components,\r\n      { includeName },\r\n    )})${param.type.slice('tuple'.length)}`\r\n  }\r\n  return param.type + (includeName && param.name ? ` ${param.name}` : '')\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\n\r\nexport type IsHexErrorType = ErrorType\r\n\r\nexport function isHex(\r\n  value: unknown,\r\n  { strict = true }: { strict?: boolean | undefined } = {},\r\n): value is Hex {\r\n  if (!value) return false\r\n  if (typeof value !== 'string') return false\r\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x')\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\n\r\nimport { type IsHexErrorType, isHex } from './isHex.js'\r\n\r\nexport type SizeErrorType = IsHexErrorType | ErrorType\r\n\r\n/**\r\n * @description Retrieves the size of the value (in bytes).\r\n *\r\n * @param value The value (hex or byte array) to retrieve the size of.\r\n * @returns The size of the value (in bytes).\r\n */\r\nexport function size(value: Hex | ByteArray) {\r\n  if (isHex(value, { strict: false })) return Math.ceil((value.length - 2) / 2)\r\n  return value.length\r\n}\r\n", "import type { Abi, AbiEvent, AbiParameter } from 'abitype'\r\n\r\nimport type { Hex } from '../types/misc.js'\r\nimport { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js'\r\nimport { size } from '../utils/data/size.js'\r\n\r\nimport { BaseError } from './base.js'\r\n\r\nexport type AbiConstructorNotFoundErrorType = AbiConstructorNotFoundError & {\r\n  name: 'AbiConstructorNotFoundError'\r\n}\r\nexport class AbiConstructorNotFoundError extends BaseError {\r\n  constructor({ docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        'A constructor was not found on the ABI.',\r\n        'Make sure you are using the correct ABI and that the constructor exists on it.',\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiConstructorNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiConstructorParamsNotFoundErrorType =\r\n  AbiConstructorParamsNotFoundError & {\r\n    name: 'AbiConstructorParamsNotFoundError'\r\n  }\r\n\r\nexport class AbiConstructorParamsNotFoundError extends BaseError {\r\n  constructor({ docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\r\n        'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiConstructorParamsNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiDecodingDataSizeInvalidErrorType =\r\n  AbiDecodingDataSizeInvalidError & {\r\n    name: 'AbiDecodingDataSizeInvalidError'\r\n  }\r\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\r\n  constructor({ data, size }: { data: Hex; size: number }) {\r\n    super(\r\n      [\r\n        `Data size of ${size} bytes is invalid.`,\r\n        'Size must be in increments of 32 bytes (size % 32 === 0).',\r\n      ].join('\\n'),\r\n      {\r\n        metaMessages: [`Data: ${data} (${size} bytes)`],\r\n        name: 'AbiDecodingDataSizeInvalidError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiDecodingDataSizeTooSmallErrorType =\r\n  AbiDecodingDataSizeTooSmallError & {\r\n    name: 'AbiDecodingDataSizeTooSmallError'\r\n  }\r\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\r\n  data: Hex\r\n  params: readonly AbiParameter[]\r\n  size: number\r\n\r\n  constructor({\r\n    data,\r\n    params,\r\n    size,\r\n  }: { data: Hex; params: readonly AbiParameter[]; size: number }) {\r\n    super(\r\n      [`Data size of ${size} bytes is too small for given parameters.`].join(\r\n        '\\n',\r\n      ),\r\n      {\r\n        metaMessages: [\r\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\r\n          `Data:   ${data} (${size} bytes)`,\r\n        ],\r\n        name: 'AbiDecodingDataSizeTooSmallError',\r\n      },\r\n    )\r\n\r\n    this.data = data\r\n    this.params = params\r\n    this.size = size\r\n  }\r\n}\r\n\r\nexport type AbiDecodingZeroDataErrorType = AbiDecodingZeroDataError & {\r\n  name: 'AbiDecodingZeroDataError'\r\n}\r\nexport class AbiDecodingZeroDataError extends BaseError {\r\n  constructor() {\r\n    super('Cannot decode zero data (\"0x\") with ABI parameters.', {\r\n      name: 'AbiDecodingZeroDataError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type AbiEncodingArrayLengthMismatchErrorType =\r\n  AbiEncodingArrayLengthMismatchError & {\r\n    name: 'AbiEncodingArrayLengthMismatchError'\r\n  }\r\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\r\n  constructor({\r\n    expectedLength,\r\n    givenLength,\r\n    type,\r\n  }: { expectedLength: number; givenLength: number; type: string }) {\r\n    super(\r\n      [\r\n        `ABI encoding array length mismatch for type ${type}.`,\r\n        `Expected length: ${expectedLength}`,\r\n        `Given length: ${givenLength}`,\r\n      ].join('\\n'),\r\n      { name: 'AbiEncodingArrayLengthMismatchError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiEncodingBytesSizeMismatchErrorType =\r\n  AbiEncodingBytesSizeMismatchError & {\r\n    name: 'AbiEncodingBytesSizeMismatchError'\r\n  }\r\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\r\n  constructor({ expectedSize, value }: { expectedSize: number; value: Hex }) {\r\n    super(\r\n      `Size of bytes \"${value}\" (bytes${size(\r\n        value,\r\n      )}) does not match expected size (bytes${expectedSize}).`,\r\n      { name: 'AbiEncodingBytesSizeMismatchError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiEncodingLengthMismatchErrorType =\r\n  AbiEncodingLengthMismatchError & {\r\n    name: 'AbiEncodingLengthMismatchError'\r\n  }\r\nexport class AbiEncodingLengthMismatchError extends BaseError {\r\n  constructor({\r\n    expectedLength,\r\n    givenLength,\r\n  }: { expectedLength: number; givenLength: number }) {\r\n    super(\r\n      [\r\n        'ABI encoding params/values length mismatch.',\r\n        `Expected length (params): ${expectedLength}`,\r\n        `Given length (values): ${givenLength}`,\r\n      ].join('\\n'),\r\n      { name: 'AbiEncodingLengthMismatchError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiErrorInputsNotFoundErrorType = AbiErrorInputsNotFoundError & {\r\n  name: 'AbiErrorInputsNotFoundError'\r\n}\r\nexport class AbiErrorInputsNotFoundError extends BaseError {\r\n  constructor(errorName: string, { docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\r\n        'Cannot encode error result without knowing what the parameter types are.',\r\n        'Make sure you are using the correct ABI and that the inputs exist on it.',\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiErrorInputsNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiErrorNotFoundErrorType = AbiErrorNotFoundError & {\r\n  name: 'AbiErrorNotFoundError'\r\n}\r\nexport class AbiErrorNotFoundError extends BaseError {\r\n  constructor(\r\n    errorName?: string | undefined,\r\n    { docsPath }: { docsPath?: string | undefined } = {},\r\n  ) {\r\n    super(\r\n      [\r\n        `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\r\n        'Make sure you are using the correct ABI and that the error exists on it.',\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiErrorNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiErrorSignatureNotFoundErrorType =\r\n  AbiErrorSignatureNotFoundError & {\r\n    name: 'AbiErrorSignatureNotFoundError'\r\n  }\r\nexport class AbiErrorSignatureNotFoundError extends BaseError {\r\n  signature: Hex\r\n\r\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        `Encoded error signature \"${signature}\" not found on ABI.`,\r\n        'Make sure you are using the correct ABI and that the error exists on it.',\r\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiErrorSignatureNotFoundError',\r\n      },\r\n    )\r\n    this.signature = signature\r\n  }\r\n}\r\n\r\nexport type AbiEventSignatureEmptyTopicsErrorType =\r\n  AbiEventSignatureEmptyTopicsError & {\r\n    name: 'AbiEventSignatureEmptyTopicsError'\r\n  }\r\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\r\n  constructor({ docsPath }: { docsPath: string }) {\r\n    super('Cannot extract event signature from empty topics.', {\r\n      docsPath,\r\n      name: 'AbiEventSignatureEmptyTopicsError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type AbiEventSignatureNotFoundErrorType =\r\n  AbiEventSignatureNotFoundError & {\r\n    name: 'AbiEventSignatureNotFoundError'\r\n  }\r\nexport class AbiEventSignatureNotFoundError extends BaseError {\r\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        `Encoded event signature \"${signature}\" not found on ABI.`,\r\n        'Make sure you are using the correct ABI and that the event exists on it.',\r\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiEventSignatureNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiEventNotFoundErrorType = AbiEventNotFoundError & {\r\n  name: 'AbiEventNotFoundError'\r\n}\r\nexport class AbiEventNotFoundError extends BaseError {\r\n  constructor(\r\n    eventName?: string | undefined,\r\n    { docsPath }: { docsPath?: string | undefined } = {},\r\n  ) {\r\n    super(\r\n      [\r\n        `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\r\n        'Make sure you are using the correct ABI and that the event exists on it.',\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiEventNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiFunctionNotFoundErrorType = AbiFunctionNotFoundError & {\r\n  name: 'AbiFunctionNotFoundError'\r\n}\r\nexport class AbiFunctionNotFoundError extends BaseError {\r\n  constructor(\r\n    functionName?: string | undefined,\r\n    { docsPath }: { docsPath?: string | undefined } = {},\r\n  ) {\r\n    super(\r\n      [\r\n        `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\r\n        'Make sure you are using the correct ABI and that the function exists on it.',\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiFunctionNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiFunctionOutputsNotFoundErrorType =\r\n  AbiFunctionOutputsNotFoundError & {\r\n    name: 'AbiFunctionOutputsNotFoundError'\r\n  }\r\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\r\n  constructor(functionName: string, { docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\r\n        'Cannot decode function result without knowing what the parameter types are.',\r\n        'Make sure you are using the correct ABI and that the function exists on it.',\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiFunctionOutputsNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiFunctionSignatureNotFoundErrorType =\r\n  AbiFunctionSignatureNotFoundError & {\r\n    name: 'AbiFunctionSignatureNotFoundError'\r\n  }\r\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\r\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        `Encoded function signature \"${signature}\" not found on ABI.`,\r\n        'Make sure you are using the correct ABI and that the function exists on it.',\r\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\r\n      ].join('\\n'),\r\n      {\r\n        docsPath,\r\n        name: 'AbiFunctionSignatureNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type AbiItemAmbiguityErrorType = AbiItemAmbiguityError & {\r\n  name: 'AbiItemAmbiguityError'\r\n}\r\nexport class AbiItemAmbiguityError extends BaseError {\r\n  constructor(\r\n    x: { abiItem: Abi[number]; type: string },\r\n    y: { abiItem: Abi[number]; type: string },\r\n  ) {\r\n    super('Found ambiguous types in overloaded ABI items.', {\r\n      metaMessages: [\r\n        `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\r\n        `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\r\n        '',\r\n        'These types encode differently and cannot be distinguished at runtime.',\r\n        'Remove one of the ambiguous items in the ABI.',\r\n      ],\r\n      name: 'AbiItemAmbiguityError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type BytesSizeMismatchErrorType = BytesSizeMismatchError & {\r\n  name: 'BytesSizeMismatchError'\r\n}\r\nexport class BytesSizeMismatchError extends BaseError {\r\n  constructor({\r\n    expectedSize,\r\n    givenSize,\r\n  }: { expectedSize: number; givenSize: number }) {\r\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\r\n      name: 'BytesSizeMismatchError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type DecodeLogDataMismatchErrorType = DecodeLogDataMismatch & {\r\n  name: 'DecodeLogDataMismatch'\r\n}\r\nexport class DecodeLogDataMismatch extends BaseError {\r\n  abiItem: AbiEvent\r\n  data: Hex\r\n  params: readonly AbiParameter[]\r\n  size: number\r\n\r\n  constructor({\r\n    abiItem,\r\n    data,\r\n    params,\r\n    size,\r\n  }: {\r\n    abiItem: AbiEvent\r\n    data: Hex\r\n    params: readonly AbiParameter[]\r\n    size: number\r\n  }) {\r\n    super(\r\n      [\r\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\r\n      ].join('\\n'),\r\n      {\r\n        metaMessages: [\r\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\r\n          `Data:   ${data} (${size} bytes)`,\r\n        ],\r\n        name: 'DecodeLogDataMismatch',\r\n      },\r\n    )\r\n\r\n    this.abiItem = abiItem\r\n    this.data = data\r\n    this.params = params\r\n    this.size = size\r\n  }\r\n}\r\n\r\nexport type DecodeLogTopicsMismatchErrorType = DecodeLogTopicsMismatch & {\r\n  name: 'DecodeLogTopicsMismatch'\r\n}\r\nexport class DecodeLogTopicsMismatch extends BaseError {\r\n  abiItem: AbiEvent\r\n\r\n  constructor({\r\n    abiItem,\r\n    param,\r\n  }: {\r\n    abiItem: AbiEvent\r\n    param: AbiParameter & { indexed: boolean }\r\n  }) {\r\n    super(\r\n      [\r\n        `Expected a topic for indexed event parameter${\r\n          param.name ? ` \"${param.name}\"` : ''\r\n        } on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\r\n      ].join('\\n'),\r\n      { name: 'DecodeLogTopicsMismatch' },\r\n    )\r\n\r\n    this.abiItem = abiItem\r\n  }\r\n}\r\n\r\nexport type InvalidAbiEncodingTypeErrorType = InvalidAbiEncodingTypeError & {\r\n  name: 'InvalidAbiEncodingTypeError'\r\n}\r\nexport class InvalidAbiEncodingTypeError extends BaseError {\r\n  constructor(type: string, { docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        `Type \"${type}\" is not a valid encoding type.`,\r\n        'Please provide a valid ABI type.',\r\n      ].join('\\n'),\r\n      { docsPath, name: 'InvalidAbiEncodingType' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidAbiDecodingTypeErrorType = InvalidAbiDecodingTypeError & {\r\n  name: 'InvalidAbiDecodingTypeError'\r\n}\r\nexport class InvalidAbiDecodingTypeError extends BaseError {\r\n  constructor(type: string, { docsPath }: { docsPath: string }) {\r\n    super(\r\n      [\r\n        `Type \"${type}\" is not a valid decoding type.`,\r\n        'Please provide a valid ABI type.',\r\n      ].join('\\n'),\r\n      { docsPath, name: 'InvalidAbiDecodingType' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidArrayErrorType = InvalidArrayError & {\r\n  name: 'InvalidArrayError'\r\n}\r\nexport class InvalidArrayError extends BaseError {\r\n  constructor(value: unknown) {\r\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'), {\r\n      name: 'InvalidArrayError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidDefinitionTypeErrorType = InvalidDefinitionTypeError & {\r\n  name: 'InvalidDefinitionTypeError'\r\n}\r\nexport class InvalidDefinitionTypeError extends BaseError {\r\n  constructor(type: string) {\r\n    super(\r\n      [\r\n        `\"${type}\" is not a valid definition type.`,\r\n        'Valid types: \"function\", \"event\", \"error\"',\r\n      ].join('\\n'),\r\n      { name: 'InvalidDefinitionTypeError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type UnsupportedPackedAbiTypeErrorType = UnsupportedPackedAbiType & {\r\n  name: 'UnsupportedPackedAbiType'\r\n}\r\nexport class UnsupportedPackedAbiType extends BaseError {\r\n  constructor(type: unknown) {\r\n    super(`Type \"${type}\" is not supported for packed encoding.`, {\r\n      name: 'UnsupportedPackedAbiType',\r\n    })\r\n  }\r\n}\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type SliceOffsetOutOfBoundsErrorType = SliceOffsetOutOfBoundsError & {\r\n  name: 'SliceOffsetOutOfBoundsError'\r\n}\r\nexport class SliceOffsetOutOfBoundsError extends BaseError {\r\n  constructor({\r\n    offset,\r\n    position,\r\n    size,\r\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\r\n    super(\r\n      `Slice ${\r\n        position === 'start' ? 'starting' : 'ending'\r\n      } at offset \"${offset}\" is out-of-bounds (size: ${size}).`,\r\n      { name: 'SliceOffsetOutOfBoundsError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type SizeExceedsPaddingSizeErrorType = SizeExceedsPaddingSizeError & {\r\n  name: 'SizeExceedsPaddingSizeError'\r\n}\r\nexport class SizeExceedsPaddingSizeError extends BaseError {\r\n  constructor({\r\n    size,\r\n    targetSize,\r\n    type,\r\n  }: {\r\n    size: number\r\n    targetSize: number\r\n    type: 'hex' | 'bytes'\r\n  }) {\r\n    super(\r\n      `${type.charAt(0).toUpperCase()}${type\r\n        .slice(1)\r\n        .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`,\r\n      { name: 'SizeExceedsPaddingSizeError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidBytesLengthErrorType = InvalidBytesLengthError & {\r\n  name: 'InvalidBytesLengthError'\r\n}\r\nexport class InvalidBytesLengthError extends BaseError {\r\n  constructor({\r\n    size,\r\n    targetSize,\r\n    type,\r\n  }: {\r\n    size: number\r\n    targetSize: number\r\n    type: 'hex' | 'bytes'\r\n  }) {\r\n    super(\r\n      `${type.charAt(0).toUpperCase()}${type\r\n        .slice(1)\r\n        .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`,\r\n      { name: 'InvalidBytesLengthError' },\r\n    )\r\n  }\r\n}\r\n", "import {\r\n  SliceOffsetOutOfBoundsError,\r\n  type SliceOffsetOutOfBoundsErrorType,\r\n} from '../../errors/data.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\n\r\nimport { type IsHexErrorType, isHex } from './isHex.js'\r\nimport { type SizeErrorType, size } from './size.js'\r\n\r\nexport type SliceReturnType<value extends ByteArray | Hex> = value extends Hex\r\n  ? Hex\r\n  : ByteArray\r\n\r\nexport type SliceErrorType =\r\n  | IsHexErrorType\r\n  | SliceBytesErrorType\r\n  | SliceHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\r\n *\r\n * @param value The hex or byte array to slice.\r\n * @param start The start offset (in bytes).\r\n * @param end The end offset (in bytes).\r\n */\r\nexport function slice<value extends ByteArray | Hex>(\r\n  value: value,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n  { strict }: { strict?: boolean | undefined } = {},\r\n): SliceReturnType<value> {\r\n  if (isHex(value, { strict: false }))\r\n    return sliceHex(value as Hex, start, end, {\r\n      strict,\r\n    }) as SliceReturnType<value>\r\n  return sliceBytes(value as ByteArray, start, end, {\r\n    strict,\r\n  }) as SliceReturnType<value>\r\n}\r\n\r\nexport type AssertStartOffsetErrorType =\r\n  | SliceOffsetOutOfBoundsErrorType\r\n  | SizeErrorType\r\n  | ErrorType\r\n\r\nfunction assertStartOffset(value: Hex | ByteArray, start?: number | undefined) {\r\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1)\r\n    throw new SliceOffsetOutOfBoundsError({\r\n      offset: start,\r\n      position: 'start',\r\n      size: size(value),\r\n    })\r\n}\r\n\r\nexport type AssertEndOffsetErrorType =\r\n  | SliceOffsetOutOfBoundsErrorType\r\n  | SizeErrorType\r\n  | ErrorType\r\n\r\nfunction assertEndOffset(\r\n  value: Hex | ByteArray,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n) {\r\n  if (\r\n    typeof start === 'number' &&\r\n    typeof end === 'number' &&\r\n    size(value) !== end - start\r\n  ) {\r\n    throw new SliceOffsetOutOfBoundsError({\r\n      offset: end,\r\n      position: 'end',\r\n      size: size(value),\r\n    })\r\n  }\r\n}\r\n\r\nexport type SliceBytesErrorType =\r\n  | AssertStartOffsetErrorType\r\n  | AssertEndOffsetErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Returns a section of the byte array given a start/end bytes offset.\r\n *\r\n * @param value The byte array to slice.\r\n * @param start The start offset (in bytes).\r\n * @param end The end offset (in bytes).\r\n */\r\nexport function sliceBytes(\r\n  value_: ByteArray,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n  { strict }: { strict?: boolean | undefined } = {},\r\n): ByteArray {\r\n  assertStartOffset(value_, start)\r\n  const value = value_.slice(start, end)\r\n  if (strict) assertEndOffset(value, start, end)\r\n  return value\r\n}\r\n\r\nexport type SliceHexErrorType =\r\n  | AssertStartOffsetErrorType\r\n  | AssertEndOffsetErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Returns a section of the hex value given a start/end bytes offset.\r\n *\r\n * @param value The hex value to slice.\r\n * @param start The start offset (in bytes).\r\n * @param end The end offset (in bytes).\r\n */\r\nexport function sliceHex(\r\n  value_: Hex,\r\n  start?: number | undefined,\r\n  end?: number | undefined,\r\n  { strict }: { strict?: boolean | undefined } = {},\r\n): Hex {\r\n  assertStartOffset(value_, start)\r\n  const value = `0x${value_\r\n    .replace('0x', '')\r\n    .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}` as const\r\n  if (strict) assertEndOffset(value, start, end)\r\n  return value\r\n}\r\n", "import {\r\n  SizeExceedsPaddingSizeError,\r\n  type SizeExceedsPaddingSizeErrorType,\r\n} from '../../errors/data.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\n\r\ntype PadOptions = {\r\n  dir?: 'left' | 'right' | undefined\r\n  size?: number | null | undefined\r\n}\r\nexport type PadReturnType<value extends ByteArray | Hex> = value extends Hex\r\n  ? Hex\r\n  : ByteArray\r\n\r\nexport type PadErrorType = PadHexErrorType | PadBytesErrorType | ErrorType\r\n\r\nexport function pad<value extends ByteArray | Hex>(\r\n  hexOrBytes: value,\r\n  { dir, size = 32 }: PadOptions = {},\r\n): PadReturnType<value> {\r\n  if (typeof hexOrBytes === 'string')\r\n    return padHex(hexOrBytes, { dir, size }) as PadReturnType<value>\r\n  return padBytes(hexOrBytes, { dir, size }) as PadReturnType<value>\r\n}\r\n\r\nexport type PadHexErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\r\n\r\nexport function padHex(hex_: Hex, { dir, size = 32 }: PadOptions = {}) {\r\n  if (size === null) return hex_\r\n  const hex = hex_.replace('0x', '')\r\n  if (hex.length > size * 2)\r\n    throw new SizeExceedsPaddingSizeError({\r\n      size: Math.ceil(hex.length / 2),\r\n      targetSize: size,\r\n      type: 'hex',\r\n    })\r\n\r\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](\r\n    size * 2,\r\n    '0',\r\n  )}` as Hex\r\n}\r\n\r\nexport type PadBytesErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\r\n\r\nexport function padBytes(\r\n  bytes: ByteArray,\r\n  { dir, size = 32 }: PadOptions = {},\r\n) {\r\n  if (size === null) return bytes\r\n  if (bytes.length > size)\r\n    throw new SizeExceedsPaddingSizeError({\r\n      size: bytes.length,\r\n      targetSize: size,\r\n      type: 'bytes',\r\n    })\r\n  const paddedBytes = new Uint8Array(size)\r\n  for (let i = 0; i < size; i++) {\r\n    const padEnd = dir === 'right'\r\n    paddedBytes[padEnd ? i : size - i - 1] =\r\n      bytes[padEnd ? i : bytes.length - i - 1]\r\n  }\r\n  return paddedBytes\r\n}\r\n", "import type { ByteArray, Hex } from '../types/misc.js'\r\n\r\nimport { BaseError } from './base.js'\r\n\r\nexport type IntegerOutOfRangeErrorType = IntegerOutOfRangeError & {\r\n  name: 'IntegerOutOfRangeError'\r\n}\r\nexport class IntegerOutOfRangeError extends BaseError {\r\n  constructor({\r\n    max,\r\n    min,\r\n    signed,\r\n    size,\r\n    value,\r\n  }: {\r\n    max?: string | undefined\r\n    min: string\r\n    signed?: boolean | undefined\r\n    size?: number | undefined\r\n    value: string\r\n  }) {\r\n    super(\r\n      `Number \"${value}\" is not in safe ${\r\n        size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''\r\n      }integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`,\r\n      { name: 'IntegerOutOfRangeError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidBytesBooleanErrorType = InvalidBytesBooleanError & {\r\n  name: 'InvalidBytesBooleanError'\r\n}\r\nexport class InvalidBytesBooleanError extends BaseError {\r\n  constructor(bytes: ByteArray) {\r\n    super(\r\n      `Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,\r\n      {\r\n        name: 'InvalidBytesBooleanError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidHexBooleanErrorType = InvalidHexBooleanError & {\r\n  name: 'InvalidHexBooleanError'\r\n}\r\nexport class InvalidHexBooleanError extends BaseError {\r\n  constructor(hex: Hex) {\r\n    super(\r\n      `Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`,\r\n      { name: 'InvalidHexBooleanError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidHexValueErrorType = InvalidHexValueError & {\r\n  name: 'InvalidHexValueError'\r\n}\r\nexport class InvalidHexValueError extends BaseError {\r\n  constructor(value: Hex) {\r\n    super(\r\n      `Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`,\r\n      { name: 'InvalidHexValueError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type SizeOverflowErrorType = SizeOverflowError & {\r\n  name: 'SizeOverflowError'\r\n}\r\nexport class SizeOverflowError extends BaseError {\r\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\r\n    super(\r\n      `Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`,\r\n      { name: 'SizeOverflowError' },\r\n    )\r\n  }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\n\r\ntype TrimOptions = {\r\n  dir?: 'left' | 'right' | undefined\r\n}\r\nexport type TrimReturnType<value extends ByteArray | Hex> = value extends Hex\r\n  ? Hex\r\n  : ByteArray\r\n\r\nexport type TrimErrorType = ErrorType\r\n\r\nexport function trim<value extends ByteArray | Hex>(\r\n  hexOrBytes: value,\r\n  { dir = 'left' }: TrimOptions = {},\r\n): TrimReturnType<value> {\r\n  let data: any =\r\n    typeof hexOrBytes === 'string' ? hexOrBytes.replace('0x', '') : hexOrBytes\r\n\r\n  let sliceLength = 0\r\n  for (let i = 0; i < data.length - 1; i++) {\r\n    if (data[dir === 'left' ? i : data.length - i - 1].toString() === '0')\r\n      sliceLength++\r\n    else break\r\n  }\r\n  data =\r\n    dir === 'left'\r\n      ? data.slice(sliceLength)\r\n      : data.slice(0, data.length - sliceLength)\r\n\r\n  if (typeof hexOrBytes === 'string') {\r\n    if (data.length === 1 && dir === 'right') data = `${data}0`\r\n    return `0x${\r\n      data.length % 2 === 1 ? `0${data}` : data\r\n    }` as TrimReturnType<value>\r\n  }\r\n  return data as TrimReturnType<value>\r\n}\r\n", "import {\r\n  InvalidHexBooleanError,\r\n  type InvalidHexBooleanErrorType,\r\n  SizeOverflowError,\r\n  type SizeOverflowErrorType,\r\n} from '../../errors/encoding.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\nimport { type SizeErrorType, size as size_ } from '../data/size.js'\r\nimport { type TrimErrorType, trim } from '../data/trim.js'\r\n\r\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\r\n\r\nexport type AssertSizeErrorType =\r\n  | SizeOverflowErrorType\r\n  | SizeErrorType\r\n  | ErrorType\r\n\r\nexport function assertSize(\r\n  hexOrBytes: Hex | ByteArray,\r\n  { size }: { size: number },\r\n): void {\r\n  if (size_(hexOrBytes) > size)\r\n    throw new SizeOverflowError({\r\n      givenSize: size_(hexOrBytes),\r\n      maxSize: size,\r\n    })\r\n}\r\n\r\nexport type FromHexParameters<\r\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\r\n> =\r\n  | to\r\n  | {\r\n      /** Size (in bytes) of the hex value. */\r\n      size?: number | undefined\r\n      /** Type to convert to. */\r\n      to: to\r\n    }\r\n\r\nexport type FromHexReturnType<to> = to extends 'string'\r\n  ? string\r\n  : to extends 'bigint'\r\n    ? bigint\r\n    : to extends 'number'\r\n      ? number\r\n      : to extends 'bytes'\r\n        ? ByteArray\r\n        : to extends 'boolean'\r\n          ? boolean\r\n          : never\r\n\r\nexport type FromHexErrorType =\r\n  | HexToNumberErrorType\r\n  | HexToBigIntErrorType\r\n  | HexToBoolErrorType\r\n  | HexToStringErrorType\r\n  | HexToBytesErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromHex\r\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\r\n *\r\n * @param hex Hex string to decode.\r\n * @param toOrOpts Type to convert to or options.\r\n * @returns Decoded value.\r\n *\r\n * @example\r\n * import { fromHex } from 'viem'\r\n * const data = fromHex('0x1a4', 'number')\r\n * // 420\r\n *\r\n * @example\r\n * import { fromHex } from 'viem'\r\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\r\n * // 'Hello world'\r\n *\r\n * @example\r\n * import { fromHex } from 'viem'\r\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\r\n *   size: 32,\r\n *   to: 'string'\r\n * })\r\n * // 'Hello world'\r\n */\r\nexport function fromHex<\r\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\r\n>(hex: Hex, toOrOpts: FromHexParameters<to>): FromHexReturnType<to> {\r\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\r\n  const to = opts.to\r\n\r\n  if (to === 'number') return hexToNumber(hex, opts) as FromHexReturnType<to>\r\n  if (to === 'bigint') return hexToBigInt(hex, opts) as FromHexReturnType<to>\r\n  if (to === 'string') return hexToString(hex, opts) as FromHexReturnType<to>\r\n  if (to === 'boolean') return hexToBool(hex, opts) as FromHexReturnType<to>\r\n  return hexToBytes(hex, opts) as FromHexReturnType<to>\r\n}\r\n\r\nexport type HexToBigIntOpts = {\r\n  /** Whether or not the number of a signed representation. */\r\n  signed?: boolean | undefined\r\n  /** Size (in bytes) of the hex value. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type HexToBigIntErrorType = AssertSizeErrorType | ErrorType\r\n\r\n/**\r\n * Decodes a hex value into a bigint.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\r\n *\r\n * @param hex Hex value to decode.\r\n * @param opts Options.\r\n * @returns BigInt value.\r\n *\r\n * @example\r\n * import { hexToBigInt } from 'viem'\r\n * const data = hexToBigInt('0x1a4', { signed: true })\r\n * // 420n\r\n *\r\n * @example\r\n * import { hexToBigInt } from 'viem'\r\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\r\n * // 420n\r\n */\r\nexport function hexToBigInt(hex: Hex, opts: HexToBigIntOpts = {}): bigint {\r\n  const { signed } = opts\r\n\r\n  if (opts.size) assertSize(hex, { size: opts.size })\r\n\r\n  const value = BigInt(hex)\r\n  if (!signed) return value\r\n\r\n  const size = (hex.length - 2) / 2\r\n  const max = (1n << (BigInt(size) * 8n - 1n)) - 1n\r\n  if (value <= max) return value\r\n\r\n  return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n\r\n}\r\n\r\nexport type HexToBoolOpts = {\r\n  /** Size (in bytes) of the hex value. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type HexToBoolErrorType =\r\n  | AssertSizeErrorType\r\n  | InvalidHexBooleanErrorType\r\n  | TrimErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a hex value into a boolean.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\r\n *\r\n * @param hex Hex value to decode.\r\n * @param opts Options.\r\n * @returns Boolean value.\r\n *\r\n * @example\r\n * import { hexToBool } from 'viem'\r\n * const data = hexToBool('0x01')\r\n * // true\r\n *\r\n * @example\r\n * import { hexToBool } from 'viem'\r\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\r\n * // true\r\n */\r\nexport function hexToBool(hex_: Hex, opts: HexToBoolOpts = {}): boolean {\r\n  let hex = hex_\r\n  if (opts.size) {\r\n    assertSize(hex, { size: opts.size })\r\n    hex = trim(hex)\r\n  }\r\n  if (trim(hex) === '0x00') return false\r\n  if (trim(hex) === '0x01') return true\r\n  throw new InvalidHexBooleanError(hex)\r\n}\r\n\r\nexport type HexToNumberOpts = HexToBigIntOpts\r\n\r\nexport type HexToNumberErrorType = HexToBigIntErrorType | ErrorType\r\n\r\n/**\r\n * Decodes a hex string into a number.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\r\n *\r\n * @param hex Hex value to decode.\r\n * @param opts Options.\r\n * @returns Number value.\r\n *\r\n * @example\r\n * import { hexToNumber } from 'viem'\r\n * const data = hexToNumber('0x1a4')\r\n * // 420\r\n *\r\n * @example\r\n * import { hexToNumber } from 'viem'\r\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\r\n * // 420\r\n */\r\nexport function hexToNumber(hex: Hex, opts: HexToNumberOpts = {}): number {\r\n  return Number(hexToBigInt(hex, opts))\r\n}\r\n\r\nexport type HexToStringOpts = {\r\n  /** Size (in bytes) of the hex value. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type HexToStringErrorType =\r\n  | AssertSizeErrorType\r\n  | HexToBytesErrorType\r\n  | TrimErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a hex value into a UTF-8 string.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\r\n *\r\n * @param hex Hex value to decode.\r\n * @param opts Options.\r\n * @returns String value.\r\n *\r\n * @example\r\n * import { hexToString } from 'viem'\r\n * const data = hexToString('0x48656c6c6f20576f726c6421')\r\n * // 'Hello world!'\r\n *\r\n * @example\r\n * import { hexToString } from 'viem'\r\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\r\n *  size: 32,\r\n * })\r\n * // 'Hello world'\r\n */\r\nexport function hexToString(hex: Hex, opts: HexToStringOpts = {}): string {\r\n  let bytes = hexToBytes(hex)\r\n  if (opts.size) {\r\n    assertSize(bytes, { size: opts.size })\r\n    bytes = trim(bytes, { dir: 'right' })\r\n  }\r\n  return new TextDecoder().decode(bytes)\r\n}\r\n", "import {\r\n  IntegerOutOfRangeError,\r\n  type IntegerOutOfRangeErrorType,\r\n} from '../../errors/encoding.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\nimport { type PadErrorType, pad } from '../data/pad.js'\r\n\r\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\r\n\r\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\r\n  i.toString(16).padStart(2, '0'),\r\n)\r\n\r\nexport type ToHexParameters = {\r\n  /** The size (in bytes) of the output hex value. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type ToHexErrorType =\r\n  | BoolToHexErrorType\r\n  | BytesToHexErrorType\r\n  | NumberToHexErrorType\r\n  | StringToHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Encodes a string, number, bigint, or ByteArray into a hex string\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toHex\r\n * - Example: https://viem.sh/docs/utilities/toHex#usage\r\n *\r\n * @param value Value to encode.\r\n * @param opts Options.\r\n * @returns Hex value.\r\n *\r\n * @example\r\n * import { toHex } from 'viem'\r\n * const data = toHex('Hello world')\r\n * // '0x48656c6c6f20776f726c6421'\r\n *\r\n * @example\r\n * import { toHex } from 'viem'\r\n * const data = toHex(420)\r\n * // '0x1a4'\r\n *\r\n * @example\r\n * import { toHex } from 'viem'\r\n * const data = toHex('Hello world', { size: 32 })\r\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\r\n */\r\nexport function toHex(\r\n  value: string | number | bigint | boolean | ByteArray,\r\n  opts: ToHexParameters = {},\r\n): Hex {\r\n  if (typeof value === 'number' || typeof value === 'bigint')\r\n    return numberToHex(value, opts)\r\n  if (typeof value === 'string') {\r\n    return stringToHex(value, opts)\r\n  }\r\n  if (typeof value === 'boolean') return boolToHex(value, opts)\r\n  return bytesToHex(value, opts)\r\n}\r\n\r\nexport type BoolToHexOpts = {\r\n  /** The size (in bytes) of the output hex value. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type BoolToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\r\n\r\n/**\r\n * Encodes a boolean into a hex string\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\r\n *\r\n * @param value Value to encode.\r\n * @param opts Options.\r\n * @returns Hex value.\r\n *\r\n * @example\r\n * import { boolToHex } from 'viem'\r\n * const data = boolToHex(true)\r\n * // '0x1'\r\n *\r\n * @example\r\n * import { boolToHex } from 'viem'\r\n * const data = boolToHex(false)\r\n * // '0x0'\r\n *\r\n * @example\r\n * import { boolToHex } from 'viem'\r\n * const data = boolToHex(true, { size: 32 })\r\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\r\n */\r\nexport function boolToHex(value: boolean, opts: BoolToHexOpts = {}): Hex {\r\n  const hex: Hex = `0x${Number(value)}`\r\n  if (typeof opts.size === 'number') {\r\n    assertSize(hex, { size: opts.size })\r\n    return pad(hex, { size: opts.size })\r\n  }\r\n  return hex\r\n}\r\n\r\nexport type BytesToHexOpts = {\r\n  /** The size (in bytes) of the output hex value. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type BytesToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\r\n\r\n/**\r\n * Encodes a bytes array into a hex string\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\r\n *\r\n * @param value Value to encode.\r\n * @param opts Options.\r\n * @returns Hex value.\r\n *\r\n * @example\r\n * import { bytesToHex } from 'viem'\r\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\r\n * // '0x48656c6c6f20576f726c6421'\r\n *\r\n * @example\r\n * import { bytesToHex } from 'viem'\r\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\r\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\r\n */\r\nexport function bytesToHex(value: ByteArray, opts: BytesToHexOpts = {}): Hex {\r\n  let string = ''\r\n  for (let i = 0; i < value.length; i++) {\r\n    string += hexes[value[i]]\r\n  }\r\n  const hex = `0x${string}` as const\r\n\r\n  if (typeof opts.size === 'number') {\r\n    assertSize(hex, { size: opts.size })\r\n    return pad(hex, { dir: 'right', size: opts.size })\r\n  }\r\n  return hex\r\n}\r\n\r\nexport type NumberToHexOpts =\r\n  | {\r\n      /** Whether or not the number of a signed representation. */\r\n      signed?: boolean | undefined\r\n      /** The size (in bytes) of the output hex value. */\r\n      size: number\r\n    }\r\n  | {\r\n      signed?: undefined\r\n      /** The size (in bytes) of the output hex value. */\r\n      size?: number | undefined\r\n    }\r\n\r\nexport type NumberToHexErrorType =\r\n  | IntegerOutOfRangeErrorType\r\n  | PadErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Encodes a number or bigint into a hex string\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\r\n *\r\n * @param value Value to encode.\r\n * @param opts Options.\r\n * @returns Hex value.\r\n *\r\n * @example\r\n * import { numberToHex } from 'viem'\r\n * const data = numberToHex(420)\r\n * // '0x1a4'\r\n *\r\n * @example\r\n * import { numberToHex } from 'viem'\r\n * const data = numberToHex(420, { size: 32 })\r\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\r\n */\r\nexport function numberToHex(\r\n  value_: number | bigint,\r\n  opts: NumberToHexOpts = {},\r\n): Hex {\r\n  const { signed, size } = opts\r\n\r\n  const value = BigInt(value_)\r\n\r\n  let maxValue: bigint | number | undefined\r\n  if (size) {\r\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\r\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\r\n  } else if (typeof value_ === 'number') {\r\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\r\n  }\r\n\r\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\r\n\r\n  if ((maxValue && value > maxValue) || value < minValue) {\r\n    const suffix = typeof value_ === 'bigint' ? 'n' : ''\r\n    throw new IntegerOutOfRangeError({\r\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\r\n      min: `${minValue}${suffix}`,\r\n      signed,\r\n      size,\r\n      value: `${value_}${suffix}`,\r\n    })\r\n  }\r\n\r\n  const hex = `0x${(\r\n    signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value\r\n  ).toString(16)}` as Hex\r\n  if (size) return pad(hex, { size }) as Hex\r\n  return hex\r\n}\r\n\r\nexport type StringToHexOpts = {\r\n  /** The size (in bytes) of the output hex value. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type StringToHexErrorType = BytesToHexErrorType | ErrorType\r\n\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\n\r\n/**\r\n * Encodes a UTF-8 string into a hex string\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\r\n *\r\n * @param value Value to encode.\r\n * @param opts Options.\r\n * @returns Hex value.\r\n *\r\n * @example\r\n * import { stringToHex } from 'viem'\r\n * const data = stringToHex('Hello World!')\r\n * // '0x48656c6c6f20576f726c6421'\r\n *\r\n * @example\r\n * import { stringToHex } from 'viem'\r\n * const data = stringToHex('Hello World!', { size: 32 })\r\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\r\n */\r\nexport function stringToHex(value_: string, opts: StringToHexOpts = {}): Hex {\r\n  const value = encoder.encode(value_)\r\n  return bytesToHex(value, opts)\r\n}\r\n", "import { BaseError } from '../../errors/base.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\r\nimport { type PadErrorType, pad } from '../data/pad.js'\r\n\r\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  type NumberToHexOpts,\r\n  numberToHex,\r\n} from './toHex.js'\r\n\r\nconst encoder = /*#__PURE__*/ new TextEncoder()\r\n\r\nexport type ToBytesParameters = {\r\n  /** Size of the output bytes. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type ToBytesErrorType =\r\n  | NumberToBytesErrorType\r\n  | BoolToBytesErrorType\r\n  | HexToBytesErrorType\r\n  | StringToBytesErrorType\r\n  | IsHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toBytes\r\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\r\n *\r\n * @param value Value to encode.\r\n * @param opts Options.\r\n * @returns Byte array value.\r\n *\r\n * @example\r\n * import { toBytes } from 'viem'\r\n * const data = toBytes('Hello world')\r\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\r\n *\r\n * @example\r\n * import { toBytes } from 'viem'\r\n * const data = toBytes(420)\r\n * // Uint8Array([1, 164])\r\n *\r\n * @example\r\n * import { toBytes } from 'viem'\r\n * const data = toBytes(420, { size: 4 })\r\n * // Uint8Array([0, 0, 1, 164])\r\n */\r\nexport function toBytes(\r\n  value: string | bigint | number | boolean | Hex,\r\n  opts: ToBytesParameters = {},\r\n): ByteArray {\r\n  if (typeof value === 'number' || typeof value === 'bigint')\r\n    return numberToBytes(value, opts)\r\n  if (typeof value === 'boolean') return boolToBytes(value, opts)\r\n  if (isHex(value)) return hexToBytes(value, opts)\r\n  return stringToBytes(value, opts)\r\n}\r\n\r\nexport type BoolToBytesOpts = {\r\n  /** Size of the output bytes. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type BoolToBytesErrorType =\r\n  | AssertSizeErrorType\r\n  | PadErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Encodes a boolean into a byte array.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\r\n *\r\n * @param value Boolean value to encode.\r\n * @param opts Options.\r\n * @returns Byte array value.\r\n *\r\n * @example\r\n * import { boolToBytes } from 'viem'\r\n * const data = boolToBytes(true)\r\n * // Uint8Array([1])\r\n *\r\n * @example\r\n * import { boolToBytes } from 'viem'\r\n * const data = boolToBytes(true, { size: 32 })\r\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\r\n */\r\nexport function boolToBytes(value: boolean, opts: BoolToBytesOpts = {}) {\r\n  const bytes = new Uint8Array(1)\r\n  bytes[0] = Number(value)\r\n  if (typeof opts.size === 'number') {\r\n    assertSize(bytes, { size: opts.size })\r\n    return pad(bytes, { size: opts.size })\r\n  }\r\n  return bytes\r\n}\r\n\r\n// We use very optimized technique to convert hex string to byte array\r\nconst charCodeMap = {\r\n  zero: 48,\r\n  nine: 57,\r\n  A: 65,\r\n  F: 70,\r\n  a: 97,\r\n  f: 102,\r\n} as const\r\n\r\nfunction charCodeToBase16(char: number) {\r\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\r\n    return char - charCodeMap.zero\r\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\r\n    return char - (charCodeMap.A - 10)\r\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\r\n    return char - (charCodeMap.a - 10)\r\n  return undefined\r\n}\r\n\r\nexport type HexToBytesOpts = {\r\n  /** Size of the output bytes. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type HexToBytesErrorType = AssertSizeErrorType | PadErrorType | ErrorType\r\n\r\n/**\r\n * Encodes a hex string into a byte array.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\r\n *\r\n * @param hex Hex string to encode.\r\n * @param opts Options.\r\n * @returns Byte array value.\r\n *\r\n * @example\r\n * import { hexToBytes } from 'viem'\r\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\r\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\r\n *\r\n * @example\r\n * import { hexToBytes } from 'viem'\r\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\r\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n */\r\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): ByteArray {\r\n  let hex = hex_\r\n  if (opts.size) {\r\n    assertSize(hex, { size: opts.size })\r\n    hex = pad(hex, { dir: 'right', size: opts.size })\r\n  }\r\n\r\n  let hexString = hex.slice(2) as string\r\n  if (hexString.length % 2) hexString = `0${hexString}`\r\n\r\n  const length = hexString.length / 2\r\n  const bytes = new Uint8Array(length)\r\n  for (let index = 0, j = 0; index < length; index++) {\r\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++))\r\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++))\r\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\r\n      throw new BaseError(\r\n        `Invalid byte sequence (\"${hexString[j - 2]}${\r\n          hexString[j - 1]\r\n        }\" in \"${hexString}\").`,\r\n      )\r\n    }\r\n    bytes[index] = nibbleLeft * 16 + nibbleRight\r\n  }\r\n  return bytes\r\n}\r\n\r\nexport type NumberToBytesErrorType =\r\n  | NumberToHexErrorType\r\n  | HexToBytesErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Encodes a number into a byte array.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\r\n *\r\n * @param value Number to encode.\r\n * @param opts Options.\r\n * @returns Byte array value.\r\n *\r\n * @example\r\n * import { numberToBytes } from 'viem'\r\n * const data = numberToBytes(420)\r\n * // Uint8Array([1, 164])\r\n *\r\n * @example\r\n * import { numberToBytes } from 'viem'\r\n * const data = numberToBytes(420, { size: 4 })\r\n * // Uint8Array([0, 0, 1, 164])\r\n */\r\nexport function numberToBytes(\r\n  value: bigint | number,\r\n  opts?: NumberToHexOpts | undefined,\r\n) {\r\n  const hex = numberToHex(value, opts)\r\n  return hexToBytes(hex)\r\n}\r\n\r\nexport type StringToBytesOpts = {\r\n  /** Size of the output bytes. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type StringToBytesErrorType =\r\n  | AssertSizeErrorType\r\n  | PadErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Encodes a UTF-8 string into a byte array.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\r\n *\r\n * @param value String to encode.\r\n * @param opts Options.\r\n * @returns Byte array value.\r\n *\r\n * @example\r\n * import { stringToBytes } from 'viem'\r\n * const data = stringToBytes('Hello world!')\r\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\r\n *\r\n * @example\r\n * import { stringToBytes } from 'viem'\r\n * const data = stringToBytes('Hello world!', { size: 32 })\r\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n */\r\nexport function stringToBytes(\r\n  value: string,\r\n  opts: StringToBytesOpts = {},\r\n): ByteArray {\r\n  const bytes = encoder.encode(value)\r\n  if (typeof opts.size === 'number') {\r\n    assertSize(bytes, { size: opts.size })\r\n    return pad(bytes, { dir: 'right', size: opts.size })\r\n  }\r\n  return bytes\r\n}\r\n", "import { keccak_256 } from '@noble/hashes/sha3'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\r\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\r\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\r\n\r\ntype To = 'hex' | 'bytes'\r\n\r\nexport type Keccak256Hash<to extends To> =\r\n  | (to extends 'bytes' ? ByteArray : never)\r\n  | (to extends 'hex' ? Hex : never)\r\n\r\nexport type Keccak256ErrorType =\r\n  | IsHexErrorType\r\n  | ToBytesErrorType\r\n  | ToHexErrorType\r\n  | ErrorType\r\n\r\nexport function keccak256<to extends To = 'hex'>(\r\n  value: Hex | ByteArray,\r\n  to_?: to | undefined,\r\n): Keccak256Hash<to> {\r\n  const to = to_ || 'hex'\r\n  const bytes = keccak_256(\r\n    isHex(value, { strict: false }) ? toBytes(value) : value,\r\n  )\r\n  if (to === 'bytes') return bytes as Keccak256Hash<to>\r\n  return toHex(bytes) as Keccak256Hash<to>\r\n}\r\n", "import { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { type Keccak256ErrorType, keccak256 } from './keccak256.js'\r\n\r\nconst hash = (value: string) => keccak256(toBytes(value))\r\n\r\nexport type HashSignatureErrorType =\r\n  | Keccak256ErrorType\r\n  | ToBytesErrorType\r\n  | ErrorType\r\n\r\nexport function hashSignature(sig: string) {\r\n  return hash(sig)\r\n}\r\n", "import { BaseError } from '../../errors/base.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\n\r\ntype NormalizeSignatureParameters = string\r\ntype NormalizeSignatureReturnType = string\r\nexport type NormalizeSignatureErrorType = ErrorType\r\n\r\nexport function normalizeSignature(\r\n  signature: NormalizeSignatureParameters,\r\n): NormalizeSignatureReturnType {\r\n  let active = true\r\n  let current = ''\r\n  let level = 0\r\n  let result = ''\r\n  let valid = false\r\n\r\n  for (let i = 0; i < signature.length; i++) {\r\n    const char = signature[i]\r\n\r\n    // If the character is a separator, we want to reactivate.\r\n    if (['(', ')', ','].includes(char)) active = true\r\n\r\n    // If the character is a \"level\" token, we want to increment/decrement.\r\n    if (char === '(') level++\r\n    if (char === ')') level--\r\n\r\n    // If we aren't active, we don't want to mutate the result.\r\n    if (!active) continue\r\n\r\n    // If level === 0, we are at the definition level.\r\n    if (level === 0) {\r\n      if (char === ' ' && ['event', 'function', ''].includes(result))\r\n        result = ''\r\n      else {\r\n        result += char\r\n\r\n        // If we are at the end of the definition, we must be finished.\r\n        if (char === ')') {\r\n          valid = true\r\n          break\r\n        }\r\n      }\r\n\r\n      continue\r\n    }\r\n\r\n    // Ignore spaces\r\n    if (char === ' ') {\r\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\r\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\r\n        current = ''\r\n        active = false\r\n      }\r\n      continue\r\n    }\r\n\r\n    result += char\r\n    current += char\r\n  }\r\n\r\n  if (!valid) throw new BaseError('Unable to normalize signature.')\r\n\r\n  return result\r\n}\r\n", "import { type AbiEvent, type AbiFunction, formatAbiItem } from 'abitype'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type NormalizeSignatureErrorType,\r\n  normalizeSignature,\r\n} from './normalizeSignature.js'\r\n\r\nexport type ToSignatureErrorType = NormalizeSignatureErrorType | ErrorType\r\n\r\n/**\r\n * Returns the signature for a given function or event definition.\r\n *\r\n * @example\r\n * const signature = toSignature('function ownerOf(uint256 tokenId)')\r\n * // 'ownerOf(uint256)'\r\n *\r\n * @example\r\n * const signature_3 = toSignature({\r\n *   name: 'ownerOf',\r\n *   type: 'function',\r\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\r\n *   outputs: [],\r\n *   stateMutability: 'view',\r\n * })\r\n * // 'ownerOf(uint256)'\r\n */\r\nexport const toSignature = (def: string | AbiFunction | AbiEvent) => {\r\n  const def_ = (() => {\r\n    if (typeof def === 'string') return def\r\n    return formatAbiItem(def)\r\n  })()\r\n  return normalizeSignature(def_)\r\n}\r\n", "import type { AbiEvent, AbiFunction } from 'abitype'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { type HashSignatureErrorType, hashSignature } from './hashSignature.js'\r\nimport { type ToSignatureErrorType, toSignature } from './toSignature.js'\r\n\r\nexport type ToSignatureHashErrorType =\r\n  | HashSignatureErrorType\r\n  | ToSignatureErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the hash (of the function/event signature) for a given event or function definition.\r\n */\r\nexport function toSignatureHash(fn: string | AbiFunction | AbiEvent) {\r\n  return hashSignature(toSignature(fn))\r\n}\r\n", "import type { AbiFunction } from 'abitype'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { type SliceErrorType, slice } from '../data/slice.js'\r\nimport {\r\n  type ToSignatureHashErrorType,\r\n  toSignatureHash,\r\n} from './toSignatureHash.js'\r\n\r\nexport type ToFunctionSelectorErrorType =\r\n  | ToSignatureHashErrorType\r\n  | SliceErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the function selector for a given function definition.\r\n *\r\n * @example\r\n * const selector = toFunctionSelector('function ownerOf(uint256 tokenId)')\r\n * // 0x6352211e\r\n */\r\nexport const toFunctionSelector = (fn: string | AbiFunction) =>\r\n  slice(toSignatureHash(fn), 0, 4)\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type InvalidAddressErrorType = InvalidAddressError & {\r\n  name: 'InvalidAddressError'\r\n}\r\nexport class InvalidAddressError extends BaseError {\r\n  constructor({ address }: { address: string }) {\r\n    super(`Address \"${address}\" is invalid.`, {\r\n      metaMessages: [\r\n        '- Address must be a hex value of 20 bytes (40 hex characters).',\r\n        '- Address must match its checksum counterpart.',\r\n      ],\r\n      name: 'InvalidAddressError',\r\n    })\r\n  }\r\n}\r\n", "/**\r\n * Map with a LRU (Least recently used) policy.\r\n *\r\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\r\n */\r\nexport class LruMap<value = unknown> extends Map<string, value> {\r\n  maxSize: number\r\n\r\n  constructor(size: number) {\r\n    super()\r\n    this.maxSize = size\r\n  }\r\n\r\n  override get(key: string) {\r\n    const value = super.get(key)\r\n\r\n    if (super.has(key) && value !== undefined) {\r\n      this.delete(key)\r\n      super.set(key, value)\r\n    }\r\n\r\n    return value\r\n  }\r\n\r\n  override set(key: string, value: value) {\r\n    super.set(key, value)\r\n    if (this.maxSize && this.size > this.maxSize) {\r\n      const firstKey = this.keys().next().value\r\n      if (firstKey) this.delete(firstKey)\r\n    }\r\n    return this\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { LruMap } from '../lru.js'\r\nimport { checksumAddress } from './getAddress.js'\r\n\r\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\r\n\r\n/** @internal */\r\nexport const isAddressCache = /*#__PURE__*/ new LruMap<boolean>(8192)\r\n\r\nexport type IsAddressOptions = {\r\n  /**\r\n   * Enables strict mode. Whether or not to compare the address against its checksum.\r\n   *\r\n   * @default true\r\n   */\r\n  strict?: boolean | undefined\r\n}\r\n\r\nexport type IsAddressErrorType = ErrorType\r\n\r\nexport function isAddress(\r\n  address: string,\r\n  options?: IsAddressOptions | undefined,\r\n): address is Address {\r\n  const { strict = true } = options ?? {}\r\n  const cacheKey = `${address}.${strict}`\r\n\r\n  if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey)!\r\n\r\n  const result = (() => {\r\n    if (!addressRegex.test(address)) return false\r\n    if (address.toLowerCase() === address) return true\r\n    if (strict) return checksumAddress(address as Address) === address\r\n    return true\r\n  })()\r\n  isAddressCache.set(cacheKey, result)\r\n  return result\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport { InvalidAddressError } from '../../errors/address.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type StringToBytesErrorType,\r\n  stringToBytes,\r\n} from '../encoding/toBytes.js'\r\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\r\nimport { LruMap } from '../lru.js'\r\nimport { type IsAddressErrorType, isAddress } from './isAddress.js'\r\n\r\nconst checksumAddressCache = /*#__PURE__*/ new LruMap<Address>(8192)\r\n\r\nexport type ChecksumAddressErrorType =\r\n  | Keccak256ErrorType\r\n  | StringToBytesErrorType\r\n  | ErrorType\r\n\r\nexport function checksumAddress(\r\n  address_: Address,\r\n  /**\r\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\r\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\r\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\r\n   *\r\n   * It is highly recommended to not use this feature unless you\r\n   * know what you are doing.\r\n   *\r\n   * See more: https://github.com/ethereum/EIPs/issues/1121\r\n   */\r\n  chainId?: number | undefined,\r\n): Address {\r\n  if (checksumAddressCache.has(`${address_}.${chainId}`))\r\n    return checksumAddressCache.get(`${address_}.${chainId}`)!\r\n\r\n  const hexAddress = chainId\r\n    ? `${chainId}${address_.toLowerCase()}`\r\n    : address_.substring(2).toLowerCase()\r\n  const hash = keccak256(stringToBytes(hexAddress), 'bytes')\r\n\r\n  const address = (\r\n    chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress\r\n  ).split('')\r\n  for (let i = 0; i < 40; i += 2) {\r\n    if (hash[i >> 1] >> 4 >= 8 && address[i]) {\r\n      address[i] = address[i].toUpperCase()\r\n    }\r\n    if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\r\n      address[i + 1] = address[i + 1].toUpperCase()\r\n    }\r\n  }\r\n\r\n  const result = `0x${address.join('')}` as const\r\n  checksumAddressCache.set(`${address_}.${chainId}`, result)\r\n  return result\r\n}\r\n\r\nexport type GetAddressErrorType =\r\n  | ChecksumAddressErrorType\r\n  | IsAddressErrorType\r\n  | ErrorType\r\n\r\nexport function getAddress(\r\n  address: string,\r\n  /**\r\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\r\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\r\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\r\n   *\r\n   * It is highly recommended to not use this feature unless you\r\n   * know what you are doing.\r\n   *\r\n   * See more: https://github.com/ethereum/EIPs/issues/1121\r\n   */\r\n  chainId?: number,\r\n): Address {\r\n  if (!isAddress(address, { strict: false }))\r\n    throw new InvalidAddressError({ address })\r\n  return checksumAddress(address, chainId)\r\n}\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type NegativeOffsetErrorType = NegativeOffsetError & {\r\n  name: 'NegativeOffsetError'\r\n}\r\nexport class NegativeOffsetError extends BaseError {\r\n  constructor({ offset }: { offset: number }) {\r\n    super(`Offset \\`${offset}\\` cannot be negative.`, {\r\n      name: 'NegativeOffsetError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type PositionOutOfBoundsErrorType = PositionOutOfBoundsError & {\r\n  name: 'PositionOutOfBoundsError'\r\n}\r\nexport class PositionOutOfBoundsError extends BaseError {\r\n  constructor({ length, position }: { length: number; position: number }) {\r\n    super(\r\n      `Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`,\r\n      { name: 'PositionOutOfBoundsError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type RecursiveReadLimitExceededErrorType =\r\n  RecursiveReadLimitExceededError & {\r\n    name: 'RecursiveReadLimitExceededError'\r\n  }\r\nexport class RecursiveReadLimitExceededError extends BaseError {\r\n  constructor({ count, limit }: { count: number; limit: number }) {\r\n    super(\r\n      `Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`,\r\n      { name: 'RecursiveReadLimitExceededError' },\r\n    )\r\n  }\r\n}\r\n", "import {\r\n  NegativeOffsetError,\r\n  type NegativeOffsetErrorType,\r\n  PositionOutOfBoundsError,\r\n  type PositionOutOfBoundsErrorType,\r\n  RecursiveReadLimitExceededError,\r\n  type RecursiveReadLimitExceededErrorType,\r\n} from '../errors/cursor.js'\r\nimport type { ErrorType } from '../errors/utils.js'\r\nimport type { ByteArray } from '../types/misc.js'\r\n\r\nexport type Cursor = {\r\n  bytes: ByteArray\r\n  dataView: DataView\r\n  position: number\r\n  positionReadCount: Map<number, number>\r\n  recursiveReadCount: number\r\n  recursiveReadLimit: number\r\n  remaining: number\r\n  assertReadLimit(position?: number): void\r\n  assertPosition(position: number): void\r\n  decrementPosition(offset: number): void\r\n  getReadCount(position?: number): number\r\n  incrementPosition(offset: number): void\r\n  inspectByte(position?: number): ByteArray[number]\r\n  inspectBytes(length: number, position?: number): ByteArray\r\n  inspectUint8(position?: number): number\r\n  inspectUint16(position?: number): number\r\n  inspectUint24(position?: number): number\r\n  inspectUint32(position?: number): number\r\n  pushByte(byte: ByteArray[number]): void\r\n  pushBytes(bytes: ByteArray): void\r\n  pushUint8(value: number): void\r\n  pushUint16(value: number): void\r\n  pushUint24(value: number): void\r\n  pushUint32(value: number): void\r\n  readByte(): ByteArray[number]\r\n  readBytes(length: number, size?: number): ByteArray\r\n  readUint8(): number\r\n  readUint16(): number\r\n  readUint24(): number\r\n  readUint32(): number\r\n  setPosition(position: number): () => void\r\n  _touch(): void\r\n}\r\n\r\ntype CursorErrorType =\r\n  | CursorAssertPositionErrorType\r\n  | CursorDecrementPositionErrorType\r\n  | CursorIncrementPositionErrorType\r\n  | ErrorType\r\n\r\ntype CursorAssertPositionErrorType = PositionOutOfBoundsErrorType | ErrorType\r\n\r\ntype CursorDecrementPositionErrorType = NegativeOffsetErrorType | ErrorType\r\n\r\ntype CursorIncrementPositionErrorType = NegativeOffsetErrorType | ErrorType\r\n\r\ntype StaticCursorErrorType =\r\n  | NegativeOffsetErrorType\r\n  | RecursiveReadLimitExceededErrorType\r\n\r\nconst staticCursor: Cursor = {\r\n  bytes: new Uint8Array(),\r\n  dataView: new DataView(new ArrayBuffer(0)),\r\n  position: 0,\r\n  positionReadCount: new Map(),\r\n  recursiveReadCount: 0,\r\n  recursiveReadLimit: Number.POSITIVE_INFINITY,\r\n  assertReadLimit() {\r\n    if (this.recursiveReadCount >= this.recursiveReadLimit)\r\n      throw new RecursiveReadLimitExceededError({\r\n        count: this.recursiveReadCount + 1,\r\n        limit: this.recursiveReadLimit,\r\n      })\r\n  },\r\n  assertPosition(position) {\r\n    if (position < 0 || position > this.bytes.length - 1)\r\n      throw new PositionOutOfBoundsError({\r\n        length: this.bytes.length,\r\n        position,\r\n      })\r\n  },\r\n  decrementPosition(offset) {\r\n    if (offset < 0) throw new NegativeOffsetError({ offset })\r\n    const position = this.position - offset\r\n    this.assertPosition(position)\r\n    this.position = position\r\n  },\r\n  getReadCount(position) {\r\n    return this.positionReadCount.get(position || this.position) || 0\r\n  },\r\n  incrementPosition(offset) {\r\n    if (offset < 0) throw new NegativeOffsetError({ offset })\r\n    const position = this.position + offset\r\n    this.assertPosition(position)\r\n    this.position = position\r\n  },\r\n  inspectByte(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position)\r\n    return this.bytes[position]\r\n  },\r\n  inspectBytes(length, position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + length - 1)\r\n    return this.bytes.subarray(position, position + length)\r\n  },\r\n  inspectUint8(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position)\r\n    return this.bytes[position]\r\n  },\r\n  inspectUint16(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 1)\r\n    return this.dataView.getUint16(position)\r\n  },\r\n  inspectUint24(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 2)\r\n    return (\r\n      (this.dataView.getUint16(position) << 8) +\r\n      this.dataView.getUint8(position + 2)\r\n    )\r\n  },\r\n  inspectUint32(position_) {\r\n    const position = position_ ?? this.position\r\n    this.assertPosition(position + 3)\r\n    return this.dataView.getUint32(position)\r\n  },\r\n  pushByte(byte: ByteArray[number]) {\r\n    this.assertPosition(this.position)\r\n    this.bytes[this.position] = byte\r\n    this.position++\r\n  },\r\n  pushBytes(bytes: ByteArray) {\r\n    this.assertPosition(this.position + bytes.length - 1)\r\n    this.bytes.set(bytes, this.position)\r\n    this.position += bytes.length\r\n  },\r\n  pushUint8(value: number) {\r\n    this.assertPosition(this.position)\r\n    this.bytes[this.position] = value\r\n    this.position++\r\n  },\r\n  pushUint16(value: number) {\r\n    this.assertPosition(this.position + 1)\r\n    this.dataView.setUint16(this.position, value)\r\n    this.position += 2\r\n  },\r\n  pushUint24(value: number) {\r\n    this.assertPosition(this.position + 2)\r\n    this.dataView.setUint16(this.position, value >> 8)\r\n    this.dataView.setUint8(this.position + 2, value & ~4294967040)\r\n    this.position += 3\r\n  },\r\n  pushUint32(value: number) {\r\n    this.assertPosition(this.position + 3)\r\n    this.dataView.setUint32(this.position, value)\r\n    this.position += 4\r\n  },\r\n  readByte() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectByte()\r\n    this.position++\r\n    return value\r\n  },\r\n  readBytes(length, size) {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectBytes(length)\r\n    this.position += size ?? length\r\n    return value\r\n  },\r\n  readUint8() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint8()\r\n    this.position += 1\r\n    return value\r\n  },\r\n  readUint16() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint16()\r\n    this.position += 2\r\n    return value\r\n  },\r\n  readUint24() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint24()\r\n    this.position += 3\r\n    return value\r\n  },\r\n  readUint32() {\r\n    this.assertReadLimit()\r\n    this._touch()\r\n    const value = this.inspectUint32()\r\n    this.position += 4\r\n    return value\r\n  },\r\n  get remaining() {\r\n    return this.bytes.length - this.position\r\n  },\r\n  setPosition(position) {\r\n    const oldPosition = this.position\r\n    this.assertPosition(position)\r\n    this.position = position\r\n    return () => (this.position = oldPosition)\r\n  },\r\n  _touch() {\r\n    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return\r\n    const count = this.getReadCount()\r\n    this.positionReadCount.set(this.position, count + 1)\r\n    if (count > 0) this.recursiveReadCount++\r\n  },\r\n}\r\n\r\ntype CursorConfig = { recursiveReadLimit?: number | undefined }\r\n\r\nexport type CreateCursorErrorType =\r\n  | CursorErrorType\r\n  | StaticCursorErrorType\r\n  | ErrorType\r\n\r\nexport function createCursor(\r\n  bytes: ByteArray,\r\n  { recursiveReadLimit = 8_192 }: CursorConfig = {},\r\n): Cursor {\r\n  const cursor: Cursor = Object.create(staticCursor)\r\n  cursor.bytes = bytes\r\n  cursor.dataView = new DataView(\r\n    bytes.buffer,\r\n    bytes.byteOffset,\r\n    bytes.byteLength,\r\n  )\r\n  cursor.positionReadCount = new Map()\r\n  cursor.recursiveReadLimit = recursiveReadLimit\r\n  return cursor\r\n}\r\n", "import { InvalidBytesBooleanError } from '../../errors/encoding.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\nimport { type TrimErrorType, trim } from '../data/trim.js'\r\n\r\nimport {\r\n  type AssertSizeErrorType,\r\n  type HexToBigIntErrorType,\r\n  type HexToNumberErrorType,\r\n  assertSize,\r\n  hexToBigInt,\r\n  hexToNumber,\r\n} from './fromHex.js'\r\nimport { type BytesToHexErrorType, bytesToHex } from './toHex.js'\r\n\r\nexport type FromBytesParameters<\r\n  to extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\r\n> =\r\n  | to\r\n  | {\r\n      /** Size of the bytes. */\r\n      size?: number | undefined\r\n      /** Type to convert to. */\r\n      to: to\r\n    }\r\n\r\nexport type FromBytesReturnType<to> = to extends 'string'\r\n  ? string\r\n  : to extends 'hex'\r\n    ? Hex\r\n    : to extends 'bigint'\r\n      ? bigint\r\n      : to extends 'number'\r\n        ? number\r\n        : to extends 'boolean'\r\n          ? boolean\r\n          : never\r\n\r\nexport type FromBytesErrorType =\r\n  | BytesToHexErrorType\r\n  | BytesToBigIntErrorType\r\n  | BytesToBoolErrorType\r\n  | BytesToNumberErrorType\r\n  | BytesToStringErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a byte array into a UTF-8 string, hex value, number, bigint or boolean.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromBytes\r\n * - Example: https://viem.sh/docs/utilities/fromBytes#usage\r\n *\r\n * @param bytes Byte array to decode.\r\n * @param toOrOpts Type to convert to or options.\r\n * @returns Decoded value.\r\n *\r\n * @example\r\n * import { fromBytes } from 'viem'\r\n * const data = fromBytes(new Uint8Array([1, 164]), 'number')\r\n * // 420\r\n *\r\n * @example\r\n * import { fromBytes } from 'viem'\r\n * const data = fromBytes(\r\n *   new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),\r\n *   'string'\r\n * )\r\n * // 'Hello world'\r\n */\r\nexport function fromBytes<\r\n  to extends 'string' | 'hex' | 'bigint' | 'number' | 'boolean',\r\n>(\r\n  bytes: ByteArray,\r\n  toOrOpts: FromBytesParameters<to>,\r\n): FromBytesReturnType<to> {\r\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\r\n  const to = opts.to\r\n\r\n  if (to === 'number')\r\n    return bytesToNumber(bytes, opts) as FromBytesReturnType<to>\r\n  if (to === 'bigint')\r\n    return bytesToBigInt(bytes, opts) as FromBytesReturnType<to>\r\n  if (to === 'boolean')\r\n    return bytesToBool(bytes, opts) as FromBytesReturnType<to>\r\n  if (to === 'string')\r\n    return bytesToString(bytes, opts) as FromBytesReturnType<to>\r\n  return bytesToHex(bytes, opts) as FromBytesReturnType<to>\r\n}\r\n\r\nexport type BytesToBigIntOpts = {\r\n  /** Whether or not the number of a signed representation. */\r\n  signed?: boolean | undefined\r\n  /** Size of the bytes. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type BytesToBigIntErrorType =\r\n  | BytesToHexErrorType\r\n  | HexToBigIntErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a byte array into a bigint.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobigint\r\n *\r\n * @param bytes Byte array to decode.\r\n * @param opts Options.\r\n * @returns BigInt value.\r\n *\r\n * @example\r\n * import { bytesToBigInt } from 'viem'\r\n * const data = bytesToBigInt(new Uint8Array([1, 164]))\r\n * // 420n\r\n */\r\nexport function bytesToBigInt(\r\n  bytes: ByteArray,\r\n  opts: BytesToBigIntOpts = {},\r\n): bigint {\r\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\r\n  const hex = bytesToHex(bytes, opts)\r\n  return hexToBigInt(hex, opts)\r\n}\r\n\r\nexport type BytesToBoolOpts = {\r\n  /** Size of the bytes. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type BytesToBoolErrorType =\r\n  | AssertSizeErrorType\r\n  | TrimErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a byte array into a boolean.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestobool\r\n *\r\n * @param bytes Byte array to decode.\r\n * @param opts Options.\r\n * @returns Boolean value.\r\n *\r\n * @example\r\n * import { bytesToBool } from 'viem'\r\n * const data = bytesToBool(new Uint8Array([1]))\r\n * // true\r\n */\r\nexport function bytesToBool(\r\n  bytes_: ByteArray,\r\n  opts: BytesToBoolOpts = {},\r\n): boolean {\r\n  let bytes = bytes_\r\n  if (typeof opts.size !== 'undefined') {\r\n    assertSize(bytes, { size: opts.size })\r\n    bytes = trim(bytes)\r\n  }\r\n  if (bytes.length > 1 || bytes[0] > 1)\r\n    throw new InvalidBytesBooleanError(bytes)\r\n  return Boolean(bytes[0])\r\n}\r\n\r\nexport type BytesToNumberOpts = BytesToBigIntOpts\r\n\r\nexport type BytesToNumberErrorType =\r\n  | BytesToHexErrorType\r\n  | HexToNumberErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a byte array into a number.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestonumber\r\n *\r\n * @param bytes Byte array to decode.\r\n * @param opts Options.\r\n * @returns Number value.\r\n *\r\n * @example\r\n * import { bytesToNumber } from 'viem'\r\n * const data = bytesToNumber(new Uint8Array([1, 164]))\r\n * // 420\r\n */\r\nexport function bytesToNumber(\r\n  bytes: ByteArray,\r\n  opts: BytesToNumberOpts = {},\r\n): number {\r\n  if (typeof opts.size !== 'undefined') assertSize(bytes, { size: opts.size })\r\n  const hex = bytesToHex(bytes, opts)\r\n  return hexToNumber(hex, opts)\r\n}\r\n\r\nexport type BytesToStringOpts = {\r\n  /** Size of the bytes. */\r\n  size?: number | undefined\r\n}\r\n\r\nexport type BytesToStringErrorType =\r\n  | AssertSizeErrorType\r\n  | TrimErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Decodes a byte array into a UTF-8 string.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/fromBytes#bytestostring\r\n *\r\n * @param bytes Byte array to decode.\r\n * @param opts Options.\r\n * @returns String value.\r\n *\r\n * @example\r\n * import { bytesToString } from 'viem'\r\n * const data = bytesToString(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\r\n * // 'Hello world'\r\n */\r\nexport function bytesToString(\r\n  bytes_: ByteArray,\r\n  opts: BytesToStringOpts = {},\r\n): string {\r\n  let bytes = bytes_\r\n  if (typeof opts.size !== 'undefined') {\r\n    assertSize(bytes, { size: opts.size })\r\n    bytes = trim(bytes, { dir: 'right' })\r\n  }\r\n  return new TextDecoder().decode(bytes)\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\n\r\nexport type ConcatReturnType<value extends Hex | ByteArray> = value extends Hex\r\n  ? Hex\r\n  : ByteArray\r\n\r\nexport type ConcatErrorType =\r\n  | ConcatBytesErrorType\r\n  | ConcatHexErrorType\r\n  | ErrorType\r\n\r\nexport function concat<value extends Hex | ByteArray>(\r\n  values: readonly value[],\r\n): ConcatReturnType<value> {\r\n  if (typeof values[0] === 'string')\r\n    return concatHex(values as readonly Hex[]) as ConcatReturnType<value>\r\n  return concatBytes(values as readonly ByteArray[]) as ConcatReturnType<value>\r\n}\r\n\r\nexport type ConcatBytesErrorType = ErrorType\r\n\r\nexport function concatBytes(values: readonly ByteArray[]): ByteArray {\r\n  let length = 0\r\n  for (const arr of values) {\r\n    length += arr.length\r\n  }\r\n  const result = new Uint8Array(length)\r\n  let offset = 0\r\n  for (const arr of values) {\r\n    result.set(arr, offset)\r\n    offset += arr.length\r\n  }\r\n  return result\r\n}\r\n\r\nexport type ConcatHexErrorType = ErrorType\r\n\r\nexport function concatHex(values: readonly Hex[]): Hex {\r\n  return `0x${(values as Hex[]).reduce(\r\n    (acc, x) => acc + x.replace('0x', ''),\r\n    '',\r\n  )}`\r\n}\r\n", "export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\r\n\r\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\r\n// https://regexr.com/6va55\r\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\r\n\r\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\r\n// https://regexr.com/6v8hp\r\nexport const integerRegex =\r\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\r\n", "import type {\r\n  AbiParameter,\r\n  AbiParameterToPrimitiveType,\r\n  AbiParametersToPrimitiveTypes,\r\n} from 'abitype'\r\n\r\nimport {\r\n  AbiEncodingArrayLengthMismatchError,\r\n  type AbiEncodingArrayLengthMismatchErrorType,\r\n  AbiEncodingBytesSizeMismatchError,\r\n  type AbiEncodingBytesSizeMismatchErrorType,\r\n  AbiEncodingLengthMismatchError,\r\n  type AbiEncodingLengthMismatchErrorType,\r\n  InvalidAbiEncodingTypeError,\r\n  type InvalidAbiEncodingTypeErrorType,\r\n  InvalidArrayError,\r\n  type InvalidArrayErrorType,\r\n} from '../../errors/abi.js'\r\nimport {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../../errors/address.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport { IntegerOutOfRangeError } from '../../errors/encoding.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\r\nimport { type ConcatErrorType, concat } from '../data/concat.js'\r\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\r\nimport { type SizeErrorType, size } from '../data/size.js'\r\nimport { type SliceErrorType, slice } from '../data/slice.js'\r\nimport {\r\n  type BoolToHexErrorType,\r\n  type NumberToHexErrorType,\r\n  type StringToHexErrorType,\r\n  boolToHex,\r\n  numberToHex,\r\n  stringToHex,\r\n} from '../encoding/toHex.js'\r\nimport { integerRegex } from '../regex.js'\r\n\r\nexport type EncodeAbiParametersReturnType = Hex\r\n\r\nexport type EncodeAbiParametersErrorType =\r\n  | AbiEncodingLengthMismatchErrorType\r\n  | PrepareParamsErrorType\r\n  | EncodeParamsErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\r\n *\r\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\r\n *\r\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\r\n *\r\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\r\n * @param values - a set of values (values) that correspond to the given params.\r\n * @example\r\n * ```typescript\r\n * import { encodeAbiParameters } from 'viem'\r\n *\r\n * const encodedData = encodeAbiParameters(\r\n *   [\r\n *     { name: 'x', type: 'string' },\r\n *     { name: 'y', type: 'uint' },\r\n *     { name: 'z', type: 'bool' }\r\n *   ],\r\n *   ['wagmi', 420n, true]\r\n * )\r\n * ```\r\n *\r\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\r\n *\r\n * const encodedData = encodeAbiParameters(\r\n *   parseAbiParameters('string x, uint y, bool z'),\r\n *   ['wagmi', 420n, true]\r\n * )\r\n * ```\r\n */\r\nexport function encodeAbiParameters<\r\n  const params extends readonly AbiParameter[] | readonly unknown[],\r\n>(\r\n  params: params,\r\n  values: params extends readonly AbiParameter[]\r\n    ? AbiParametersToPrimitiveTypes<params>\r\n    : never,\r\n): EncodeAbiParametersReturnType {\r\n  if (params.length !== values.length)\r\n    throw new AbiEncodingLengthMismatchError({\r\n      expectedLength: params.length as number,\r\n      givenLength: values.length as any,\r\n    })\r\n  // Prepare the parameters to determine dynamic types to encode.\r\n  const preparedParams = prepareParams({\r\n    params: params as readonly AbiParameter[],\r\n    values: values as any,\r\n  })\r\n  const data = encodeParams(preparedParams)\r\n  if (data.length === 0) return '0x'\r\n  return data\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////\r\n\r\ntype PreparedParam = { dynamic: boolean; encoded: Hex }\r\n\r\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\r\ntype Tuple = AbiParameterToPrimitiveType<TupleAbiParameter>\r\n\r\ntype PrepareParamsErrorType = PrepareParamErrorType | ErrorType\r\n\r\nfunction prepareParams<const params extends readonly AbiParameter[]>({\r\n  params,\r\n  values,\r\n}: {\r\n  params: params\r\n  values: AbiParametersToPrimitiveTypes<params>\r\n}) {\r\n  const preparedParams: PreparedParam[] = []\r\n  for (let i = 0; i < params.length; i++) {\r\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }))\r\n  }\r\n  return preparedParams\r\n}\r\n\r\ntype PrepareParamErrorType =\r\n  | EncodeAddressErrorType\r\n  | EncodeArrayErrorType\r\n  | EncodeBytesErrorType\r\n  | EncodeBoolErrorType\r\n  | EncodeNumberErrorType\r\n  | EncodeStringErrorType\r\n  | EncodeTupleErrorType\r\n  | GetArrayComponentsErrorType\r\n  | InvalidAbiEncodingTypeErrorType\r\n  | ErrorType\r\n\r\nfunction prepareParam<const param extends AbiParameter>({\r\n  param,\r\n  value,\r\n}: {\r\n  param: param\r\n  value: AbiParameterToPrimitiveType<param>\r\n}): PreparedParam {\r\n  const arrayComponents = getArrayComponents(param.type)\r\n  if (arrayComponents) {\r\n    const [length, type] = arrayComponents\r\n    return encodeArray(value, { length, param: { ...param, type } })\r\n  }\r\n  if (param.type === 'tuple') {\r\n    return encodeTuple(value as unknown as Tuple, {\r\n      param: param as TupleAbiParameter,\r\n    })\r\n  }\r\n  if (param.type === 'address') {\r\n    return encodeAddress(value as unknown as Hex)\r\n  }\r\n  if (param.type === 'bool') {\r\n    return encodeBool(value as unknown as boolean)\r\n  }\r\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\r\n    const signed = param.type.startsWith('int')\r\n    const [, , size = '256'] = integerRegex.exec(param.type) ?? []\r\n    return encodeNumber(value as unknown as number, {\r\n      signed,\r\n      size: Number(size),\r\n    })\r\n  }\r\n  if (param.type.startsWith('bytes')) {\r\n    return encodeBytes(value as unknown as Hex, { param })\r\n  }\r\n  if (param.type === 'string') {\r\n    return encodeString(value as unknown as string)\r\n  }\r\n  throw new InvalidAbiEncodingTypeError(param.type, {\r\n    docsPath: '/docs/contract/encodeAbiParameters',\r\n  })\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////\r\n\r\ntype EncodeParamsErrorType = NumberToHexErrorType | SizeErrorType | ErrorType\r\n\r\nfunction encodeParams(preparedParams: PreparedParam[]): Hex {\r\n  // 1. Compute the size of the static part of the parameters.\r\n  let staticSize = 0\r\n  for (let i = 0; i < preparedParams.length; i++) {\r\n    const { dynamic, encoded } = preparedParams[i]\r\n    if (dynamic) staticSize += 32\r\n    else staticSize += size(encoded)\r\n  }\r\n\r\n  // 2. Split the parameters into static and dynamic parts.\r\n  const staticParams: Hex[] = []\r\n  const dynamicParams: Hex[] = []\r\n  let dynamicSize = 0\r\n  for (let i = 0; i < preparedParams.length; i++) {\r\n    const { dynamic, encoded } = preparedParams[i]\r\n    if (dynamic) {\r\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }))\r\n      dynamicParams.push(encoded)\r\n      dynamicSize += size(encoded)\r\n    } else {\r\n      staticParams.push(encoded)\r\n    }\r\n  }\r\n\r\n  // 3. Concatenate static and dynamic parts.\r\n  return concat([...staticParams, ...dynamicParams])\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////\r\n\r\ntype EncodeAddressErrorType =\r\n  | InvalidAddressErrorType\r\n  | IsAddressErrorType\r\n  | ErrorType\r\n\r\nfunction encodeAddress(value: Hex): PreparedParam {\r\n  if (!isAddress(value)) throw new InvalidAddressError({ address: value })\r\n  return { dynamic: false, encoded: padHex(value.toLowerCase() as Hex) }\r\n}\r\n\r\ntype EncodeArrayErrorType =\r\n  | AbiEncodingArrayLengthMismatchErrorType\r\n  | ConcatErrorType\r\n  | EncodeParamsErrorType\r\n  | InvalidArrayErrorType\r\n  | NumberToHexErrorType\r\n  // TODO: Add back once circular type reference is resolved\r\n  // | PrepareParamErrorType\r\n  | ErrorType\r\n\r\nfunction encodeArray<const param extends AbiParameter>(\r\n  value: AbiParameterToPrimitiveType<param>,\r\n  {\r\n    length,\r\n    param,\r\n  }: {\r\n    length: number | null\r\n    param: param\r\n  },\r\n): PreparedParam {\r\n  const dynamic = length === null\r\n\r\n  if (!Array.isArray(value)) throw new InvalidArrayError(value)\r\n  if (!dynamic && value.length !== length)\r\n    throw new AbiEncodingArrayLengthMismatchError({\r\n      expectedLength: length!,\r\n      givenLength: value.length,\r\n      type: `${param.type}[${length}]`,\r\n    })\r\n\r\n  let dynamicChild = false\r\n  const preparedParams: PreparedParam[] = []\r\n  for (let i = 0; i < value.length; i++) {\r\n    const preparedParam = prepareParam({ param, value: value[i] })\r\n    if (preparedParam.dynamic) dynamicChild = true\r\n    preparedParams.push(preparedParam)\r\n  }\r\n\r\n  if (dynamic || dynamicChild) {\r\n    const data = encodeParams(preparedParams)\r\n    if (dynamic) {\r\n      const length = numberToHex(preparedParams.length, { size: 32 })\r\n      return {\r\n        dynamic: true,\r\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length,\r\n      }\r\n    }\r\n    if (dynamicChild) return { dynamic: true, encoded: data }\r\n  }\r\n  return {\r\n    dynamic: false,\r\n    encoded: concat(preparedParams.map(({ encoded }) => encoded)),\r\n  }\r\n}\r\n\r\ntype EncodeBytesErrorType =\r\n  | AbiEncodingBytesSizeMismatchErrorType\r\n  | ConcatErrorType\r\n  | PadHexErrorType\r\n  | NumberToHexErrorType\r\n  | SizeErrorType\r\n  | ErrorType\r\n\r\nfunction encodeBytes<const param extends AbiParameter>(\r\n  value: Hex,\r\n  { param }: { param: param },\r\n): PreparedParam {\r\n  const [, paramSize] = param.type.split('bytes')\r\n  const bytesSize = size(value)\r\n  if (!paramSize) {\r\n    let value_ = value\r\n    // If the size is not divisible by 32 bytes, pad the end\r\n    // with empty bytes to the ceiling 32 bytes.\r\n    if (bytesSize % 32 !== 0)\r\n      value_ = padHex(value_, {\r\n        dir: 'right',\r\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32,\r\n      })\r\n    return {\r\n      dynamic: true,\r\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\r\n    }\r\n  }\r\n  if (bytesSize !== Number.parseInt(paramSize))\r\n    throw new AbiEncodingBytesSizeMismatchError({\r\n      expectedSize: Number.parseInt(paramSize),\r\n      value,\r\n    })\r\n  return { dynamic: false, encoded: padHex(value, { dir: 'right' }) }\r\n}\r\n\r\ntype EncodeBoolErrorType = PadHexErrorType | BoolToHexErrorType | ErrorType\r\n\r\nfunction encodeBool(value: boolean): PreparedParam {\r\n  if (typeof value !== 'boolean')\r\n    throw new BaseError(\r\n      `Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`,\r\n    )\r\n  return { dynamic: false, encoded: padHex(boolToHex(value)) }\r\n}\r\n\r\ntype EncodeNumberErrorType = NumberToHexErrorType | ErrorType\r\n\r\nfunction encodeNumber(\r\n  value: number,\r\n  { signed, size = 256 }: { signed: boolean; size?: number | undefined },\r\n): PreparedParam {\r\n  if (typeof size === 'number') {\r\n    const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n\r\n    const min = signed ? -max - 1n : 0n\r\n    if (value > max || value < min)\r\n      throw new IntegerOutOfRangeError({\r\n        max: max.toString(),\r\n        min: min.toString(),\r\n        signed,\r\n        size: size / 8,\r\n        value: value.toString(),\r\n      })\r\n  }\r\n  return {\r\n    dynamic: false,\r\n    encoded: numberToHex(value, {\r\n      size: 32,\r\n      signed,\r\n    }),\r\n  }\r\n}\r\n\r\ntype EncodeStringErrorType =\r\n  | ConcatErrorType\r\n  | NumberToHexErrorType\r\n  | PadHexErrorType\r\n  | SizeErrorType\r\n  | SliceErrorType\r\n  | StringToHexErrorType\r\n  | ErrorType\r\n\r\nfunction encodeString(value: string): PreparedParam {\r\n  const hexValue = stringToHex(value)\r\n  const partsLength = Math.ceil(size(hexValue) / 32)\r\n  const parts: Hex[] = []\r\n  for (let i = 0; i < partsLength; i++) {\r\n    parts.push(\r\n      padHex(slice(hexValue, i * 32, (i + 1) * 32), {\r\n        dir: 'right',\r\n      }),\r\n    )\r\n  }\r\n  return {\r\n    dynamic: true,\r\n    encoded: concat([\r\n      padHex(numberToHex(size(hexValue), { size: 32 })),\r\n      ...parts,\r\n    ]),\r\n  }\r\n}\r\n\r\ntype EncodeTupleErrorType =\r\n  | ConcatErrorType\r\n  | EncodeParamsErrorType\r\n  // TODO: Add back once circular type reference is resolved\r\n  // | PrepareParamErrorType\r\n  | ErrorType\r\n\r\nfunction encodeTuple<\r\n  const param extends AbiParameter & { components: readonly AbiParameter[] },\r\n>(\r\n  value: AbiParameterToPrimitiveType<param>,\r\n  { param }: { param: param },\r\n): PreparedParam {\r\n  let dynamic = false\r\n  const preparedParams: PreparedParam[] = []\r\n  for (let i = 0; i < param.components.length; i++) {\r\n    const param_ = param.components[i]\r\n    const index = Array.isArray(value) ? i : param_.name\r\n    const preparedParam = prepareParam({\r\n      param: param_,\r\n      value: (value as any)[index!] as readonly unknown[],\r\n    })\r\n    preparedParams.push(preparedParam)\r\n    if (preparedParam.dynamic) dynamic = true\r\n  }\r\n  return {\r\n    dynamic,\r\n    encoded: dynamic\r\n      ? encodeParams(preparedParams)\r\n      : concat(preparedParams.map(({ encoded }) => encoded)),\r\n  }\r\n}\r\n\r\ntype GetArrayComponentsErrorType = ErrorType\r\n\r\nexport function getArrayComponents(\r\n  type: string,\r\n): [length: number | null, innerType: string] | undefined {\r\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\r\n  return matches\r\n    ? // Return `null` if the array is dynamic.\r\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\r\n    : undefined\r\n}\r\n", "import type { AbiParameter, AbiParametersToPrimitiveTypes } from 'abitype'\r\n\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\n\r\nimport {\r\n  AbiDecodingDataSizeTooSmallError,\r\n  AbiDecodingZeroDataError,\r\n  InvalidAbiDecodingTypeError,\r\n  type InvalidAbiDecodingTypeErrorType,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type ChecksumAddressErrorType,\r\n  checksumAddress,\r\n} from '../address/getAddress.js'\r\nimport {\r\n  type CreateCursorErrorType,\r\n  type Cursor,\r\n  createCursor,\r\n} from '../cursor.js'\r\nimport { type SizeErrorType, size } from '../data/size.js'\r\nimport { type SliceBytesErrorType, sliceBytes } from '../data/slice.js'\r\nimport { type TrimErrorType, trim } from '../data/trim.js'\r\nimport {\r\n  type BytesToBigIntErrorType,\r\n  type BytesToBoolErrorType,\r\n  type BytesToNumberErrorType,\r\n  type BytesToStringErrorType,\r\n  bytesToBigInt,\r\n  bytesToBool,\r\n  bytesToNumber,\r\n  bytesToString,\r\n} from '../encoding/fromBytes.js'\r\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\r\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\r\nimport { getArrayComponents } from './encodeAbiParameters.js'\r\n\r\nexport type DecodeAbiParametersReturnType<\r\n  params extends readonly AbiParameter[] = readonly AbiParameter[],\r\n> = AbiParametersToPrimitiveTypes<\r\n  params extends readonly AbiParameter[] ? params : AbiParameter[]\r\n>\r\n\r\nexport type DecodeAbiParametersErrorType =\r\n  | HexToBytesErrorType\r\n  | BytesToHexErrorType\r\n  | DecodeParameterErrorType\r\n  | SizeErrorType\r\n  | CreateCursorErrorType\r\n  | ErrorType\r\n\r\nexport function decodeAbiParameters<\r\n  const params extends readonly AbiParameter[],\r\n>(\r\n  params: params,\r\n  data: ByteArray | Hex,\r\n): DecodeAbiParametersReturnType<params> {\r\n  const bytes = typeof data === 'string' ? hexToBytes(data) : data\r\n  const cursor = createCursor(bytes)\r\n\r\n  if (size(bytes) === 0 && params.length > 0)\r\n    throw new AbiDecodingZeroDataError()\r\n  if (size(data) && size(data) < 32)\r\n    throw new AbiDecodingDataSizeTooSmallError({\r\n      data: typeof data === 'string' ? data : bytesToHex(data),\r\n      params: params as readonly AbiParameter[],\r\n      size: size(data),\r\n    })\r\n\r\n  let consumed = 0\r\n  const values = []\r\n  for (let i = 0; i < params.length; ++i) {\r\n    const param = params[i]\r\n    cursor.setPosition(consumed)\r\n    const [data, consumed_] = decodeParameter(cursor, param, {\r\n      staticPosition: 0,\r\n    })\r\n    consumed += consumed_\r\n    values.push(data)\r\n  }\r\n  return values as DecodeAbiParametersReturnType<params>\r\n}\r\n\r\ntype DecodeParameterErrorType =\r\n  | DecodeArrayErrorType\r\n  | DecodeTupleErrorType\r\n  | DecodeAddressErrorType\r\n  | DecodeBoolErrorType\r\n  | DecodeBytesErrorType\r\n  | DecodeNumberErrorType\r\n  | DecodeStringErrorType\r\n  | InvalidAbiDecodingTypeErrorType\r\n\r\nfunction decodeParameter(\r\n  cursor: Cursor,\r\n  param: AbiParameter,\r\n  { staticPosition }: { staticPosition: number },\r\n) {\r\n  const arrayComponents = getArrayComponents(param.type)\r\n  if (arrayComponents) {\r\n    const [length, type] = arrayComponents\r\n    return decodeArray(cursor, { ...param, type }, { length, staticPosition })\r\n  }\r\n  if (param.type === 'tuple')\r\n    return decodeTuple(cursor, param as TupleAbiParameter, { staticPosition })\r\n\r\n  if (param.type === 'address') return decodeAddress(cursor)\r\n  if (param.type === 'bool') return decodeBool(cursor)\r\n  if (param.type.startsWith('bytes'))\r\n    return decodeBytes(cursor, param, { staticPosition })\r\n  if (param.type.startsWith('uint') || param.type.startsWith('int'))\r\n    return decodeNumber(cursor, param)\r\n  if (param.type === 'string') return decodeString(cursor, { staticPosition })\r\n  throw new InvalidAbiDecodingTypeError(param.type, {\r\n    docsPath: '/docs/contract/decodeAbiParameters',\r\n  })\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////\r\n// Type Decoders\r\n\r\nconst sizeOfLength = 32\r\nconst sizeOfOffset = 32\r\n\r\ntype DecodeAddressErrorType =\r\n  | ChecksumAddressErrorType\r\n  | BytesToHexErrorType\r\n  | SliceBytesErrorType\r\n  | ErrorType\r\n\r\nfunction decodeAddress(cursor: Cursor) {\r\n  const value = cursor.readBytes(32)\r\n  return [checksumAddress(bytesToHex(sliceBytes(value, -20))), 32]\r\n}\r\n\r\ntype DecodeArrayErrorType = BytesToNumberErrorType | ErrorType\r\n\r\nfunction decodeArray(\r\n  cursor: Cursor,\r\n  param: AbiParameter,\r\n  { length, staticPosition }: { length: number | null; staticPosition: number },\r\n) {\r\n  // If the length of the array is not known in advance (dynamic array),\r\n  // this means we will need to wonder off to the pointer and decode.\r\n  if (!length) {\r\n    // Dealing with a dynamic type, so get the offset of the array data.\r\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset))\r\n\r\n    // Start is the static position of current slot + offset.\r\n    const start = staticPosition + offset\r\n    const startOfData = start + sizeOfLength\r\n\r\n    // Get the length of the array from the offset.\r\n    cursor.setPosition(start)\r\n    const length = bytesToNumber(cursor.readBytes(sizeOfLength))\r\n\r\n    // Check if the array has any dynamic children.\r\n    const dynamicChild = hasDynamicChild(param)\r\n\r\n    let consumed = 0\r\n    const value: unknown[] = []\r\n    for (let i = 0; i < length; ++i) {\r\n      // If any of the children is dynamic, then all elements will be offset pointer, thus size of one slot (32 bytes).\r\n      // Otherwise, elements will be the size of their encoding (consumed bytes).\r\n      cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed))\r\n      const [data, consumed_] = decodeParameter(cursor, param, {\r\n        staticPosition: startOfData,\r\n      })\r\n      consumed += consumed_\r\n      value.push(data)\r\n    }\r\n\r\n    // As we have gone wondering, restore to the original position + next slot.\r\n    cursor.setPosition(staticPosition + 32)\r\n    return [value, 32]\r\n  }\r\n\r\n  // If the length of the array is known in advance,\r\n  // and the length of an element deeply nested in the array is not known,\r\n  // we need to decode the offset of the array data.\r\n  if (hasDynamicChild(param)) {\r\n    // Dealing with dynamic types, so get the offset of the array data.\r\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset))\r\n\r\n    // Start is the static position of current slot + offset.\r\n    const start = staticPosition + offset\r\n\r\n    const value: unknown[] = []\r\n    for (let i = 0; i < length; ++i) {\r\n      // Move cursor along to the next slot (next offset pointer).\r\n      cursor.setPosition(start + i * 32)\r\n      const [data] = decodeParameter(cursor, param, {\r\n        staticPosition: start,\r\n      })\r\n      value.push(data)\r\n    }\r\n\r\n    // As we have gone wondering, restore to the original position + next slot.\r\n    cursor.setPosition(staticPosition + 32)\r\n    return [value, 32]\r\n  }\r\n\r\n  // If the length of the array is known in advance and the array is deeply static,\r\n  // then we can just decode each element in sequence.\r\n  let consumed = 0\r\n  const value: unknown[] = []\r\n  for (let i = 0; i < length; ++i) {\r\n    const [data, consumed_] = decodeParameter(cursor, param, {\r\n      staticPosition: staticPosition + consumed,\r\n    })\r\n    consumed += consumed_\r\n    value.push(data)\r\n  }\r\n  return [value, consumed]\r\n}\r\n\r\ntype DecodeBoolErrorType = BytesToBoolErrorType | ErrorType\r\n\r\nfunction decodeBool(cursor: Cursor) {\r\n  return [bytesToBool(cursor.readBytes(32), { size: 32 }), 32]\r\n}\r\n\r\ntype DecodeBytesErrorType =\r\n  | BytesToNumberErrorType\r\n  | BytesToHexErrorType\r\n  | ErrorType\r\n\r\nfunction decodeBytes(\r\n  cursor: Cursor,\r\n  param: AbiParameter,\r\n  { staticPosition }: { staticPosition: number },\r\n) {\r\n  const [_, size] = param.type.split('bytes')\r\n  if (!size) {\r\n    // Dealing with dynamic types, so get the offset of the bytes data.\r\n    const offset = bytesToNumber(cursor.readBytes(32))\r\n\r\n    // Set position of the cursor to start of bytes data.\r\n    cursor.setPosition(staticPosition + offset)\r\n\r\n    const length = bytesToNumber(cursor.readBytes(32))\r\n\r\n    // If there is no length, we have zero data.\r\n    if (length === 0) {\r\n      // As we have gone wondering, restore to the original position + next slot.\r\n      cursor.setPosition(staticPosition + 32)\r\n      return ['0x', 32]\r\n    }\r\n\r\n    const data = cursor.readBytes(length)\r\n\r\n    // As we have gone wondering, restore to the original position + next slot.\r\n    cursor.setPosition(staticPosition + 32)\r\n    return [bytesToHex(data), 32]\r\n  }\r\n\r\n  const value = bytesToHex(cursor.readBytes(Number.parseInt(size), 32))\r\n  return [value, 32]\r\n}\r\n\r\ntype DecodeNumberErrorType =\r\n  | BytesToNumberErrorType\r\n  | BytesToBigIntErrorType\r\n  | ErrorType\r\n\r\nfunction decodeNumber(cursor: Cursor, param: AbiParameter) {\r\n  const signed = param.type.startsWith('int')\r\n  const size = Number.parseInt(param.type.split('int')[1] || '256')\r\n  const value = cursor.readBytes(32)\r\n  return [\r\n    size > 48\r\n      ? bytesToBigInt(value, { signed })\r\n      : bytesToNumber(value, { signed }),\r\n    32,\r\n  ]\r\n}\r\n\r\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\r\n\r\ntype DecodeTupleErrorType = BytesToNumberErrorType | ErrorType\r\n\r\nfunction decodeTuple(\r\n  cursor: Cursor,\r\n  param: TupleAbiParameter,\r\n  { staticPosition }: { staticPosition: number },\r\n) {\r\n  // Tuples can have unnamed components (i.e. they are arrays), so we must\r\n  // determine whether the tuple is named or unnamed. In the case of a named\r\n  // tuple, the value will be an object where each property is the name of the\r\n  // component. In the case of an unnamed tuple, the value will be an array.\r\n  const hasUnnamedChild =\r\n    param.components.length === 0 || param.components.some(({ name }) => !name)\r\n\r\n  // Initialize the value to an object or an array, depending on whether the\r\n  // tuple is named or unnamed.\r\n  const value: any = hasUnnamedChild ? [] : {}\r\n  let consumed = 0\r\n\r\n  // If the tuple has a dynamic child, we must first decode the offset to the\r\n  // tuple data.\r\n  if (hasDynamicChild(param)) {\r\n    // Dealing with dynamic types, so get the offset of the tuple data.\r\n    const offset = bytesToNumber(cursor.readBytes(sizeOfOffset))\r\n\r\n    // Start is the static position of referencing slot + offset.\r\n    const start = staticPosition + offset\r\n\r\n    for (let i = 0; i < param.components.length; ++i) {\r\n      const component = param.components[i]\r\n      cursor.setPosition(start + consumed)\r\n      const [data, consumed_] = decodeParameter(cursor, component, {\r\n        staticPosition: start,\r\n      })\r\n      consumed += consumed_\r\n      value[hasUnnamedChild ? i : component?.name!] = data\r\n    }\r\n\r\n    // As we have gone wondering, restore to the original position + next slot.\r\n    cursor.setPosition(staticPosition + 32)\r\n    return [value, 32]\r\n  }\r\n\r\n  // If the tuple has static children, we can just decode each component\r\n  // in sequence.\r\n  for (let i = 0; i < param.components.length; ++i) {\r\n    const component = param.components[i]\r\n    const [data, consumed_] = decodeParameter(cursor, component, {\r\n      staticPosition,\r\n    })\r\n    value[hasUnnamedChild ? i : component?.name!] = data\r\n    consumed += consumed_\r\n  }\r\n  return [value, consumed]\r\n}\r\n\r\ntype DecodeStringErrorType =\r\n  | BytesToNumberErrorType\r\n  | BytesToStringErrorType\r\n  | TrimErrorType\r\n  | ErrorType\r\n\r\nfunction decodeString(\r\n  cursor: Cursor,\r\n  { staticPosition }: { staticPosition: number },\r\n) {\r\n  // Get offset to start of string data.\r\n  const offset = bytesToNumber(cursor.readBytes(32))\r\n\r\n  // Start is the static position of current slot + offset.\r\n  const start = staticPosition + offset\r\n  cursor.setPosition(start)\r\n\r\n  const length = bytesToNumber(cursor.readBytes(32))\r\n\r\n  // If there is no length, we have zero data (empty string).\r\n  if (length === 0) {\r\n    cursor.setPosition(staticPosition + 32)\r\n    return ['', 32]\r\n  }\r\n\r\n  const data = cursor.readBytes(length, 32)\r\n  const value = bytesToString(trim(data))\r\n\r\n  // As we have gone wondering, restore to the original position + next slot.\r\n  cursor.setPosition(staticPosition + 32)\r\n\r\n  return [value, 32]\r\n}\r\n\r\nfunction hasDynamicChild(param: AbiParameter) {\r\n  const { type } = param\r\n  if (type === 'string') return true\r\n  if (type === 'bytes') return true\r\n  if (type.endsWith('[]')) return true\r\n\r\n  if (type === 'tuple') return (param as any).components?.some(hasDynamicChild)\r\n\r\n  const arrayComponents = getArrayComponents(param.type)\r\n  if (\r\n    arrayComponents &&\r\n    hasDynamicChild({ ...param, type: arrayComponents[1] } as AbiParameter)\r\n  )\r\n    return true\r\n\r\n  return false\r\n}\r\n", "import type { Abi, ExtractAbiError } from 'abitype'\r\n\r\nimport { solidityError, solidityPanic } from '../../constants/solidity.js'\r\nimport {\r\n  AbiDecodingZeroDataError,\r\n  type AbiDecodingZeroDataErrorType,\r\n  AbiErrorSignatureNotFoundError,\r\n  type AbiErrorSignatureNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type {\r\n  AbiItem,\r\n  ContractErrorArgs,\r\n  ContractErrorName,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport { slice } from '../data/slice.js'\r\nimport {\r\n  type ToFunctionSelectorErrorType,\r\n  toFunctionSelector,\r\n} from '../hash/toFunctionSelector.js'\r\nimport {\r\n  type DecodeAbiParametersErrorType,\r\n  decodeAbiParameters,\r\n} from './decodeAbiParameters.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\n\r\nexport type DecodeErrorResultParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n> = { abi?: abi | undefined; data: Hex }\r\n\r\nexport type DecodeErrorResultReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  ///\r\n  allErrorNames extends ContractErrorName<abi> = ContractErrorName<abi>,\r\n> = IsNarrowable<abi, Abi> extends true\r\n  ? UnionEvaluate<\r\n      {\r\n        [errorName in allErrorNames]: {\r\n          abiItem: abi extends Abi\r\n            ? Abi extends abi\r\n              ? AbiItem\r\n              : ExtractAbiError<abi, errorName>\r\n            : AbiItem\r\n          args: ContractErrorArgs<abi, errorName>\r\n          errorName: errorName\r\n        }\r\n      }[allErrorNames]\r\n    >\r\n  : {\r\n      abiItem: AbiItem\r\n      args: readonly unknown[] | undefined\r\n      errorName: string\r\n    }\r\n\r\nexport type DecodeErrorResultErrorType =\r\n  | AbiDecodingZeroDataErrorType\r\n  | AbiErrorSignatureNotFoundErrorType\r\n  | DecodeAbiParametersErrorType\r\n  | FormatAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function decodeErrorResult<const abi extends Abi | readonly unknown[]>(\r\n  parameters: DecodeErrorResultParameters<abi>,\r\n): DecodeErrorResultReturnType<abi> {\r\n  const { abi, data } = parameters as DecodeErrorResultParameters\r\n\r\n  const signature = slice(data, 0, 4)\r\n  if (signature === '0x') throw new AbiDecodingZeroDataError()\r\n\r\n  const abi_ = [...(abi || []), solidityError, solidityPanic]\r\n  const abiItem = abi_.find(\r\n    (x) =>\r\n      x.type === 'error' && signature === toFunctionSelector(formatAbiItem(x)),\r\n  )\r\n  if (!abiItem)\r\n    throw new AbiErrorSignatureNotFoundError(signature, {\r\n      docsPath: '/docs/contract/decodeErrorResult',\r\n    })\r\n  return {\r\n    abiItem,\r\n    args:\r\n      'inputs' in abiItem && abiItem.inputs && abiItem.inputs.length > 0\r\n        ? decodeAbiParameters(abiItem.inputs, slice(data, 4))\r\n        : undefined,\r\n    errorName: (abiItem as { name: string }).name,\r\n  } as DecodeErrorResultReturnType<abi>\r\n}\r\n", "import type { ErrorType } from '../errors/utils.js'\r\n\r\nexport type StringifyErrorType = ErrorType\r\n\r\nexport const stringify: typeof JSON.stringify = (value, replacer, space) =>\r\n  JSON.stringify(\r\n    value,\r\n    (key, value_) => {\r\n      const value = typeof value_ === 'bigint' ? value_.toString() : value_\r\n      return typeof replacer === 'function' ? replacer(key, value) : value\r\n    },\r\n    space,\r\n  )\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type ToSignatureHashErrorType,\r\n  toSignatureHash,\r\n} from './toSignatureHash.js'\r\n\r\nexport type ToEventSelectorErrorType = ToSignatureHashErrorType | ErrorType\r\n\r\n/**\r\n * Returns the event selector for a given event definition.\r\n *\r\n * @example\r\n * const selector = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')\r\n * // 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\r\n */\r\nexport const toEventSelector = toSignatureHash\r\n", "import type { Abi, AbiParameter, Address } from 'abitype'\r\n\r\nimport {\r\n  AbiItemAmbiguityError,\r\n  type AbiItemAmbiguityErrorType,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type {\r\n  AbiItem,\r\n  AbiItemArgs,\r\n  AbiItemName,\r\n  ExtractAbiItemForArgs,\r\n  Widen,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { UnionEvaluate } from '../../types/utils.js'\r\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\r\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\r\nimport { toEventSelector } from '../hash/toEventSelector.js'\r\nimport {\r\n  type ToFunctionSelectorErrorType,\r\n  toFunctionSelector,\r\n} from '../hash/toFunctionSelector.js'\r\n\r\nexport type GetAbiItemParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  name extends AbiItemName<abi> = AbiItemName<abi>,\r\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\r\n  ///\r\n  allArgs = AbiItemArgs<abi, name>,\r\n  allNames = AbiItemName<abi>,\r\n> = {\r\n  abi: abi\r\n  name:\r\n    | allNames // show all options\r\n    | (name extends allNames ? name : never) // infer value\r\n    | Hex // function selector\r\n} & UnionEvaluate<\r\n  readonly [] extends allArgs\r\n    ? {\r\n        args?:\r\n          | allArgs // show all options\r\n          // infer value, widen inferred value of `args` conditionally to match `allArgs`\r\n          | (abi extends Abi\r\n              ? args extends allArgs\r\n                ? Widen<args>\r\n                : never\r\n              : never)\r\n          | undefined\r\n      }\r\n    : {\r\n        args?:\r\n          | allArgs // show all options\r\n          | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\r\n          | undefined\r\n      }\r\n>\r\n\r\nexport type GetAbiItemErrorType =\r\n  | IsArgOfTypeErrorType\r\n  | IsHexErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | AbiItemAmbiguityErrorType\r\n  | ErrorType\r\n\r\nexport type GetAbiItemReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  name extends AbiItemName<abi> = AbiItemName<abi>,\r\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\r\n> = abi extends Abi\r\n  ? Abi extends abi\r\n    ? AbiItem | undefined\r\n    : ExtractAbiItemForArgs<\r\n        abi,\r\n        name,\r\n        args extends AbiItemArgs<abi, name> ? args : AbiItemArgs<abi, name>\r\n      >\r\n  : AbiItem | undefined\r\n\r\nexport function getAbiItem<\r\n  const abi extends Abi | readonly unknown[],\r\n  name extends AbiItemName<abi>,\r\n  const args extends AbiItemArgs<abi, name> | undefined = undefined,\r\n>(\r\n  parameters: GetAbiItemParameters<abi, name, args>,\r\n): GetAbiItemReturnType<abi, name, args> {\r\n  const { abi, args = [], name } = parameters as unknown as GetAbiItemParameters\r\n\r\n  const isSelector = isHex(name, { strict: false })\r\n  const abiItems = (abi as Abi).filter((abiItem) => {\r\n    if (isSelector) {\r\n      if (abiItem.type === 'function')\r\n        return toFunctionSelector(abiItem) === name\r\n      if (abiItem.type === 'event') return toEventSelector(abiItem) === name\r\n      return false\r\n    }\r\n    return 'name' in abiItem && abiItem.name === name\r\n  })\r\n\r\n  if (abiItems.length === 0)\r\n    return undefined as GetAbiItemReturnType<abi, name, args>\r\n  if (abiItems.length === 1)\r\n    return abiItems[0] as GetAbiItemReturnType<abi, name, args>\r\n\r\n  let matchedAbiItem: AbiItem | undefined = undefined\r\n  for (const abiItem of abiItems) {\r\n    if (!('inputs' in abiItem)) continue\r\n    if (!args || args.length === 0) {\r\n      if (!abiItem.inputs || abiItem.inputs.length === 0)\r\n        return abiItem as GetAbiItemReturnType<abi, name, args>\r\n      continue\r\n    }\r\n    if (!abiItem.inputs) continue\r\n    if (abiItem.inputs.length === 0) continue\r\n    if (abiItem.inputs.length !== args.length) continue\r\n    const matched = args.every((arg, index) => {\r\n      const abiParameter = 'inputs' in abiItem && abiItem.inputs![index]\r\n      if (!abiParameter) return false\r\n      return isArgOfType(arg, abiParameter)\r\n    })\r\n    if (matched) {\r\n      // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\r\n      if (\r\n        matchedAbiItem &&\r\n        'inputs' in matchedAbiItem &&\r\n        matchedAbiItem.inputs\r\n      ) {\r\n        const ambiguousTypes = getAmbiguousTypes(\r\n          abiItem.inputs,\r\n          matchedAbiItem.inputs,\r\n          args as readonly unknown[],\r\n        )\r\n        if (ambiguousTypes)\r\n          throw new AbiItemAmbiguityError(\r\n            {\r\n              abiItem,\r\n              type: ambiguousTypes[0],\r\n            },\r\n            {\r\n              abiItem: matchedAbiItem,\r\n              type: ambiguousTypes[1],\r\n            },\r\n          )\r\n      }\r\n\r\n      matchedAbiItem = abiItem\r\n    }\r\n  }\r\n\r\n  if (matchedAbiItem)\r\n    return matchedAbiItem as GetAbiItemReturnType<abi, name, args>\r\n  return abiItems[0] as GetAbiItemReturnType<abi, name, args>\r\n}\r\n\r\ntype IsArgOfTypeErrorType = IsAddressErrorType | ErrorType\r\n\r\n/** @internal */\r\nexport function isArgOfType(arg: unknown, abiParameter: AbiParameter): boolean {\r\n  const argType = typeof arg\r\n  const abiParameterType = abiParameter.type\r\n  switch (abiParameterType) {\r\n    case 'address':\r\n      return isAddress(arg as Address, { strict: false })\r\n    case 'bool':\r\n      return argType === 'boolean'\r\n    case 'function':\r\n      return argType === 'string'\r\n    case 'string':\r\n      return argType === 'string'\r\n    default: {\r\n      if (abiParameterType === 'tuple' && 'components' in abiParameter)\r\n        return Object.values(abiParameter.components).every(\r\n          (component, index) => {\r\n            return isArgOfType(\r\n              Object.values(arg as unknown[] | Record<string, unknown>)[index],\r\n              component as AbiParameter,\r\n            )\r\n          },\r\n        )\r\n\r\n      // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\r\n      // https://regexr.com/6v8hp\r\n      if (\r\n        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(\r\n          abiParameterType,\r\n        )\r\n      )\r\n        return argType === 'number' || argType === 'bigint'\r\n\r\n      // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\r\n      // https://regexr.com/6va55\r\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\r\n        return argType === 'string' || arg instanceof Uint8Array\r\n\r\n      // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\r\n      // https://regexr.com/6va6i\r\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\r\n        return (\r\n          Array.isArray(arg) &&\r\n          arg.every((x: unknown) =>\r\n            isArgOfType(x, {\r\n              ...abiParameter,\r\n              // Pop off `[]` or `[M]` from end of type\r\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\r\n            } as AbiParameter),\r\n          )\r\n        )\r\n      }\r\n\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function getAmbiguousTypes(\r\n  sourceParameters: readonly AbiParameter[],\r\n  targetParameters: readonly AbiParameter[],\r\n  args: AbiItemArgs,\r\n): AbiParameter['type'][] | undefined {\r\n  for (const parameterIndex in sourceParameters) {\r\n    const sourceParameter = sourceParameters[parameterIndex]\r\n    const targetParameter = targetParameters[parameterIndex]\r\n\r\n    if (\r\n      sourceParameter.type === 'tuple' &&\r\n      targetParameter.type === 'tuple' &&\r\n      'components' in sourceParameter &&\r\n      'components' in targetParameter\r\n    )\r\n      return getAmbiguousTypes(\r\n        sourceParameter.components,\r\n        targetParameter.components,\r\n        (args as any)[parameterIndex],\r\n      )\r\n\r\n    const types = [sourceParameter.type, targetParameter.type]\r\n\r\n    const ambiguous = (() => {\r\n      if (types.includes('address') && types.includes('bytes20')) return true\r\n      if (types.includes('address') && types.includes('string'))\r\n        return isAddress(args[parameterIndex] as Address, { strict: false })\r\n      if (types.includes('address') && types.includes('bytes'))\r\n        return isAddress(args[parameterIndex] as Address, { strict: false })\r\n      return false\r\n    })()\r\n\r\n    if (ambiguous) return types\r\n  }\r\n\r\n  return\r\n}\r\n", "export const etherUnits = {\r\n  gwei: 9,\r\n  wei: 18,\r\n}\r\nexport const gweiUnits = {\r\n  ether: -9,\r\n  wei: 9,\r\n}\r\nexport const weiUnits = {\r\n  ether: -18,\r\n  gwei: -9,\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\n\r\nexport type FormatUnitsErrorType = ErrorType\r\n\r\n/**\r\n *  Divides a number by a given exponent of base 10 (10exponent), and formats it into a string representation of the number..\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/formatUnits\r\n *\r\n * @example\r\n * import { formatUnits } from 'viem'\r\n *\r\n * formatUnits(420000000000n, 9)\r\n * // '420'\r\n */\r\nexport function formatUnits(value: bigint, decimals: number) {\r\n  let display = value.toString()\r\n\r\n  const negative = display.startsWith('-')\r\n  if (negative) display = display.slice(1)\r\n\r\n  display = display.padStart(decimals, '0')\r\n\r\n  let [integer, fraction] = [\r\n    display.slice(0, display.length - decimals),\r\n    display.slice(display.length - decimals),\r\n  ]\r\n  fraction = fraction.replace(/(0+)$/, '')\r\n  return `${negative ? '-' : ''}${integer || '0'}${\r\n    fraction ? `.${fraction}` : ''\r\n  }`\r\n}\r\n", "import { etherUnits } from '../../constants/unit.js'\r\n\r\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\r\n\r\nexport type FormatEtherErrorType = FormatUnitsErrorType\r\n\r\n/**\r\n * Converts numerical wei to a string representation of ether.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/formatEther\r\n *\r\n * @example\r\n * import { formatEther } from 'viem'\r\n *\r\n * formatEther(1000000000000000000n)\r\n * // '1'\r\n */\r\nexport function formatEther(wei: bigint, unit: 'wei' | 'gwei' = 'wei') {\r\n  return formatUnits(wei, etherUnits[unit])\r\n}\r\n", "import { gweiUnits } from '../../constants/unit.js'\r\n\r\nimport { type FormatUnitsErrorType, formatUnits } from './formatUnits.js'\r\n\r\nexport type FormatGweiErrorType = FormatUnitsErrorType\r\n\r\n/**\r\n * Converts numerical wei to a string representation of gwei.\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/formatGwei\r\n *\r\n * @example\r\n * import { formatGwei } from 'viem'\r\n *\r\n * formatGwei(1000000000n)\r\n * // '1'\r\n */\r\nexport function formatGwei(wei: bigint, unit: 'wei' = 'wei') {\r\n  return formatUnits(wei, gweiUnits[unit])\r\n}\r\n", "import type { StateMapping, StateOverride } from '../types/stateOverride.js'\r\nimport { BaseError } from './base.js'\r\n\r\nexport type AccountStateConflictErrorType = AccountStateConflictError & {\r\n  name: 'AccountStateConflictError'\r\n}\r\n\r\nexport class AccountStateConflictError extends BaseError {\r\n  constructor({ address }: { address: string }) {\r\n    super(`State for account \"${address}\" is set multiple times.`, {\r\n      name: 'AccountStateConflictError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type StateAssignmentConflictErrorType = StateAssignmentConflictError & {\r\n  name: 'StateAssignmentConflictError'\r\n}\r\n\r\nexport class StateAssignmentConflictError extends BaseError {\r\n  constructor() {\r\n    super('state and stateDiff are set on the same account.', {\r\n      name: 'StateAssignmentConflictError',\r\n    })\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function prettyStateMapping(stateMapping: StateMapping) {\r\n  return stateMapping.reduce((pretty, { slot, value }) => {\r\n    return `${pretty}        ${slot}: ${value}\\n`\r\n  }, '')\r\n}\r\n\r\nexport function prettyStateOverride(stateOverride: StateOverride) {\r\n  return stateOverride\r\n    .reduce((pretty, { address, ...state }) => {\r\n      let val = `${pretty}    ${address}:\\n`\r\n      if (state.nonce) val += `      nonce: ${state.nonce}\\n`\r\n      if (state.balance) val += `      balance: ${state.balance}\\n`\r\n      if (state.code) val += `      code: ${state.code}\\n`\r\n      if (state.state) {\r\n        val += '      state:\\n'\r\n        val += prettyStateMapping(state.state)\r\n      }\r\n      if (state.stateDiff) {\r\n        val += '      stateDiff:\\n'\r\n        val += prettyStateMapping(state.stateDiff)\r\n      }\r\n      return val\r\n    }, '  State Override:\\n')\r\n    .slice(0, -1)\r\n}\r\n", "import type { Account } from '../accounts/types.js'\r\nimport type { SendTransactionParameters } from '../actions/wallet/sendTransaction.js'\r\nimport type { BlockTag } from '../types/block.js'\r\nimport type { Chain } from '../types/chain.js'\r\nimport type { Hash, Hex } from '../types/misc.js'\r\nimport type { TransactionType } from '../types/transaction.js'\r\nimport { formatEther } from '../utils/unit/formatEther.js'\r\nimport { formatGwei } from '../utils/unit/formatGwei.js'\r\n\r\nimport { BaseError } from './base.js'\r\n\r\nexport function prettyPrint(\r\n  args: Record<string, bigint | number | string | undefined | false | unknown>,\r\n) {\r\n  const entries = Object.entries(args)\r\n    .map(([key, value]) => {\r\n      if (value === undefined || value === false) return null\r\n      return [key, value]\r\n    })\r\n    .filter(Boolean) as [string, string][]\r\n  const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0)\r\n  return entries\r\n    .map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`)\r\n    .join('\\n')\r\n}\r\n\r\nexport type FeeConflictErrorType = FeeConflictError & {\r\n  name: 'FeeConflictError'\r\n}\r\nexport class FeeConflictError extends BaseError {\r\n  constructor() {\r\n    super(\r\n      [\r\n        'Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.',\r\n        'Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others.',\r\n      ].join('\\n'),\r\n      { name: 'FeeConflictError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InvalidLegacyVErrorType = InvalidLegacyVError & {\r\n  name: 'InvalidLegacyVError'\r\n}\r\nexport class InvalidLegacyVError extends BaseError {\r\n  constructor({ v }: { v: bigint }) {\r\n    super(`Invalid \\`v\\` value \"${v}\". Expected 27 or 28.`, {\r\n      name: 'InvalidLegacyVError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidSerializableTransactionErrorType =\r\n  InvalidSerializableTransactionError & {\r\n    name: 'InvalidSerializableTransactionError'\r\n  }\r\nexport class InvalidSerializableTransactionError extends BaseError {\r\n  constructor({ transaction }: { transaction: Record<string, unknown> }) {\r\n    super('Cannot infer a transaction type from provided transaction.', {\r\n      metaMessages: [\r\n        'Provided Transaction:',\r\n        '{',\r\n        prettyPrint(transaction),\r\n        '}',\r\n        '',\r\n        'To infer the type, either provide:',\r\n        '- a `type` to the Transaction, or',\r\n        '- an EIP-1559 Transaction with `maxFeePerGas`, or',\r\n        '- an EIP-2930 Transaction with `gasPrice` & `accessList`, or',\r\n        '- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or',\r\n        '- an EIP-7702 Transaction with `authorizationList`, or',\r\n        '- a Legacy Transaction with `gasPrice`',\r\n      ],\r\n      name: 'InvalidSerializableTransactionError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type InvalidSerializedTransactionTypeErrorType =\r\n  InvalidSerializedTransactionTypeError & {\r\n    name: 'InvalidSerializedTransactionTypeError'\r\n  }\r\nexport class InvalidSerializedTransactionTypeError extends BaseError {\r\n  serializedType: Hex\r\n\r\n  constructor({ serializedType }: { serializedType: Hex }) {\r\n    super(`Serialized transaction type \"${serializedType}\" is invalid.`, {\r\n      name: 'InvalidSerializedTransactionType',\r\n    })\r\n\r\n    this.serializedType = serializedType\r\n  }\r\n}\r\n\r\nexport type InvalidSerializedTransactionErrorType =\r\n  InvalidSerializedTransactionError & {\r\n    name: 'InvalidSerializedTransactionError'\r\n  }\r\nexport class InvalidSerializedTransactionError extends BaseError {\r\n  serializedTransaction: Hex\r\n  type: TransactionType\r\n\r\n  constructor({\r\n    attributes,\r\n    serializedTransaction,\r\n    type,\r\n  }: {\r\n    attributes: Record<string, unknown>\r\n    serializedTransaction: Hex\r\n    type: TransactionType\r\n  }) {\r\n    const missing = Object.entries(attributes)\r\n      .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\r\n      .filter(Boolean)\r\n    super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\r\n      metaMessages: [\r\n        `Serialized Transaction: \"${serializedTransaction}\"`,\r\n        missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\r\n      ].filter(Boolean),\r\n      name: 'InvalidSerializedTransactionError',\r\n    })\r\n\r\n    this.serializedTransaction = serializedTransaction\r\n    this.type = type\r\n  }\r\n}\r\n\r\nexport type InvalidStorageKeySizeErrorType = InvalidStorageKeySizeError & {\r\n  name: 'InvalidStorageKeySizeError'\r\n}\r\nexport class InvalidStorageKeySizeError extends BaseError {\r\n  constructor({ storageKey }: { storageKey: Hex }) {\r\n    super(\r\n      `Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${Math.floor(\r\n        (storageKey.length - 2) / 2,\r\n      )} bytes.`,\r\n      { name: 'InvalidStorageKeySizeError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type TransactionExecutionErrorType = TransactionExecutionError & {\r\n  name: 'TransactionExecutionError'\r\n}\r\nexport class TransactionExecutionError extends BaseError {\r\n  override cause: BaseError\r\n\r\n  constructor(\r\n    cause: BaseError,\r\n    {\r\n      account,\r\n      docsPath,\r\n      chain,\r\n      data,\r\n      gas,\r\n      gasPrice,\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas,\r\n      nonce,\r\n      to,\r\n      value,\r\n    }: Omit<SendTransactionParameters, 'account' | 'chain'> & {\r\n      account: Account | null\r\n      chain?: Chain | undefined\r\n      docsPath?: string | undefined\r\n    },\r\n  ) {\r\n    const prettyArgs = prettyPrint({\r\n      chain: chain && `${chain?.name} (id: ${chain?.id})`,\r\n      from: account?.address,\r\n      to,\r\n      value:\r\n        typeof value !== 'undefined' &&\r\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\r\n      data,\r\n      gas,\r\n      gasPrice:\r\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\r\n      maxFeePerGas:\r\n        typeof maxFeePerGas !== 'undefined' &&\r\n        `${formatGwei(maxFeePerGas)} gwei`,\r\n      maxPriorityFeePerGas:\r\n        typeof maxPriorityFeePerGas !== 'undefined' &&\r\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\r\n      nonce,\r\n    })\r\n\r\n    super(cause.shortMessage, {\r\n      cause,\r\n      docsPath,\r\n      metaMessages: [\r\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\r\n        'Request Arguments:',\r\n        prettyArgs,\r\n      ].filter(Boolean) as string[],\r\n      name: 'TransactionExecutionError',\r\n    })\r\n    this.cause = cause\r\n  }\r\n}\r\n\r\nexport type TransactionNotFoundErrorType = TransactionNotFoundError & {\r\n  name: 'TransactionNotFoundError'\r\n}\r\nexport class TransactionNotFoundError extends BaseError {\r\n  constructor({\r\n    blockHash,\r\n    blockNumber,\r\n    blockTag,\r\n    hash,\r\n    index,\r\n  }: {\r\n    blockHash?: Hash | undefined\r\n    blockNumber?: bigint | undefined\r\n    blockTag?: BlockTag | undefined\r\n    hash?: Hash | undefined\r\n    index?: number | undefined\r\n  }) {\r\n    let identifier = 'Transaction'\r\n    if (blockTag && index !== undefined)\r\n      identifier = `Transaction at block time \"${blockTag}\" at index \"${index}\"`\r\n    if (blockHash && index !== undefined)\r\n      identifier = `Transaction at block hash \"${blockHash}\" at index \"${index}\"`\r\n    if (blockNumber && index !== undefined)\r\n      identifier = `Transaction at block number \"${blockNumber}\" at index \"${index}\"`\r\n    if (hash) identifier = `Transaction with hash \"${hash}\"`\r\n    super(`${identifier} could not be found.`, {\r\n      name: 'TransactionNotFoundError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type TransactionReceiptNotFoundErrorType =\r\n  TransactionReceiptNotFoundError & {\r\n    name: 'TransactionReceiptNotFoundError'\r\n  }\r\nexport class TransactionReceiptNotFoundError extends BaseError {\r\n  constructor({ hash }: { hash: Hash }) {\r\n    super(\r\n      `Transaction receipt with hash \"${hash}\" could not be found. The Transaction may not be processed on a block yet.`,\r\n      {\r\n        name: 'TransactionReceiptNotFoundError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type WaitForTransactionReceiptTimeoutErrorType =\r\n  WaitForTransactionReceiptTimeoutError & {\r\n    name: 'WaitForTransactionReceiptTimeoutError'\r\n  }\r\nexport class WaitForTransactionReceiptTimeoutError extends BaseError {\r\n  constructor({ hash }: { hash: Hash }) {\r\n    super(\r\n      `Timed out while waiting for transaction with hash \"${hash}\" to be confirmed.`,\r\n      { name: 'WaitForTransactionReceiptTimeoutError' },\r\n    )\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nexport type ErrorType<name extends string = 'Error'> = Error & { name: name }\r\n\r\nexport const getContractAddress = (address: Address) => address\r\nexport const getUrl = (url: string) => url\r\n", "import type { Abi, Address } from 'abitype'\r\n\r\nimport { parseAccount } from '../accounts/utils/parseAccount.js'\r\nimport type { CallParameters } from '../actions/public/call.js'\r\nimport { panicReasons } from '../constants/solidity.js'\r\nimport type { Chain } from '../types/chain.js'\r\nimport type { Hex } from '../types/misc.js'\r\nimport {\r\n  type DecodeErrorResultReturnType,\r\n  decodeErrorResult,\r\n} from '../utils/abi/decodeErrorResult.js'\r\nimport { formatAbiItem } from '../utils/abi/formatAbiItem.js'\r\nimport { formatAbiItemWithArgs } from '../utils/abi/formatAbiItemWithArgs.js'\r\nimport { getAbiItem } from '../utils/abi/getAbiItem.js'\r\nimport { formatEther } from '../utils/unit/formatEther.js'\r\nimport { formatGwei } from '../utils/unit/formatGwei.js'\r\n\r\nimport { AbiErrorSignatureNotFoundError } from './abi.js'\r\nimport { BaseError } from './base.js'\r\nimport { prettyStateOverride } from './stateOverride.js'\r\nimport { prettyPrint } from './transaction.js'\r\nimport { getContractAddress } from './utils.js'\r\n\r\nexport type CallExecutionErrorType = CallExecutionError & {\r\n  name: 'CallExecutionError'\r\n}\r\nexport class CallExecutionError extends BaseError {\r\n  override cause: BaseError\r\n\r\n  constructor(\r\n    cause: BaseError,\r\n    {\r\n      account: account_,\r\n      docsPath,\r\n      chain,\r\n      data,\r\n      gas,\r\n      gasPrice,\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas,\r\n      nonce,\r\n      to,\r\n      value,\r\n      stateOverride,\r\n    }: CallParameters & {\r\n      chain?: Chain | undefined\r\n      docsPath?: string | undefined\r\n    },\r\n  ) {\r\n    const account = account_ ? parseAccount(account_) : undefined\r\n    let prettyArgs = prettyPrint({\r\n      from: account?.address,\r\n      to,\r\n      value:\r\n        typeof value !== 'undefined' &&\r\n        `${formatEther(value)} ${chain?.nativeCurrency?.symbol || 'ETH'}`,\r\n      data,\r\n      gas,\r\n      gasPrice:\r\n        typeof gasPrice !== 'undefined' && `${formatGwei(gasPrice)} gwei`,\r\n      maxFeePerGas:\r\n        typeof maxFeePerGas !== 'undefined' &&\r\n        `${formatGwei(maxFeePerGas)} gwei`,\r\n      maxPriorityFeePerGas:\r\n        typeof maxPriorityFeePerGas !== 'undefined' &&\r\n        `${formatGwei(maxPriorityFeePerGas)} gwei`,\r\n      nonce,\r\n    })\r\n\r\n    if (stateOverride) {\r\n      prettyArgs += `\\n${prettyStateOverride(stateOverride)}`\r\n    }\r\n\r\n    super(cause.shortMessage, {\r\n      cause,\r\n      docsPath,\r\n      metaMessages: [\r\n        ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\r\n        'Raw Call Arguments:',\r\n        prettyArgs,\r\n      ].filter(Boolean) as string[],\r\n      name: 'CallExecutionError',\r\n    })\r\n    this.cause = cause\r\n  }\r\n}\r\n\r\nexport type ContractFunctionExecutionErrorType =\r\n  ContractFunctionExecutionError & {\r\n    name: 'ContractFunctionExecutionError'\r\n  }\r\nexport class ContractFunctionExecutionError extends BaseError {\r\n  abi: Abi\r\n  args?: unknown[] | undefined\r\n  override cause: BaseError\r\n  contractAddress?: Address | undefined\r\n  formattedArgs?: string | undefined\r\n  functionName: string\r\n  sender?: Address | undefined\r\n\r\n  constructor(\r\n    cause: BaseError,\r\n    {\r\n      abi,\r\n      args,\r\n      contractAddress,\r\n      docsPath,\r\n      functionName,\r\n      sender,\r\n    }: {\r\n      abi: Abi\r\n      args?: any | undefined\r\n      contractAddress?: Address | undefined\r\n      docsPath?: string | undefined\r\n      functionName: string\r\n      sender?: Address | undefined\r\n    },\r\n  ) {\r\n    const abiItem = getAbiItem({ abi, args, name: functionName })\r\n    const formattedArgs = abiItem\r\n      ? formatAbiItemWithArgs({\r\n          abiItem,\r\n          args,\r\n          includeFunctionName: false,\r\n          includeName: false,\r\n        })\r\n      : undefined\r\n    const functionWithParams = abiItem\r\n      ? formatAbiItem(abiItem, { includeName: true })\r\n      : undefined\r\n\r\n    const prettyArgs = prettyPrint({\r\n      address: contractAddress && getContractAddress(contractAddress),\r\n      function: functionWithParams,\r\n      args:\r\n        formattedArgs &&\r\n        formattedArgs !== '()' &&\r\n        `${[...Array(functionName?.length ?? 0).keys()]\r\n          .map(() => ' ')\r\n          .join('')}${formattedArgs}`,\r\n      sender,\r\n    })\r\n\r\n    super(\r\n      cause.shortMessage ||\r\n        `An unknown error occurred while executing the contract function \"${functionName}\".`,\r\n      {\r\n        cause,\r\n        docsPath,\r\n        metaMessages: [\r\n          ...(cause.metaMessages ? [...cause.metaMessages, ' '] : []),\r\n          prettyArgs && 'Contract Call:',\r\n          prettyArgs,\r\n        ].filter(Boolean) as string[],\r\n        name: 'ContractFunctionExecutionError',\r\n      },\r\n    )\r\n    this.abi = abi\r\n    this.args = args\r\n    this.cause = cause\r\n    this.contractAddress = contractAddress\r\n    this.functionName = functionName\r\n    this.sender = sender\r\n  }\r\n}\r\n\r\nexport type ContractFunctionRevertedErrorType =\r\n  ContractFunctionRevertedError & {\r\n    name: 'ContractFunctionRevertedError'\r\n  }\r\nexport class ContractFunctionRevertedError extends BaseError {\r\n  data?: DecodeErrorResultReturnType | undefined\r\n  raw?: Hex | undefined\r\n  reason?: string | undefined\r\n  signature?: Hex | undefined\r\n\r\n  constructor({\r\n    abi,\r\n    data,\r\n    functionName,\r\n    message,\r\n  }: {\r\n    abi: Abi\r\n    data?: Hex | undefined\r\n    functionName: string\r\n    message?: string | undefined\r\n  }) {\r\n    let cause: Error | undefined\r\n    let decodedData: DecodeErrorResultReturnType | undefined = undefined\r\n    let metaMessages: string[] | undefined\r\n    let reason: string | undefined\r\n    if (data && data !== '0x') {\r\n      try {\r\n        decodedData = decodeErrorResult({ abi, data })\r\n        const { abiItem, errorName, args: errorArgs } = decodedData\r\n        if (errorName === 'Error') {\r\n          reason = (errorArgs as [string])[0]\r\n        } else if (errorName === 'Panic') {\r\n          const [firstArg] = errorArgs as [number]\r\n          reason = panicReasons[firstArg as keyof typeof panicReasons]\r\n        } else {\r\n          const errorWithParams = abiItem\r\n            ? formatAbiItem(abiItem, { includeName: true })\r\n            : undefined\r\n          const formattedArgs =\r\n            abiItem && errorArgs\r\n              ? formatAbiItemWithArgs({\r\n                  abiItem,\r\n                  args: errorArgs,\r\n                  includeFunctionName: false,\r\n                  includeName: false,\r\n                })\r\n              : undefined\r\n\r\n          metaMessages = [\r\n            errorWithParams ? `Error: ${errorWithParams}` : '',\r\n            formattedArgs && formattedArgs !== '()'\r\n              ? `       ${[...Array(errorName?.length ?? 0).keys()]\r\n                  .map(() => ' ')\r\n                  .join('')}${formattedArgs}`\r\n              : '',\r\n          ]\r\n        }\r\n      } catch (err) {\r\n        cause = err as Error\r\n      }\r\n    } else if (message) reason = message\r\n\r\n    let signature: Hex | undefined\r\n    if (cause instanceof AbiErrorSignatureNotFoundError) {\r\n      signature = cause.signature\r\n      metaMessages = [\r\n        `Unable to decode signature \"${signature}\" as it was not found on the provided ABI.`,\r\n        'Make sure you are using the correct ABI and that the error exists on it.',\r\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\r\n      ]\r\n    }\r\n\r\n    super(\r\n      (reason && reason !== 'execution reverted') || signature\r\n        ? [\r\n            `The contract function \"${functionName}\" reverted with the following ${\r\n              signature ? 'signature' : 'reason'\r\n            }:`,\r\n            reason || signature,\r\n          ].join('\\n')\r\n        : `The contract function \"${functionName}\" reverted.`,\r\n      {\r\n        cause,\r\n        metaMessages,\r\n        name: 'ContractFunctionRevertedError',\r\n      },\r\n    )\r\n\r\n    this.data = decodedData\r\n    this.raw = data\r\n    this.reason = reason\r\n    this.signature = signature\r\n  }\r\n}\r\n\r\nexport type ContractFunctionZeroDataErrorType =\r\n  ContractFunctionZeroDataError & {\r\n    name: 'ContractFunctionZeroDataError'\r\n  }\r\nexport class ContractFunctionZeroDataError extends BaseError {\r\n  constructor({ functionName }: { functionName: string }) {\r\n    super(`The contract function \"${functionName}\" returned no data (\"0x\").`, {\r\n      metaMessages: [\r\n        'This could be due to any of the following:',\r\n        `  - The contract does not have the function \"${functionName}\",`,\r\n        '  - The parameters passed to the contract function may be invalid, or',\r\n        '  - The address is not a contract.',\r\n      ],\r\n      name: 'ContractFunctionZeroDataError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type CounterfactualDeploymentFailedErrorType =\r\n  CounterfactualDeploymentFailedError & {\r\n    name: 'CounterfactualDeploymentFailedError'\r\n  }\r\nexport class CounterfactualDeploymentFailedError extends BaseError {\r\n  constructor({ factory }: { factory?: Address | undefined }) {\r\n    super(\r\n      `Deployment for counterfactual contract call failed${\r\n        factory ? ` for factory \"${factory}\".` : ''\r\n      }`,\r\n      {\r\n        metaMessages: [\r\n          'Please ensure:',\r\n          '- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).',\r\n          '- The `factoryData` is a valid encoded function call for contract deployment function on the factory.',\r\n        ],\r\n        name: 'CounterfactualDeploymentFailedError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type RawContractErrorType = RawContractError & {\r\n  name: 'RawContractError'\r\n}\r\nexport class RawContractError extends BaseError {\r\n  code = 3\r\n\r\n  data?: Hex | { data?: Hex | undefined } | undefined\r\n\r\n  constructor({\r\n    data,\r\n    message,\r\n  }: {\r\n    data?: Hex | { data?: Hex | undefined } | undefined\r\n    message?: string | undefined\r\n  }) {\r\n    super(message || '', { name: 'RawContractError' })\r\n    this.data = data\r\n  }\r\n}\r\n", "import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\r\n\r\nimport {\r\n  AbiFunctionNotFoundError,\r\n  type AbiFunctionNotFoundErrorType,\r\n  AbiFunctionOutputsNotFoundError,\r\n  type AbiFunctionOutputsNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  ContractFunctionReturnType,\r\n  Widen,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type DecodeAbiParametersErrorType,\r\n  decodeAbiParameters,\r\n} from './decodeAbiParameters.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/decodeFunctionResult'\r\n\r\nexport type DecodeFunctionResultParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n  data: Hex\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | undefined }\r\n      : { functionName: functionName | allFunctionNames }\r\n    : { functionName?: functionName | allFunctionNames | undefined }\r\n> &\r\n  UnionEvaluate<\r\n    readonly [] extends allArgs\r\n      ? {\r\n          args?:\r\n            | allArgs // show all options\r\n            // infer value, widen inferred value of `args` conditionally to match `allArgs`\r\n            | (abi extends Abi\r\n                ? args extends allArgs\r\n                  ? Widen<args>\r\n                  : never\r\n                : never)\r\n            | undefined\r\n        }\r\n      : {\r\n          args?:\r\n            | allArgs // show all options\r\n            | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\r\n            | undefined\r\n        }\r\n  > &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type DecodeFunctionResultReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n> = ContractFunctionReturnType<\r\n  abi,\r\n  AbiStateMutability,\r\n  functionName extends ContractFunctionName<abi>\r\n    ? functionName\r\n    : ContractFunctionName<abi>,\r\n  args\r\n>\r\n\r\nexport type DecodeFunctionResultErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | AbiFunctionOutputsNotFoundErrorType\r\n  | DecodeAbiParametersErrorType\r\n  | GetAbiItemErrorType\r\n  | ErrorType\r\n\r\nexport function decodeFunctionResult<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n  const args extends ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  > = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n>(\r\n  parameters: DecodeFunctionResultParameters<abi, functionName, args>,\r\n): DecodeFunctionResultReturnType<abi, functionName, args> {\r\n  const { abi, args, functionName, data } =\r\n    parameters as DecodeFunctionResultParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (functionName) {\r\n    const item = getAbiItem({ abi, args, name: functionName })\r\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'function')\r\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\r\n  if (!abiItem.outputs)\r\n    throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath })\r\n\r\n  const values = decodeAbiParameters(abiItem.outputs, data)\r\n  if (values && values.length > 1)\r\n    return values as DecodeFunctionResultReturnType<abi, functionName, args>\r\n  if (values && values.length === 1)\r\n    return values[0] as DecodeFunctionResultReturnType<abi, functionName, args>\r\n  return undefined as DecodeFunctionResultReturnType<abi, functionName, args>\r\n}\r\n", "import type { Abi } from 'abitype'\r\n\r\nimport {\r\n  AbiConstructorNotFoundError,\r\n  type AbiConstructorNotFoundErrorType,\r\n  AbiConstructorParamsNotFoundError,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ContractConstructorArgs } from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { UnionEvaluate } from '../../types/utils.js'\r\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\n\r\nconst docsPath = '/docs/contract/encodeDeployData'\r\n\r\nexport type EncodeDeployDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  ///\r\n  hasConstructor = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [Extract<abi[number], { type: 'constructor' }>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractConstructorArgs<abi>,\r\n> = {\r\n  abi: abi\r\n  bytecode: Hex\r\n} & UnionEvaluate<\r\n  hasConstructor extends false\r\n    ? { args?: undefined }\r\n    : readonly [] extends allArgs\r\n      ? { args?: allArgs | undefined }\r\n      : { args: allArgs }\r\n>\r\n\r\nexport type EncodeDeployDataReturnType = Hex\r\n\r\nexport type EncodeDeployDataErrorType =\r\n  | AbiConstructorNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | ErrorType\r\n\r\nexport function encodeDeployData<const abi extends Abi | readonly unknown[]>(\r\n  parameters: EncodeDeployDataParameters<abi>,\r\n): EncodeDeployDataReturnType {\r\n  const { abi, args, bytecode } = parameters as EncodeDeployDataParameters\r\n  if (!args || args.length === 0) return bytecode\r\n\r\n  const description = abi.find((x) => 'type' in x && x.type === 'constructor')\r\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\r\n  if (!('inputs' in description))\r\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\r\n  if (!description.inputs || description.inputs.length === 0)\r\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\r\n\r\n  const data = encodeAbiParameters(description.inputs, args)\r\n  return concatHex([bytecode, data!])\r\n}\r\n", "import type {\r\n  Abi,\r\n  AbiStateMutability,\r\n  ExtractAbiFunction,\r\n  ExtractAbiFunctions,\r\n} from 'abitype'\r\n\r\nimport {\r\n  AbiFunctionNotFoundError,\r\n  type AbiFunctionNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport type { ConcatHexErrorType } from '../data/concat.js'\r\nimport {\r\n  type ToFunctionSelectorErrorType,\r\n  toFunctionSelector,\r\n} from '../hash/toFunctionSelector.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/encodeFunctionData'\r\n\r\nexport type PrepareEncodeFunctionDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n      : { functionName: functionName | allFunctionNames | Hex }\r\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n> &\r\n  UnionEvaluate<{ args?: allArgs | undefined }> &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type PrepareEncodeFunctionDataReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | undefined = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi extends Abi\r\n    ? functionName extends ContractFunctionName<abi>\r\n      ? [ExtractAbiFunction<abi, functionName>]\r\n      : abi\r\n    : Abi\r\n  functionName: Hex\r\n}\r\n\r\nexport type PrepareEncodeFunctionDataErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | FormatAbiItemErrorType\r\n  | GetAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function prepareEncodeFunctionData<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n>(\r\n  parameters: PrepareEncodeFunctionDataParameters<abi, functionName>,\r\n): PrepareEncodeFunctionDataReturnType<abi, functionName> {\r\n  const { abi, args, functionName } =\r\n    parameters as PrepareEncodeFunctionDataParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (functionName) {\r\n    const item = getAbiItem({\r\n      abi,\r\n      args,\r\n      name: functionName,\r\n    })\r\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'function')\r\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\r\n\r\n  return {\r\n    abi: [abiItem],\r\n    functionName: toFunctionSelector(formatAbiItem(abiItem)),\r\n  } as unknown as PrepareEncodeFunctionDataReturnType<abi, functionName>\r\n}\r\n", "import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\r\n\r\nimport type { AbiFunctionNotFoundErrorType } from '../../errors/abi.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\r\nimport type { ToFunctionSelectorErrorType } from '../hash/toFunctionSelector.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\nimport type { FormatAbiItemErrorType } from './formatAbiItem.js'\r\nimport type { GetAbiItemErrorType } from './getAbiItem.js'\r\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js'\r\n\r\nexport type EncodeFunctionDataParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends\r\n    | ContractFunctionName<abi>\r\n    | Hex\r\n    | undefined = ContractFunctionName<abi>,\r\n  ///\r\n  hasFunctions = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiFunctions<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractFunctionArgs<\r\n    abi,\r\n    AbiStateMutability,\r\n    functionName extends ContractFunctionName<abi>\r\n      ? functionName\r\n      : ContractFunctionName<abi>\r\n  >,\r\n  allFunctionNames = ContractFunctionName<abi>,\r\n> = {\r\n  abi: abi\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n      : { functionName: functionName | allFunctionNames | Hex }\r\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\r\n> &\r\n  UnionEvaluate<\r\n    readonly [] extends allArgs\r\n      ? { args?: allArgs | undefined }\r\n      : { args: allArgs }\r\n  > &\r\n  (hasFunctions extends true ? unknown : never)\r\n\r\nexport type EncodeFunctionDataReturnType = Hex\r\n\r\nexport type EncodeFunctionDataErrorType =\r\n  | AbiFunctionNotFoundErrorType\r\n  | ConcatHexErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | FormatAbiItemErrorType\r\n  | GetAbiItemErrorType\r\n  | ToFunctionSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function encodeFunctionData<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\r\n>(\r\n  parameters: EncodeFunctionDataParameters<abi, functionName>,\r\n): EncodeFunctionDataReturnType {\r\n  const { args } = parameters as EncodeFunctionDataParameters\r\n\r\n  const { abi, functionName } = (() => {\r\n    if (\r\n      parameters.abi.length === 1 &&\r\n      parameters.functionName?.startsWith('0x')\r\n    )\r\n      return parameters as { abi: Abi; functionName: Hex }\r\n    return prepareEncodeFunctionData(parameters)\r\n  })()\r\n\r\n  const abiItem = abi[0]\r\n  const signature = functionName\r\n\r\n  const data =\r\n    'inputs' in abiItem && abiItem.inputs\r\n      ? encodeAbiParameters(abiItem.inputs, args ?? [])\r\n      : undefined\r\n  return concatHex([signature, data ?? '0x'])\r\n}\r\n", "import {\r\n  ChainDoesNotSupportContract,\r\n  type ChainDoesNotSupportContractErrorType,\r\n} from '../../errors/chain.js'\r\nimport type { Chain, ChainContract } from '../../types/chain.js'\r\n\r\nexport type GetChainContractAddressErrorType =\r\n  ChainDoesNotSupportContractErrorType\r\n\r\nexport function getChainContractAddress({\r\n  blockNumber,\r\n  chain,\r\n  contract: name,\r\n}: {\r\n  blockNumber?: bigint | undefined\r\n  chain: Chain\r\n  contract: string\r\n}) {\r\n  const contract = (chain?.contracts as Record<string, ChainContract>)?.[name]\r\n  if (!contract)\r\n    throw new ChainDoesNotSupportContract({\r\n      chain,\r\n      contract: { name },\r\n    })\r\n\r\n  if (\r\n    blockNumber &&\r\n    contract.blockCreated &&\r\n    contract.blockCreated > blockNumber\r\n  )\r\n    throw new ChainDoesNotSupportContract({\r\n      blockNumber,\r\n      chain,\r\n      contract: {\r\n        name,\r\n        blockCreated: contract.blockCreated,\r\n      },\r\n    })\r\n\r\n  return contract.address\r\n}\r\n", "import { formatGwei } from '../utils/unit/formatGwei.js'\r\n\r\nimport { BaseError } from './base.js'\r\n\r\n/**\r\n * geth:    https://github.com/ethereum/go-ethereum/blob/master/core/error.go\r\n *          https://github.com/ethereum/go-ethereum/blob/master/core/types/transaction.go#L34-L41\r\n *\r\n * erigon:  https://github.com/ledgerwatch/erigon/blob/master/core/error.go\r\n *          https://github.com/ledgerwatch/erigon/blob/master/core/types/transaction.go#L41-L46\r\n *\r\n * anvil:   https://github.com/foundry-rs/foundry/blob/master/anvil/src/eth/error.rs#L108\r\n */\r\nexport type ExecutionRevertedErrorType = ExecutionRevertedError & {\r\n  code: 3\r\n  name: 'ExecutionRevertedError'\r\n}\r\nexport class ExecutionRevertedError extends BaseError {\r\n  static code = 3\r\n  static nodeMessage = /execution reverted/\r\n\r\n  constructor({\r\n    cause,\r\n    message,\r\n  }: { cause?: BaseError | undefined; message?: string | undefined } = {}) {\r\n    const reason = message\r\n      ?.replace('execution reverted: ', '')\r\n      ?.replace('execution reverted', '')\r\n    super(\r\n      `Execution reverted ${\r\n        reason ? `with reason: ${reason}` : 'for an unknown reason'\r\n      }.`,\r\n      {\r\n        cause,\r\n        name: 'ExecutionRevertedError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type FeeCapTooHighErrorType = FeeCapTooHighError & {\r\n  name: 'FeeCapTooHighError'\r\n}\r\nexport class FeeCapTooHighError extends BaseError {\r\n  static nodeMessage =\r\n    /max fee per gas higher than 2\\^256-1|fee cap higher than 2\\^256-1/\r\n  constructor({\r\n    cause,\r\n    maxFeePerGas,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    maxFeePerGas?: bigint | undefined\r\n  } = {}) {\r\n    super(\r\n      `The fee cap (\\`maxFeePerGas\\`${\r\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\r\n      }) cannot be higher than the maximum allowed value (2^256-1).`,\r\n      {\r\n        cause,\r\n        name: 'FeeCapTooHighError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type FeeCapTooLowErrorType = FeeCapTooLowError & {\r\n  name: 'FeeCapTooLowError'\r\n}\r\nexport class FeeCapTooLowError extends BaseError {\r\n  static nodeMessage =\r\n    /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/\r\n  constructor({\r\n    cause,\r\n    maxFeePerGas,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    maxFeePerGas?: bigint | undefined\r\n  } = {}) {\r\n    super(\r\n      `The fee cap (\\`maxFeePerGas\\`${\r\n        maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ''\r\n      } gwei) cannot be lower than the block base fee.`,\r\n      {\r\n        cause,\r\n        name: 'FeeCapTooLowError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type NonceTooHighErrorType = NonceTooHighError & {\r\n  name: 'NonceTooHighError'\r\n}\r\nexport class NonceTooHighError extends BaseError {\r\n  static nodeMessage = /nonce too high/\r\n  constructor({\r\n    cause,\r\n    nonce,\r\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\r\n    super(\r\n      `Nonce provided for the transaction ${\r\n        nonce ? `(${nonce}) ` : ''\r\n      }is higher than the next one expected.`,\r\n      { cause, name: 'NonceTooHighError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type NonceTooLowErrorType = NonceTooLowError & {\r\n  name: 'NonceTooLowError'\r\n}\r\nexport class NonceTooLowError extends BaseError {\r\n  static nodeMessage =\r\n    /nonce too low|transaction already imported|already known/\r\n  constructor({\r\n    cause,\r\n    nonce,\r\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\r\n    super(\r\n      [\r\n        `Nonce provided for the transaction ${\r\n          nonce ? `(${nonce}) ` : ''\r\n        }is lower than the current nonce of the account.`,\r\n        'Try increasing the nonce or find the latest nonce with `getTransactionCount`.',\r\n      ].join('\\n'),\r\n      { cause, name: 'NonceTooLowError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type NonceMaxValueErrorType = NonceMaxValueError & {\r\n  name: 'NonceMaxValueError'\r\n}\r\nexport class NonceMaxValueError extends BaseError {\r\n  static nodeMessage = /nonce has max value/\r\n  constructor({\r\n    cause,\r\n    nonce,\r\n  }: { cause?: BaseError | undefined; nonce?: number | undefined } = {}) {\r\n    super(\r\n      `Nonce provided for the transaction ${\r\n        nonce ? `(${nonce}) ` : ''\r\n      }exceeds the maximum allowed nonce.`,\r\n      { cause, name: 'NonceMaxValueError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type InsufficientFundsErrorType = InsufficientFundsError & {\r\n  name: 'InsufficientFundsError'\r\n}\r\nexport class InsufficientFundsError extends BaseError {\r\n  static nodeMessage =\r\n    /insufficient funds|exceeds transaction sender account balance/\r\n  constructor({ cause }: { cause?: BaseError | undefined } = {}) {\r\n    super(\r\n      [\r\n        'The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.',\r\n      ].join('\\n'),\r\n      {\r\n        cause,\r\n        metaMessages: [\r\n          'This error could arise when the account does not have enough funds to:',\r\n          ' - pay for the total gas fee,',\r\n          ' - pay for the value to send.',\r\n          ' ',\r\n          'The cost of the transaction is calculated as `gas * gas fee + value`, where:',\r\n          ' - `gas` is the amount of gas needed for transaction to execute,',\r\n          ' - `gas fee` is the gas fee,',\r\n          ' - `value` is the amount of ether to send to the recipient.',\r\n        ],\r\n        name: 'InsufficientFundsError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type IntrinsicGasTooHighErrorType = IntrinsicGasTooHighError & {\r\n  name: 'IntrinsicGasTooHighError'\r\n}\r\nexport class IntrinsicGasTooHighError extends BaseError {\r\n  static nodeMessage = /intrinsic gas too high|gas limit reached/\r\n  constructor({\r\n    cause,\r\n    gas,\r\n  }: { cause?: BaseError | undefined; gas?: bigint | undefined } = {}) {\r\n    super(\r\n      `The amount of gas ${\r\n        gas ? `(${gas}) ` : ''\r\n      }provided for the transaction exceeds the limit allowed for the block.`,\r\n      {\r\n        cause,\r\n        name: 'IntrinsicGasTooHighError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type IntrinsicGasTooLowErrorType = IntrinsicGasTooLowError & {\r\n  name: 'IntrinsicGasTooLowError'\r\n}\r\nexport class IntrinsicGasTooLowError extends BaseError {\r\n  static nodeMessage = /intrinsic gas too low/\r\n  constructor({\r\n    cause,\r\n    gas,\r\n  }: { cause?: BaseError | undefined; gas?: bigint | undefined } = {}) {\r\n    super(\r\n      `The amount of gas ${\r\n        gas ? `(${gas}) ` : ''\r\n      }provided for the transaction is too low.`,\r\n      {\r\n        cause,\r\n        name: 'IntrinsicGasTooLowError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type TransactionTypeNotSupportedErrorType =\r\n  TransactionTypeNotSupportedError & {\r\n    name: 'TransactionTypeNotSupportedError'\r\n  }\r\nexport class TransactionTypeNotSupportedError extends BaseError {\r\n  static nodeMessage = /transaction type not valid/\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super('The transaction type is not supported for this chain.', {\r\n      cause,\r\n      name: 'TransactionTypeNotSupportedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type TipAboveFeeCapErrorType = TipAboveFeeCapError & {\r\n  name: 'TipAboveFeeCapError'\r\n}\r\nexport class TipAboveFeeCapError extends BaseError {\r\n  static nodeMessage =\r\n    /max priority fee per gas higher than max fee per gas|tip higher than fee cap/\r\n  constructor({\r\n    cause,\r\n    maxPriorityFeePerGas,\r\n    maxFeePerGas,\r\n  }: {\r\n    cause?: BaseError | undefined\r\n    maxPriorityFeePerGas?: bigint | undefined\r\n    maxFeePerGas?: bigint | undefined\r\n  } = {}) {\r\n    super(\r\n      [\r\n        `The provided tip (\\`maxPriorityFeePerGas\\`${\r\n          maxPriorityFeePerGas\r\n            ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei`\r\n            : ''\r\n        }) cannot be higher than the fee cap (\\`maxFeePerGas\\`${\r\n          maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ''\r\n        }).`,\r\n      ].join('\\n'),\r\n      {\r\n        cause,\r\n        name: 'TipAboveFeeCapError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type UnknownNodeErrorType = UnknownNodeError & {\r\n  name: 'UnknownNodeError'\r\n}\r\nexport class UnknownNodeError extends BaseError {\r\n  constructor({ cause }: { cause?: BaseError | undefined }) {\r\n    super(`An error occurred while executing: ${cause?.shortMessage}`, {\r\n      cause,\r\n      name: 'UnknownNodeError',\r\n    })\r\n  }\r\n}\r\n", "import { stringify } from '../utils/stringify.js'\r\n\r\nimport { BaseError } from './base.js'\r\nimport { getUrl } from './utils.js'\r\n\r\nexport type HttpRequestErrorType = HttpRequestError & {\r\n  name: 'HttpRequestError'\r\n}\r\nexport class HttpRequestError extends BaseError {\r\n  body?: { [x: string]: unknown } | { [y: string]: unknown }[] | undefined\r\n  headers?: Headers | undefined\r\n  status?: number | undefined\r\n  url: string\r\n\r\n  constructor({\r\n    body,\r\n    cause,\r\n    details,\r\n    headers,\r\n    status,\r\n    url,\r\n  }: {\r\n    body?: { [x: string]: unknown } | { [y: string]: unknown }[] | undefined\r\n    cause?: Error | undefined\r\n    details?: string | undefined\r\n    headers?: Headers | undefined\r\n    status?: number | undefined\r\n    url: string\r\n  }) {\r\n    super('HTTP request failed.', {\r\n      cause,\r\n      details,\r\n      metaMessages: [\r\n        status && `Status: ${status}`,\r\n        `URL: ${getUrl(url)}`,\r\n        body && `Request body: ${stringify(body)}`,\r\n      ].filter(Boolean) as string[],\r\n      name: 'HttpRequestError',\r\n    })\r\n    this.body = body\r\n    this.headers = headers\r\n    this.status = status\r\n    this.url = url\r\n  }\r\n}\r\n\r\nexport type WebSocketRequestErrorType = WebSocketRequestError & {\r\n  name: 'WebSocketRequestError'\r\n}\r\nexport class WebSocketRequestError extends BaseError {\r\n  constructor({\r\n    body,\r\n    cause,\r\n    details,\r\n    url,\r\n  }: {\r\n    body?: { [key: string]: unknown } | undefined\r\n    cause?: Error | undefined\r\n    details?: string | undefined\r\n    url: string\r\n  }) {\r\n    super('WebSocket request failed.', {\r\n      cause,\r\n      details,\r\n      metaMessages: [\r\n        `URL: ${getUrl(url)}`,\r\n        body && `Request body: ${stringify(body)}`,\r\n      ].filter(Boolean) as string[],\r\n      name: 'WebSocketRequestError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type RpcRequestErrorType = RpcRequestError & {\r\n  name: 'RpcRequestError'\r\n}\r\nexport class RpcRequestError extends BaseError {\r\n  code: number\r\n  data?: unknown\r\n\r\n  constructor({\r\n    body,\r\n    error,\r\n    url,\r\n  }: {\r\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\r\n    error: { code: number; data?: unknown; message: string }\r\n    url: string\r\n  }) {\r\n    super('RPC Request failed.', {\r\n      cause: error as any,\r\n      details: error.message,\r\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\r\n      name: 'RpcRequestError',\r\n    })\r\n    this.code = error.code\r\n    this.data = error.data\r\n  }\r\n}\r\n\r\nexport type SocketClosedErrorType = SocketClosedError & {\r\n  name: 'SocketClosedError'\r\n}\r\nexport class SocketClosedError extends BaseError {\r\n  constructor({\r\n    url,\r\n  }: {\r\n    url?: string | undefined\r\n  } = {}) {\r\n    super('The socket has been closed.', {\r\n      metaMessages: [url && `URL: ${getUrl(url)}`].filter(Boolean) as string[],\r\n      name: 'SocketClosedError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type TimeoutErrorType = TimeoutError & {\r\n  name: 'TimeoutError'\r\n}\r\nexport class TimeoutError extends BaseError {\r\n  constructor({\r\n    body,\r\n    url,\r\n  }: {\r\n    body: { [x: string]: unknown } | { [y: string]: unknown }[]\r\n    url: string\r\n  }) {\r\n    super('The request took too long to respond.', {\r\n      details: 'The request timed out.',\r\n      metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],\r\n      name: 'TimeoutError',\r\n    })\r\n  }\r\n}\r\n", "import type { Prettify } from '../types/utils.js'\r\nimport { BaseError } from './base.js'\r\nimport { RpcRequestError } from './request.js'\r\n\r\nconst unknownErrorCode = -1\r\n\r\nexport type RpcErrorCode =\r\n  | -1\r\n  | -32700 // Parse error\r\n  | -32600 // Invalid request\r\n  | -32601 // Method not found\r\n  | -32602 // Invalid params\r\n  | -32603 // Internal error\r\n  | -32000 // Invalid input\r\n  | -32001 // Resource not found\r\n  | -32002 // Resource unavailable\r\n  | -32003 // Transaction rejected\r\n  | -32004 // Method not supported\r\n  | -32005 // Limit exceeded\r\n  | -32006 // JSON-RPC version not supported\r\n  | -32042 // Method not found\r\n\r\ntype RpcErrorOptions<code extends number = RpcErrorCode> = {\r\n  code?: code | (number & {}) | undefined\r\n  docsPath?: string | undefined\r\n  metaMessages?: string[] | undefined\r\n  name?: string | undefined\r\n  shortMessage: string\r\n}\r\n\r\n/**\r\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.\r\n *\r\n * - EIP https://eips.ethereum.org/EIPS/eip-1474\r\n */\r\nexport type RpcErrorType = RpcError & { name: 'RpcError' }\r\nexport class RpcError<code_ extends number = RpcErrorCode> extends BaseError {\r\n  code: code_ | (number & {})\r\n\r\n  constructor(\r\n    cause: Error,\r\n    {\r\n      code,\r\n      docsPath,\r\n      metaMessages,\r\n      name,\r\n      shortMessage,\r\n    }: RpcErrorOptions<code_>,\r\n  ) {\r\n    super(shortMessage, {\r\n      cause,\r\n      docsPath,\r\n      metaMessages:\r\n        metaMessages || (cause as { metaMessages?: string[] })?.metaMessages,\r\n      name: name || 'RpcError',\r\n    })\r\n    this.name = name || cause.name\r\n    this.code = (\r\n      cause instanceof RpcRequestError ? cause.code : (code ?? unknownErrorCode)\r\n    ) as code_\r\n  }\r\n}\r\n\r\nexport type ProviderRpcErrorCode =\r\n  | 4001 // User Rejected Request\r\n  | 4100 // Unauthorized\r\n  | 4200 // Unsupported Method\r\n  | 4900 // Disconnected\r\n  | 4901 // Chain Disconnected\r\n  | 4902 // Chain Not Recognized\r\n\r\n/**\r\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\r\n *\r\n * - EIP https://eips.ethereum.org/EIPS/eip-1193\r\n */\r\nexport type ProviderRpcErrorType = ProviderRpcError & {\r\n  name: 'ProviderRpcError'\r\n}\r\nexport class ProviderRpcError<\r\n  T = undefined,\r\n> extends RpcError<ProviderRpcErrorCode> {\r\n  data?: T | undefined\r\n\r\n  constructor(\r\n    cause: Error,\r\n    options: Prettify<\r\n      RpcErrorOptions<ProviderRpcErrorCode> & {\r\n        data?: T | undefined\r\n      }\r\n    >,\r\n  ) {\r\n    super(cause, options)\r\n\r\n    this.data = options.data\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Parse error\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type ParseRpcErrorType = ParseRpcError & {\r\n  code: -32700\r\n  name: 'ParseRpcError'\r\n}\r\nexport class ParseRpcError extends RpcError {\r\n  static code = -32700 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: ParseRpcError.code,\r\n      name: 'ParseRpcError',\r\n      shortMessage:\r\n        'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Invalid request\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type InvalidRequestRpcErrorType = InvalidRequestRpcError & {\r\n  code: -32600\r\n  name: 'InvalidRequestRpcError'\r\n}\r\nexport class InvalidRequestRpcError extends RpcError {\r\n  static code = -32600 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: InvalidRequestRpcError.code,\r\n      name: 'InvalidRequestRpcError',\r\n      shortMessage: 'JSON is not a valid request object.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Method not found\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type MethodNotFoundRpcErrorType = MethodNotFoundRpcError & {\r\n  code: -32601\r\n  name: 'MethodNotFoundRpcError'\r\n}\r\nexport class MethodNotFoundRpcError extends RpcError {\r\n  static code = -32601 as const\r\n\r\n  constructor(cause: Error, { method }: { method?: string } = {}) {\r\n    super(cause, {\r\n      code: MethodNotFoundRpcError.code,\r\n      name: 'MethodNotFoundRpcError',\r\n      shortMessage: `The method${method ? ` \"${method}\"` : ''} does not exist / is not available.`,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Invalid params\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type InvalidParamsRpcErrorType = InvalidParamsRpcError & {\r\n  code: -32602\r\n  name: 'InvalidParamsRpcError'\r\n}\r\nexport class InvalidParamsRpcError extends RpcError {\r\n  static code = -32602 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: InvalidParamsRpcError.code,\r\n      name: 'InvalidParamsRpcError',\r\n      shortMessage: [\r\n        'Invalid parameters were provided to the RPC method.',\r\n        'Double check you have provided the correct parameters.',\r\n      ].join('\\n'),\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Internal error\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type InternalRpcErrorType = InternalRpcError & {\r\n  code: -32603\r\n  name: 'InternalRpcError'\r\n}\r\nexport class InternalRpcError extends RpcError {\r\n  static code = -32603 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: InternalRpcError.code,\r\n      name: 'InternalRpcError',\r\n      shortMessage: 'An internal error was received.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Invalid input\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type InvalidInputRpcErrorType = InvalidInputRpcError & {\r\n  code: -32000\r\n  name: 'InvalidInputRpcError'\r\n}\r\nexport class InvalidInputRpcError extends RpcError {\r\n  static code = -32000 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: InvalidInputRpcError.code,\r\n      name: 'InvalidInputRpcError',\r\n      shortMessage: [\r\n        'Missing or invalid parameters.',\r\n        'Double check you have provided the correct parameters.',\r\n      ].join('\\n'),\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Resource not found\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type ResourceNotFoundRpcErrorType = ResourceNotFoundRpcError & {\r\n  code: -32001\r\n  name: 'ResourceNotFoundRpcError'\r\n}\r\nexport class ResourceNotFoundRpcError extends RpcError {\r\n  override name = 'ResourceNotFoundRpcError'\r\n  static code = -32001 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: ResourceNotFoundRpcError.code,\r\n      name: 'ResourceNotFoundRpcError',\r\n      shortMessage: 'Requested resource not found.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Resource unavailable\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type ResourceUnavailableRpcErrorType = ResourceUnavailableRpcError & {\r\n  code: -32002\r\n  name: 'ResourceUnavailableRpcError'\r\n}\r\nexport class ResourceUnavailableRpcError extends RpcError {\r\n  static code = -32002 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: ResourceUnavailableRpcError.code,\r\n      name: 'ResourceUnavailableRpcError',\r\n      shortMessage: 'Requested resource not available.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Transaction rejected\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type TransactionRejectedRpcErrorType = TransactionRejectedRpcError & {\r\n  code: -32003\r\n  name: 'TransactionRejectedRpcError'\r\n}\r\nexport class TransactionRejectedRpcError extends RpcError {\r\n  static code = -32003 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: TransactionRejectedRpcError.code,\r\n      name: 'TransactionRejectedRpcError',\r\n      shortMessage: 'Transaction creation failed.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Method not supported\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type MethodNotSupportedRpcErrorType = MethodNotSupportedRpcError & {\r\n  code: -32004\r\n  name: 'MethodNotSupportedRpcError'\r\n}\r\nexport class MethodNotSupportedRpcError extends RpcError {\r\n  static code = -32004 as const\r\n\r\n  constructor(cause: Error, { method }: { method?: string } = {}) {\r\n    super(cause, {\r\n      code: MethodNotSupportedRpcError.code,\r\n      name: 'MethodNotSupportedRpcError',\r\n      shortMessage: `Method${method ? ` \"${method}\"` : ''} is not supported.`,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"Limit exceeded\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type LimitExceededRpcErrorType = LimitExceededRpcError & {\r\n  code: -32005\r\n  name: 'LimitExceededRpcError'\r\n}\r\nexport class LimitExceededRpcError extends RpcError {\r\n  static code = -32005 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: LimitExceededRpcError.code,\r\n      name: 'LimitExceededRpcError',\r\n      shortMessage: 'Request exceeds defined limit.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"JSON-RPC version not supported\" EIP-1474 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1474#error-codes\r\n */\r\nexport type JsonRpcVersionUnsupportedErrorType =\r\n  JsonRpcVersionUnsupportedError & {\r\n    code: -32006\r\n    name: 'JsonRpcVersionUnsupportedError'\r\n  }\r\nexport class JsonRpcVersionUnsupportedError extends RpcError {\r\n  static code = -32006 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: JsonRpcVersionUnsupportedError.code,\r\n      name: 'JsonRpcVersionUnsupportedError',\r\n      shortMessage: 'Version of JSON-RPC protocol is not supported.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for a \"User Rejected Request\" EIP-1193 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\r\n */\r\nexport type UserRejectedRequestErrorType = UserRejectedRequestError & {\r\n  code: 4001\r\n  name: 'UserRejectedRequestError'\r\n}\r\nexport class UserRejectedRequestError extends ProviderRpcError {\r\n  static code = 4001 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: UserRejectedRequestError.code,\r\n      name: 'UserRejectedRequestError',\r\n      shortMessage: 'User rejected the request.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Unauthorized\" EIP-1193 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\r\n */\r\nexport type UnauthorizedProviderErrorType = UnauthorizedProviderError & {\r\n  code: 4100\r\n  name: 'UnauthorizedProviderError'\r\n}\r\nexport class UnauthorizedProviderError extends ProviderRpcError {\r\n  static code = 4100 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: UnauthorizedProviderError.code,\r\n      name: 'UnauthorizedProviderError',\r\n      shortMessage:\r\n        'The requested method and/or account has not been authorized by the user.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Unsupported Method\" EIP-1193 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\r\n */\r\nexport type UnsupportedProviderMethodErrorType =\r\n  UnsupportedProviderMethodError & {\r\n    code: 4200\r\n    name: 'UnsupportedProviderMethodError'\r\n  }\r\nexport class UnsupportedProviderMethodError extends ProviderRpcError {\r\n  static code = 4200 as const\r\n\r\n  constructor(cause: Error, { method }: { method?: string } = {}) {\r\n    super(cause, {\r\n      code: UnsupportedProviderMethodError.code,\r\n      name: 'UnsupportedProviderMethodError',\r\n      shortMessage: `The Provider does not support the requested method${method ? ` \" ${method}\"` : ''}.`,\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Disconnected\" EIP-1193 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\r\n */\r\nexport type ProviderDisconnectedErrorType = ProviderDisconnectedError & {\r\n  code: 4900\r\n  name: 'ProviderDisconnectedError'\r\n}\r\nexport class ProviderDisconnectedError extends ProviderRpcError {\r\n  static code = 4900 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: ProviderDisconnectedError.code,\r\n      name: 'ProviderDisconnectedError',\r\n      shortMessage: 'The Provider is disconnected from all chains.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Chain Disconnected\" EIP-1193 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\r\n */\r\nexport type ChainDisconnectedErrorType = ChainDisconnectedError & {\r\n  code: 4901\r\n  name: 'ChainDisconnectedError'\r\n}\r\nexport class ChainDisconnectedError extends ProviderRpcError {\r\n  static code = 4901 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: ChainDisconnectedError.code,\r\n      name: 'ChainDisconnectedError',\r\n      shortMessage: 'The Provider is not connected to the requested chain.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an \"Switch Chain\" EIP-1193 error.\r\n *\r\n * EIP https://eips.ethereum.org/EIPS/eip-1193#provider-errors\r\n */\r\nexport type SwitchChainErrorType = SwitchChainError & {\r\n  code: 4902\r\n  name: 'SwitchChainError'\r\n}\r\nexport class SwitchChainError extends ProviderRpcError {\r\n  static code = 4902 as const\r\n\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      code: SwitchChainError.code,\r\n      name: 'SwitchChainError',\r\n      shortMessage: 'An error occurred when attempting to switch chain.',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Subclass for an unknown RPC error.\r\n */\r\nexport type UnknownRpcErrorType = UnknownRpcError & {\r\n  name: 'UnknownRpcError'\r\n}\r\nexport class UnknownRpcError extends RpcError {\r\n  constructor(cause: Error) {\r\n    super(cause, {\r\n      name: 'UnknownRpcError',\r\n      shortMessage: 'An unknown RPC error occurred.',\r\n    })\r\n  }\r\n}\r\n", "import type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport {\r\n  ExecutionRevertedError,\r\n  type ExecutionRevertedErrorType,\r\n  FeeCapTooHighError,\r\n  type FeeCapTooHighErrorType,\r\n  FeeCapTooLowError,\r\n  type FeeCapTooLowErrorType,\r\n  InsufficientFundsError,\r\n  type InsufficientFundsErrorType,\r\n  IntrinsicGasTooHighError,\r\n  type IntrinsicGasTooHighErrorType,\r\n  IntrinsicGasTooLowError,\r\n  type IntrinsicGasTooLowErrorType,\r\n  NonceMaxValueError,\r\n  type NonceMaxValueErrorType,\r\n  NonceTooHighError,\r\n  type NonceTooHighErrorType,\r\n  NonceTooLowError,\r\n  type NonceTooLowErrorType,\r\n  TipAboveFeeCapError,\r\n  type TipAboveFeeCapErrorType,\r\n  TransactionTypeNotSupportedError,\r\n  type TransactionTypeNotSupportedErrorType,\r\n  UnknownNodeError,\r\n  type UnknownNodeErrorType,\r\n} from '../../errors/node.js'\r\nimport { RpcRequestError } from '../../errors/request.js'\r\nimport {\r\n  InvalidInputRpcError,\r\n  TransactionRejectedRpcError,\r\n} from '../../errors/rpc.js'\r\nimport type { ExactPartial } from '../../types/utils.js'\r\n\r\nexport function containsNodeError(err: BaseError) {\r\n  return (\r\n    err instanceof TransactionRejectedRpcError ||\r\n    err instanceof InvalidInputRpcError ||\r\n    (err instanceof RpcRequestError && err.code === ExecutionRevertedError.code)\r\n  )\r\n}\r\n\r\nexport type GetNodeErrorParameters = ExactPartial<\r\n  SendTransactionParameters<any>\r\n>\r\n\r\nexport type GetNodeErrorReturnType =\r\n  | ExecutionRevertedErrorType\r\n  | FeeCapTooHighErrorType\r\n  | FeeCapTooLowErrorType\r\n  | NonceTooHighErrorType\r\n  | NonceTooLowErrorType\r\n  | NonceMaxValueErrorType\r\n  | InsufficientFundsErrorType\r\n  | IntrinsicGasTooHighErrorType\r\n  | IntrinsicGasTooLowErrorType\r\n  | TransactionTypeNotSupportedErrorType\r\n  | TipAboveFeeCapErrorType\r\n  | UnknownNodeErrorType\r\n\r\nexport function getNodeError(\r\n  err: BaseError,\r\n  args: GetNodeErrorParameters,\r\n): GetNodeErrorReturnType {\r\n  const message = (err.details || '').toLowerCase()\r\n\r\n  const executionRevertedError =\r\n    err instanceof BaseError\r\n      ? err.walk(\r\n          (e) =>\r\n            (e as { code: number } | null | undefined)?.code ===\r\n            ExecutionRevertedError.code,\r\n        )\r\n      : err\r\n  if (executionRevertedError instanceof BaseError)\r\n    return new ExecutionRevertedError({\r\n      cause: err,\r\n      message: executionRevertedError.details,\r\n    }) as any\r\n  if (ExecutionRevertedError.nodeMessage.test(message))\r\n    return new ExecutionRevertedError({\r\n      cause: err,\r\n      message: err.details,\r\n    }) as any\r\n  if (FeeCapTooHighError.nodeMessage.test(message))\r\n    return new FeeCapTooHighError({\r\n      cause: err,\r\n      maxFeePerGas: args?.maxFeePerGas,\r\n    }) as any\r\n  if (FeeCapTooLowError.nodeMessage.test(message))\r\n    return new FeeCapTooLowError({\r\n      cause: err,\r\n      maxFeePerGas: args?.maxFeePerGas,\r\n    }) as any\r\n  if (NonceTooHighError.nodeMessage.test(message))\r\n    return new NonceTooHighError({ cause: err, nonce: args?.nonce }) as any\r\n  if (NonceTooLowError.nodeMessage.test(message))\r\n    return new NonceTooLowError({ cause: err, nonce: args?.nonce }) as any\r\n  if (NonceMaxValueError.nodeMessage.test(message))\r\n    return new NonceMaxValueError({ cause: err, nonce: args?.nonce }) as any\r\n  if (InsufficientFundsError.nodeMessage.test(message))\r\n    return new InsufficientFundsError({ cause: err }) as any\r\n  if (IntrinsicGasTooHighError.nodeMessage.test(message))\r\n    return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas }) as any\r\n  if (IntrinsicGasTooLowError.nodeMessage.test(message))\r\n    return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas }) as any\r\n  if (TransactionTypeNotSupportedError.nodeMessage.test(message))\r\n    return new TransactionTypeNotSupportedError({ cause: err }) as any\r\n  if (TipAboveFeeCapError.nodeMessage.test(message))\r\n    return new TipAboveFeeCapError({\r\n      cause: err,\r\n      maxFeePerGas: args?.maxFeePerGas,\r\n      maxPriorityFeePerGas: args?.maxPriorityFeePerGas,\r\n    }) as any\r\n  return new UnknownNodeError({\r\n    cause: err,\r\n  }) as any\r\n}\r\n", "import type { CallParameters } from '../../actions/public/call.js'\r\nimport type { BaseError } from '../../errors/base.js'\r\nimport {\r\n  CallExecutionError,\r\n  type CallExecutionErrorType,\r\n} from '../../errors/contract.js'\r\nimport { UnknownNodeError } from '../../errors/node.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\n\r\nimport {\r\n  type GetNodeErrorParameters,\r\n  type GetNodeErrorReturnType,\r\n  getNodeError,\r\n} from './getNodeError.js'\r\n\r\nexport type GetCallErrorReturnType<cause = ErrorType> = Omit<\r\n  CallExecutionErrorType,\r\n  'cause'\r\n> & {\r\n  cause: cause | GetNodeErrorReturnType\r\n}\r\n\r\nexport function getCallError<err extends ErrorType<string>>(\r\n  err: err,\r\n  {\r\n    docsPath,\r\n    ...args\r\n  }: CallParameters & {\r\n    chain?: Chain | undefined\r\n    docsPath?: string | undefined\r\n  },\r\n): GetCallErrorReturnType<err> {\r\n  const cause = (() => {\r\n    const cause = getNodeError(\r\n      err as {} as BaseError,\r\n      args as GetNodeErrorParameters,\r\n    )\r\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\r\n    return cause\r\n  })()\r\n  return new CallExecutionError(cause, {\r\n    docsPath,\r\n    ...args,\r\n  }) as GetCallErrorReturnType<err>\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { ChainFormatter } from '../../types/chain.js'\r\n\r\nexport type ExtractErrorType = ErrorType\r\n\r\n/**\r\n * @description Picks out the keys from `value` that exist in the formatter..\r\n */\r\nexport function extract(\r\n  value_: Record<string, unknown>,\r\n  { format }: { format?: ChainFormatter['format'] | undefined },\r\n) {\r\n  if (!format) return {}\r\n\r\n  const value: Record<string, unknown> = {}\r\n  function extract_(formatted: Record<string, any>) {\r\n    const keys = Object.keys(formatted)\r\n    for (const key of keys) {\r\n      if (key in value_) value[key] = value_[key]\r\n      if (\r\n        formatted[key] &&\r\n        typeof formatted[key] === 'object' &&\r\n        !Array.isArray(formatted[key])\r\n      )\r\n        extract_(formatted[key])\r\n    }\r\n  }\r\n\r\n  const formatted = format(value_ || {})\r\n  extract_(formatted)\r\n\r\n  return value\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\n\r\nexport type DefineFormatterErrorType = ErrorType\r\n\r\nexport function defineFormatter<type extends string, parameters, returnType>(\r\n  type: type,\r\n  format: (_: parameters) => returnType,\r\n) {\r\n  return <\r\n    parametersOverride,\r\n    returnTypeOverride,\r\n    exclude extends (keyof parameters | keyof parametersOverride)[] = [],\r\n  >({\r\n    exclude,\r\n    format: overrides,\r\n  }: {\r\n    exclude?: exclude | undefined\r\n    format: (_: parametersOverride) => returnTypeOverride\r\n  }) => {\r\n    return {\r\n      exclude,\r\n      format: (args: parametersOverride) => {\r\n        const formatted = format(args as any)\r\n        if (exclude) {\r\n          for (const key of exclude) {\r\n            delete (formatted as any)[key]\r\n          }\r\n        }\r\n        return {\r\n          ...formatted,\r\n          ...overrides(args),\r\n        } as Prettify<returnTypeOverride> & {\r\n          [_key in exclude[number]]: never\r\n        }\r\n      },\r\n      type,\r\n    }\r\n  }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { AuthorizationList } from '../../experimental/eip7702/types/authorization.js'\r\nimport type { RpcAuthorizationList } from '../../experimental/eip7702/types/rpc.js'\r\nimport type {\r\n  Chain,\r\n  ExtractChainFormatterParameters,\r\n} from '../../types/chain.js'\r\nimport type { ByteArray } from '../../types/misc.js'\r\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\r\nimport type { TransactionRequest } from '../../types/transaction.js'\r\nimport type { ExactPartial } from '../../types/utils.js'\r\nimport { bytesToHex, numberToHex } from '../encoding/toHex.js'\r\nimport { type DefineFormatterErrorType, defineFormatter } from './formatter.js'\r\n\r\nexport type FormattedTransactionRequest<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = ExtractChainFormatterParameters<\r\n  chain,\r\n  'transactionRequest',\r\n  TransactionRequest\r\n>\r\n\r\nexport const rpcTransactionType = {\r\n  legacy: '0x0',\r\n  eip2930: '0x1',\r\n  eip1559: '0x2',\r\n  eip4844: '0x3',\r\n  eip7702: '0x4',\r\n} as const\r\n\r\nexport type FormatTransactionRequestErrorType = ErrorType\r\n\r\nexport function formatTransactionRequest(\r\n  request: ExactPartial<TransactionRequest>,\r\n) {\r\n  const rpcRequest = {} as RpcTransactionRequest\r\n\r\n  if (typeof request.authorizationList !== 'undefined')\r\n    rpcRequest.authorizationList = formatAuthorizationList(\r\n      request.authorizationList,\r\n    )\r\n  if (typeof request.accessList !== 'undefined')\r\n    rpcRequest.accessList = request.accessList\r\n  if (typeof request.blobVersionedHashes !== 'undefined')\r\n    rpcRequest.blobVersionedHashes = request.blobVersionedHashes\r\n  if (typeof request.blobs !== 'undefined') {\r\n    if (typeof request.blobs[0] !== 'string')\r\n      rpcRequest.blobs = (request.blobs as ByteArray[]).map((x) =>\r\n        bytesToHex(x),\r\n      )\r\n    else rpcRequest.blobs = request.blobs\r\n  }\r\n  if (typeof request.data !== 'undefined') rpcRequest.data = request.data\r\n  if (typeof request.from !== 'undefined') rpcRequest.from = request.from\r\n  if (typeof request.gas !== 'undefined')\r\n    rpcRequest.gas = numberToHex(request.gas)\r\n  if (typeof request.gasPrice !== 'undefined')\r\n    rpcRequest.gasPrice = numberToHex(request.gasPrice)\r\n  if (typeof request.maxFeePerBlobGas !== 'undefined')\r\n    rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas)\r\n  if (typeof request.maxFeePerGas !== 'undefined')\r\n    rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas)\r\n  if (typeof request.maxPriorityFeePerGas !== 'undefined')\r\n    rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas)\r\n  if (typeof request.nonce !== 'undefined')\r\n    rpcRequest.nonce = numberToHex(request.nonce)\r\n  if (typeof request.to !== 'undefined') rpcRequest.to = request.to\r\n  if (typeof request.type !== 'undefined')\r\n    rpcRequest.type = rpcTransactionType[request.type]\r\n  if (typeof request.value !== 'undefined')\r\n    rpcRequest.value = numberToHex(request.value)\r\n\r\n  return rpcRequest\r\n}\r\n\r\nexport type DefineTransactionRequestErrorType =\r\n  | DefineFormatterErrorType\r\n  | ErrorType\r\n\r\nexport const defineTransactionRequest = /*#__PURE__*/ defineFormatter(\r\n  'transactionRequest',\r\n  formatTransactionRequest,\r\n)\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction formatAuthorizationList(\r\n  authorizationList: AuthorizationList<number, boolean>,\r\n): RpcAuthorizationList {\r\n  return authorizationList.map(\r\n    (authorization) =>\r\n      ({\r\n        address: authorization.contractAddress,\r\n        r: authorization.r,\r\n        s: authorization.s,\r\n        chainId: numberToHex(authorization.chainId),\r\n        nonce: numberToHex(authorization.nonce),\r\n        ...(typeof authorization.yParity !== 'undefined'\r\n          ? { yParity: numberToHex(authorization.yParity) }\r\n          : {}),\r\n        ...(typeof authorization.v !== 'undefined' &&\r\n        typeof authorization.yParity === 'undefined'\r\n          ? { v: numberToHex(authorization.v) }\r\n          : {}),\r\n      }) as any,\r\n  ) as RpcAuthorizationList\r\n}\r\n", "/** @internal */\r\nexport type PromiseWithResolvers<type> = {\r\n  promise: Promise<type>\r\n  resolve: (value: type | PromiseLike<type>) => void\r\n  reject: (reason?: unknown) => void\r\n}\r\n\r\n/** @internal */\r\nexport function withResolvers<type>(): PromiseWithResolvers<type> {\r\n  let resolve: PromiseWithResolvers<type>['resolve'] = () => undefined\r\n  let reject: PromiseWithResolvers<type>['reject'] = () => undefined\r\n\r\n  const promise = new Promise<type>((resolve_, reject_) => {\r\n    resolve = resolve_\r\n    reject = reject_\r\n  })\r\n\r\n  return { promise, resolve, reject }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport { type PromiseWithResolvers, withResolvers } from './withResolvers.js'\r\n\r\ntype Resolved<returnType extends readonly unknown[] = any> = [\r\n  result: returnType[number],\r\n  results: returnType,\r\n]\r\n\r\ntype SchedulerItem = {\r\n  args: unknown\r\n  resolve: PromiseWithResolvers<unknown>['resolve']\r\n  reject: PromiseWithResolvers<unknown>['reject']\r\n}\r\n\r\ntype BatchResultsCompareFn<result = unknown> = (a: result, b: result) => number\r\n\r\ntype CreateBatchSchedulerArguments<\r\n  parameters = unknown,\r\n  returnType extends readonly unknown[] = readonly unknown[],\r\n> = {\r\n  fn: (args: parameters[]) => Promise<returnType>\r\n  id: number | string\r\n  shouldSplitBatch?: ((args: parameters[]) => boolean) | undefined\r\n  wait?: number | undefined\r\n  sort?: BatchResultsCompareFn<returnType[number]> | undefined\r\n}\r\n\r\ntype CreateBatchSchedulerReturnType<\r\n  parameters = unknown,\r\n  returnType extends readonly unknown[] = readonly unknown[],\r\n> = {\r\n  flush: () => void\r\n  schedule: parameters extends undefined\r\n    ? (args?: parameters | undefined) => Promise<Resolved<returnType>>\r\n    : (args: parameters) => Promise<Resolved<returnType>>\r\n}\r\n\r\nexport type CreateBatchSchedulerErrorType = ErrorType\r\n\r\nconst schedulerCache = /*#__PURE__*/ new Map<number | string, SchedulerItem[]>()\r\n\r\n/** @internal */\r\nexport function createBatchScheduler<\r\n  parameters,\r\n  returnType extends readonly unknown[],\r\n>({\r\n  fn,\r\n  id,\r\n  shouldSplitBatch,\r\n  wait = 0,\r\n  sort,\r\n}: CreateBatchSchedulerArguments<\r\n  parameters,\r\n  returnType\r\n>): CreateBatchSchedulerReturnType<parameters, returnType> {\r\n  const exec = async () => {\r\n    const scheduler = getScheduler()\r\n    flush()\r\n\r\n    const args = scheduler.map(({ args }) => args)\r\n\r\n    if (args.length === 0) return\r\n\r\n    fn(args as parameters[])\r\n      .then((data) => {\r\n        if (sort && Array.isArray(data)) data.sort(sort)\r\n        for (let i = 0; i < scheduler.length; i++) {\r\n          const { resolve } = scheduler[i]\r\n          resolve?.([data[i], data])\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        for (let i = 0; i < scheduler.length; i++) {\r\n          const { reject } = scheduler[i]\r\n          reject?.(err)\r\n        }\r\n      })\r\n  }\r\n\r\n  const flush = () => schedulerCache.delete(id)\r\n\r\n  const getBatchedArgs = () =>\r\n    getScheduler().map(({ args }) => args) as parameters[]\r\n\r\n  const getScheduler = () => schedulerCache.get(id) || []\r\n\r\n  const setScheduler = (item: SchedulerItem) =>\r\n    schedulerCache.set(id, [...getScheduler(), item])\r\n\r\n  return {\r\n    flush,\r\n    async schedule(args: parameters) {\r\n      const { promise, resolve, reject } = withResolvers()\r\n\r\n      const split = shouldSplitBatch?.([...getBatchedArgs(), args])\r\n\r\n      if (split) exec()\r\n\r\n      const hasActiveScheduler = getScheduler().length > 0\r\n      if (hasActiveScheduler) {\r\n        setScheduler({ args, resolve, reject })\r\n        return promise\r\n      }\r\n\r\n      setScheduler({ args, resolve, reject })\r\n      setTimeout(exec, wait)\r\n      return promise\r\n    },\r\n  } as unknown as CreateBatchSchedulerReturnType<parameters, returnType>\r\n}\r\n", "import {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../errors/address.js'\r\nimport {\r\n  InvalidBytesLengthError,\r\n  type InvalidBytesLengthErrorType,\r\n} from '../errors/data.js'\r\nimport {\r\n  AccountStateConflictError,\r\n  type AccountStateConflictErrorType,\r\n  StateAssignmentConflictError,\r\n  type StateAssignmentConflictErrorType,\r\n} from '../errors/stateOverride.js'\r\nimport type {\r\n  RpcAccountStateOverride,\r\n  RpcStateMapping,\r\n  RpcStateOverride,\r\n} from '../types/rpc.js'\r\nimport type { StateMapping, StateOverride } from '../types/stateOverride.js'\r\nimport { isAddress } from './address/isAddress.js'\r\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\r\n\r\ntype SerializeStateMappingParameters = StateMapping | undefined\r\n\r\ntype SerializeStateMappingErrorType = InvalidBytesLengthErrorType\r\n\r\n/** @internal */\r\nexport function serializeStateMapping(\r\n  stateMapping: SerializeStateMappingParameters,\r\n): RpcStateMapping | undefined {\r\n  if (!stateMapping || stateMapping.length === 0) return undefined\r\n  return stateMapping.reduce((acc, { slot, value }) => {\r\n    if (slot.length !== 66)\r\n      throw new InvalidBytesLengthError({\r\n        size: slot.length,\r\n        targetSize: 66,\r\n        type: 'hex',\r\n      })\r\n    if (value.length !== 66)\r\n      throw new InvalidBytesLengthError({\r\n        size: value.length,\r\n        targetSize: 66,\r\n        type: 'hex',\r\n      })\r\n    acc[slot] = value\r\n    return acc\r\n  }, {} as RpcStateMapping)\r\n}\r\n\r\ntype SerializeAccountStateOverrideParameters = Omit<\r\n  StateOverride[number],\r\n  'address'\r\n>\r\n\r\ntype SerializeAccountStateOverrideErrorType =\r\n  | NumberToHexErrorType\r\n  | StateAssignmentConflictErrorType\r\n  | SerializeStateMappingErrorType\r\n\r\n/** @internal */\r\nexport function serializeAccountStateOverride(\r\n  parameters: SerializeAccountStateOverrideParameters,\r\n): RpcAccountStateOverride {\r\n  const { balance, nonce, state, stateDiff, code } = parameters\r\n  const rpcAccountStateOverride: RpcAccountStateOverride = {}\r\n  if (code !== undefined) rpcAccountStateOverride.code = code\r\n  if (balance !== undefined)\r\n    rpcAccountStateOverride.balance = numberToHex(balance)\r\n  if (nonce !== undefined) rpcAccountStateOverride.nonce = numberToHex(nonce)\r\n  if (state !== undefined)\r\n    rpcAccountStateOverride.state = serializeStateMapping(state)\r\n  if (stateDiff !== undefined) {\r\n    if (rpcAccountStateOverride.state) throw new StateAssignmentConflictError()\r\n    rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff)\r\n  }\r\n  return rpcAccountStateOverride\r\n}\r\n\r\ntype SerializeStateOverrideParameters = StateOverride | undefined\r\n\r\nexport type SerializeStateOverrideErrorType =\r\n  | InvalidAddressErrorType\r\n  | AccountStateConflictErrorType\r\n  | SerializeAccountStateOverrideErrorType\r\n\r\n/** @internal */\r\nexport function serializeStateOverride(\r\n  parameters?: SerializeStateOverrideParameters,\r\n): RpcStateOverride | undefined {\r\n  if (!parameters) return undefined\r\n  const rpcStateOverride: RpcStateOverride = {}\r\n  for (const { address, ...accountState } of parameters) {\r\n    if (!isAddress(address, { strict: false }))\r\n      throw new InvalidAddressError({ address })\r\n    if (rpcStateOverride[address])\r\n      throw new AccountStateConflictError({ address: address })\r\n    rpcStateOverride[address] = serializeAccountStateOverride(accountState)\r\n  }\r\n  return rpcStateOverride\r\n}\r\n", "export const maxInt8 = 2n ** (8n - 1n) - 1n\r\nexport const maxInt16 = 2n ** (16n - 1n) - 1n\r\nexport const maxInt24 = 2n ** (24n - 1n) - 1n\r\nexport const maxInt32 = 2n ** (32n - 1n) - 1n\r\nexport const maxInt40 = 2n ** (40n - 1n) - 1n\r\nexport const maxInt48 = 2n ** (48n - 1n) - 1n\r\nexport const maxInt56 = 2n ** (56n - 1n) - 1n\r\nexport const maxInt64 = 2n ** (64n - 1n) - 1n\r\nexport const maxInt72 = 2n ** (72n - 1n) - 1n\r\nexport const maxInt80 = 2n ** (80n - 1n) - 1n\r\nexport const maxInt88 = 2n ** (88n - 1n) - 1n\r\nexport const maxInt96 = 2n ** (96n - 1n) - 1n\r\nexport const maxInt104 = 2n ** (104n - 1n) - 1n\r\nexport const maxInt112 = 2n ** (112n - 1n) - 1n\r\nexport const maxInt120 = 2n ** (120n - 1n) - 1n\r\nexport const maxInt128 = 2n ** (128n - 1n) - 1n\r\nexport const maxInt136 = 2n ** (136n - 1n) - 1n\r\nexport const maxInt144 = 2n ** (144n - 1n) - 1n\r\nexport const maxInt152 = 2n ** (152n - 1n) - 1n\r\nexport const maxInt160 = 2n ** (160n - 1n) - 1n\r\nexport const maxInt168 = 2n ** (168n - 1n) - 1n\r\nexport const maxInt176 = 2n ** (176n - 1n) - 1n\r\nexport const maxInt184 = 2n ** (184n - 1n) - 1n\r\nexport const maxInt192 = 2n ** (192n - 1n) - 1n\r\nexport const maxInt200 = 2n ** (200n - 1n) - 1n\r\nexport const maxInt208 = 2n ** (208n - 1n) - 1n\r\nexport const maxInt216 = 2n ** (216n - 1n) - 1n\r\nexport const maxInt224 = 2n ** (224n - 1n) - 1n\r\nexport const maxInt232 = 2n ** (232n - 1n) - 1n\r\nexport const maxInt240 = 2n ** (240n - 1n) - 1n\r\nexport const maxInt248 = 2n ** (248n - 1n) - 1n\r\nexport const maxInt256 = 2n ** (256n - 1n) - 1n\r\n\r\nexport const minInt8 = -(2n ** (8n - 1n))\r\nexport const minInt16 = -(2n ** (16n - 1n))\r\nexport const minInt24 = -(2n ** (24n - 1n))\r\nexport const minInt32 = -(2n ** (32n - 1n))\r\nexport const minInt40 = -(2n ** (40n - 1n))\r\nexport const minInt48 = -(2n ** (48n - 1n))\r\nexport const minInt56 = -(2n ** (56n - 1n))\r\nexport const minInt64 = -(2n ** (64n - 1n))\r\nexport const minInt72 = -(2n ** (72n - 1n))\r\nexport const minInt80 = -(2n ** (80n - 1n))\r\nexport const minInt88 = -(2n ** (88n - 1n))\r\nexport const minInt96 = -(2n ** (96n - 1n))\r\nexport const minInt104 = -(2n ** (104n - 1n))\r\nexport const minInt112 = -(2n ** (112n - 1n))\r\nexport const minInt120 = -(2n ** (120n - 1n))\r\nexport const minInt128 = -(2n ** (128n - 1n))\r\nexport const minInt136 = -(2n ** (136n - 1n))\r\nexport const minInt144 = -(2n ** (144n - 1n))\r\nexport const minInt152 = -(2n ** (152n - 1n))\r\nexport const minInt160 = -(2n ** (160n - 1n))\r\nexport const minInt168 = -(2n ** (168n - 1n))\r\nexport const minInt176 = -(2n ** (176n - 1n))\r\nexport const minInt184 = -(2n ** (184n - 1n))\r\nexport const minInt192 = -(2n ** (192n - 1n))\r\nexport const minInt200 = -(2n ** (200n - 1n))\r\nexport const minInt208 = -(2n ** (208n - 1n))\r\nexport const minInt216 = -(2n ** (216n - 1n))\r\nexport const minInt224 = -(2n ** (224n - 1n))\r\nexport const minInt232 = -(2n ** (232n - 1n))\r\nexport const minInt240 = -(2n ** (240n - 1n))\r\nexport const minInt248 = -(2n ** (248n - 1n))\r\nexport const minInt256 = -(2n ** (256n - 1n))\r\n\r\nexport const maxUint8 = 2n ** 8n - 1n\r\nexport const maxUint16 = 2n ** 16n - 1n\r\nexport const maxUint24 = 2n ** 24n - 1n\r\nexport const maxUint32 = 2n ** 32n - 1n\r\nexport const maxUint40 = 2n ** 40n - 1n\r\nexport const maxUint48 = 2n ** 48n - 1n\r\nexport const maxUint56 = 2n ** 56n - 1n\r\nexport const maxUint64 = 2n ** 64n - 1n\r\nexport const maxUint72 = 2n ** 72n - 1n\r\nexport const maxUint80 = 2n ** 80n - 1n\r\nexport const maxUint88 = 2n ** 88n - 1n\r\nexport const maxUint96 = 2n ** 96n - 1n\r\nexport const maxUint104 = 2n ** 104n - 1n\r\nexport const maxUint112 = 2n ** 112n - 1n\r\nexport const maxUint120 = 2n ** 120n - 1n\r\nexport const maxUint128 = 2n ** 128n - 1n\r\nexport const maxUint136 = 2n ** 136n - 1n\r\nexport const maxUint144 = 2n ** 144n - 1n\r\nexport const maxUint152 = 2n ** 152n - 1n\r\nexport const maxUint160 = 2n ** 160n - 1n\r\nexport const maxUint168 = 2n ** 168n - 1n\r\nexport const maxUint176 = 2n ** 176n - 1n\r\nexport const maxUint184 = 2n ** 184n - 1n\r\nexport const maxUint192 = 2n ** 192n - 1n\r\nexport const maxUint200 = 2n ** 200n - 1n\r\nexport const maxUint208 = 2n ** 208n - 1n\r\nexport const maxUint216 = 2n ** 216n - 1n\r\nexport const maxUint224 = 2n ** 224n - 1n\r\nexport const maxUint232 = 2n ** 232n - 1n\r\nexport const maxUint240 = 2n ** 240n - 1n\r\nexport const maxUint248 = 2n ** 248n - 1n\r\nexport const maxUint256 = 2n ** 256n - 1n\r\n", "import {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\r\nimport { maxUint256 } from '../../constants/number.js'\r\nimport {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../../errors/address.js'\r\nimport {\r\n  FeeCapTooHighError,\r\n  type FeeCapTooHighErrorType,\r\n  TipAboveFeeCapError,\r\n  type TipAboveFeeCapErrorType,\r\n} from '../../errors/node.js'\r\nimport {\r\n  FeeConflictError,\r\n  type FeeConflictErrorType,\r\n} from '../../errors/transaction.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { ExactPartial } from '../../types/utils.js'\r\nimport { isAddress } from '../address/isAddress.js'\r\n\r\nexport type AssertRequestParameters = ExactPartial<\r\n  SendTransactionParameters<Chain>\r\n>\r\n\r\nexport type AssertRequestErrorType =\r\n  | InvalidAddressErrorType\r\n  | FeeConflictErrorType\r\n  | FeeCapTooHighErrorType\r\n  | ParseAccountErrorType\r\n  | TipAboveFeeCapErrorType\r\n  | ErrorType\r\n\r\nexport function assertRequest(args: AssertRequestParameters) {\r\n  const {\r\n    account: account_,\r\n    gasPrice,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n    to,\r\n  } = args\r\n  const account = account_ ? parseAccount(account_) : undefined\r\n  if (account && !isAddress(account.address))\r\n    throw new InvalidAddressError({ address: account.address })\r\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\r\n  if (\r\n    typeof gasPrice !== 'undefined' &&\r\n    (typeof maxFeePerGas !== 'undefined' ||\r\n      typeof maxPriorityFeePerGas !== 'undefined')\r\n  )\r\n    throw new FeeConflictError()\r\n\r\n  if (maxFeePerGas && maxFeePerGas > maxUint256)\r\n    throw new FeeCapTooHighError({ maxFeePerGas })\r\n  if (\r\n    maxPriorityFeePerGas &&\r\n    maxFeePerGas &&\r\n    maxPriorityFeePerGas > maxFeePerGas\r\n  )\r\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\r\n}\r\n", "import { type Address, parseAbi } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { multicall3Abi } from '../../constants/abis.js'\r\nimport { aggregate3Signature } from '../../constants/contract.js'\r\nimport {\r\n  deploylessCallViaBytecodeBytecode,\r\n  deploylessCallViaFactoryBytecode,\r\n} from '../../constants/contracts.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport {\r\n  ChainDoesNotSupportContract,\r\n  ClientChainNotConfiguredError,\r\n} from '../../errors/chain.js'\r\nimport {\r\n  CounterfactualDeploymentFailedError,\r\n  RawContractError,\r\n  type RawContractErrorType,\r\n} from '../../errors/contract.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\r\nimport type { StateOverride } from '../../types/stateOverride.js'\r\nimport type { TransactionRequest } from '../../types/transaction.js'\r\nimport type { ExactPartial, UnionOmit } from '../../types/utils.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeDeployDataErrorType,\r\n  encodeDeployData,\r\n} from '../../utils/abi/encodeDeployData.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type GetCallErrorReturnType,\r\n  getCallError,\r\n} from '../../utils/errors/getCallError.js'\r\nimport { extract } from '../../utils/formatters/extract.js'\r\nimport {\r\n  type FormatTransactionRequestErrorType,\r\n  type FormattedTransactionRequest,\r\n  formatTransactionRequest,\r\n} from '../../utils/formatters/transactionRequest.js'\r\nimport {\r\n  type CreateBatchSchedulerErrorType,\r\n  createBatchScheduler,\r\n} from '../../utils/promise/createBatchScheduler.js'\r\nimport {\r\n  type SerializeStateOverrideErrorType,\r\n  serializeStateOverride,\r\n} from '../../utils/stateOverride.js'\r\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\r\nimport type {\r\n  AssertRequestErrorType,\r\n  AssertRequestParameters,\r\n} from '../../utils/transaction/assertRequest.js'\r\n\r\nexport type CallParameters<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = UnionOmit<FormattedCall<chain>, 'from'> & {\r\n  /** Account attached to the call (msg.sender). */\r\n  account?: Account | Address | undefined\r\n  /** Whether or not to enable multicall batching on this call. */\r\n  batch?: boolean | undefined\r\n  /** Bytecode to perform the call on. */\r\n  code?: Hex | undefined\r\n  /** Contract deployment factory address (ie. Create2 factory, Smart Account factory, etc). */\r\n  factory?: Address | undefined\r\n  /** Calldata to execute on the factory to deploy the contract. */\r\n  factoryData?: Hex | undefined\r\n  /** State overrides for the call. */\r\n  stateOverride?: StateOverride | undefined\r\n} & (\r\n    | {\r\n        /** The balance of the account at a block number. */\r\n        blockNumber?: bigint | undefined\r\n        blockTag?: undefined\r\n      }\r\n    | {\r\n        blockNumber?: undefined\r\n        /**\r\n         * The balance of the account at a block tag.\r\n         * @default 'latest'\r\n         */\r\n        blockTag?: BlockTag | undefined\r\n      }\r\n  )\r\ntype FormattedCall<chain extends Chain | undefined = Chain | undefined> =\r\n  FormattedTransactionRequest<chain>\r\n\r\nexport type CallReturnType = { data: Hex | undefined }\r\n\r\nexport type CallErrorType = GetCallErrorReturnType<\r\n  | ParseAccountErrorType\r\n  | SerializeStateOverrideErrorType\r\n  | AssertRequestErrorType\r\n  | NumberToHexErrorType\r\n  | FormatTransactionRequestErrorType\r\n  | ScheduleMulticallErrorType\r\n  | RequestErrorType\r\n  | ToDeploylessCallViaBytecodeDataErrorType\r\n  | ToDeploylessCallViaFactoryDataErrorType\r\n>\r\n\r\n/**\r\n * Executes a new message call immediately without submitting a transaction to the network.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/call\r\n * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link CallParameters}\r\n * @returns The call data. {@link CallReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { call } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const data = await call(client, {\r\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\r\n *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n * })\r\n */\r\nexport async function call<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  args: CallParameters<chain>,\r\n): Promise<CallReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    batch = Boolean(client.batch?.multicall),\r\n    blockNumber,\r\n    blockTag = 'latest',\r\n    accessList,\r\n    blobs,\r\n    code,\r\n    data: data_,\r\n    factory,\r\n    factoryData,\r\n    gas,\r\n    gasPrice,\r\n    maxFeePerBlobGas,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n    nonce,\r\n    to,\r\n    value,\r\n    stateOverride,\r\n    ...rest\r\n  } = args\r\n  const account = account_ ? parseAccount(account_) : undefined\r\n\r\n  if (code && (factory || factoryData))\r\n    throw new BaseError(\r\n      'Cannot provide both `code` & `factory`/`factoryData` as parameters.',\r\n    )\r\n  if (code && to)\r\n    throw new BaseError('Cannot provide both `code` & `to` as parameters.')\r\n\r\n  // Check if the call is deployless via bytecode.\r\n  const deploylessCallViaBytecode = code && data_\r\n  // Check if the call is deployless via a factory.\r\n  const deploylessCallViaFactory = factory && factoryData && to && data_\r\n  const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory\r\n\r\n  const data = (() => {\r\n    if (deploylessCallViaBytecode)\r\n      return toDeploylessCallViaBytecodeData({\r\n        code,\r\n        data: data_,\r\n      })\r\n    if (deploylessCallViaFactory)\r\n      return toDeploylessCallViaFactoryData({\r\n        data: data_,\r\n        factory,\r\n        factoryData,\r\n        to,\r\n      })\r\n    return data_\r\n  })()\r\n\r\n  try {\r\n    assertRequest(args as AssertRequestParameters)\r\n\r\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\r\n    const block = blockNumberHex || blockTag\r\n\r\n    const rpcStateOverride = serializeStateOverride(stateOverride)\r\n\r\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\r\n    const format = chainFormat || formatTransactionRequest\r\n\r\n    const request = format({\r\n      // Pick out extra data that might exist on the chain's transaction request type.\r\n      ...extract(rest, { format: chainFormat }),\r\n      from: account?.address,\r\n      accessList,\r\n      blobs,\r\n      data,\r\n      gas,\r\n      gasPrice,\r\n      maxFeePerBlobGas,\r\n      maxFeePerGas,\r\n      maxPriorityFeePerGas,\r\n      nonce,\r\n      to: deploylessCall ? undefined : to,\r\n      value,\r\n    } as TransactionRequest) as TransactionRequest\r\n\r\n    if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {\r\n      try {\r\n        return await scheduleMulticall(client, {\r\n          ...request,\r\n          blockNumber,\r\n          blockTag,\r\n        } as unknown as ScheduleMulticallParameters<chain>)\r\n      } catch (err) {\r\n        if (\r\n          !(err instanceof ClientChainNotConfiguredError) &&\r\n          !(err instanceof ChainDoesNotSupportContract)\r\n        )\r\n          throw err\r\n      }\r\n    }\r\n\r\n    const response = await client.request({\r\n      method: 'eth_call',\r\n      params: rpcStateOverride\r\n        ? [\r\n            request as ExactPartial<RpcTransactionRequest>,\r\n            block,\r\n            rpcStateOverride,\r\n          ]\r\n        : [request as ExactPartial<RpcTransactionRequest>, block],\r\n    })\r\n    if (response === '0x') return { data: undefined }\r\n    return { data: response }\r\n  } catch (err) {\r\n    const data = getRevertErrorData(err)\r\n\r\n    // Check for CCIP-Read offchain lookup signature.\r\n    const { offchainLookup, offchainLookupSignature } = await import(\r\n      '../../utils/ccip.js'\r\n    )\r\n    if (\r\n      client.ccipRead !== false &&\r\n      data?.slice(0, 10) === offchainLookupSignature &&\r\n      to\r\n    )\r\n      return { data: await offchainLookup(client, { data, to }) }\r\n\r\n    // Check for counterfactual deployment error.\r\n    if (deploylessCall && data?.slice(0, 10) === '0x101bb98d')\r\n      throw new CounterfactualDeploymentFailedError({ factory })\r\n\r\n    throw getCallError(err as ErrorType, {\r\n      ...args,\r\n      account,\r\n      chain: client.chain,\r\n    })\r\n  }\r\n}\r\n\r\n// We only want to perform a scheduled multicall if:\r\n// - The request has calldata,\r\n// - The request has a target address,\r\n// - The target address is not already the aggregate3 signature,\r\n// - The request has no other properties (`nonce`, `gas`, etc cannot be sent with a multicall).\r\nfunction shouldPerformMulticall({ request }: { request: TransactionRequest }) {\r\n  const { data, to, ...request_ } = request\r\n  if (!data) return false\r\n  if (data.startsWith(aggregate3Signature)) return false\r\n  if (!to) return false\r\n  if (\r\n    Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0\r\n  )\r\n    return false\r\n  return true\r\n}\r\n\r\ntype ScheduleMulticallParameters<chain extends Chain | undefined> = Pick<\r\n  CallParameters<chain>,\r\n  'blockNumber' | 'blockTag'\r\n> & {\r\n  data: Hex\r\n  multicallAddress?: Address | undefined\r\n  to: Address\r\n}\r\n\r\ntype ScheduleMulticallErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | NumberToHexErrorType\r\n  | CreateBatchSchedulerErrorType\r\n  | EncodeFunctionDataErrorType\r\n  | DecodeFunctionResultErrorType\r\n  | RawContractErrorType\r\n  | ErrorType\r\n\r\nasync function scheduleMulticall<chain extends Chain | undefined>(\r\n  client: Client<Transport>,\r\n  args: ScheduleMulticallParameters<chain>,\r\n) {\r\n  const { batchSize = 1024, wait = 0 } =\r\n    typeof client.batch?.multicall === 'object' ? client.batch.multicall : {}\r\n  const {\r\n    blockNumber,\r\n    blockTag = 'latest',\r\n    data,\r\n    multicallAddress: multicallAddress_,\r\n    to,\r\n  } = args\r\n\r\n  let multicallAddress = multicallAddress_\r\n  if (!multicallAddress) {\r\n    if (!client.chain) throw new ClientChainNotConfiguredError()\r\n\r\n    multicallAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'multicall3',\r\n    })\r\n  }\r\n\r\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\r\n  const block = blockNumberHex || blockTag\r\n\r\n  const { schedule } = createBatchScheduler({\r\n    id: `${client.uid}.${block}`,\r\n    wait,\r\n    shouldSplitBatch(args) {\r\n      const size = args.reduce((size, { data }) => size + (data.length - 2), 0)\r\n      return size > batchSize * 2\r\n    },\r\n    fn: async (\r\n      requests: {\r\n        data: Hex\r\n        to: Address\r\n      }[],\r\n    ) => {\r\n      const calls = requests.map((request) => ({\r\n        allowFailure: true,\r\n        callData: request.data,\r\n        target: request.to,\r\n      }))\r\n\r\n      const calldata = encodeFunctionData({\r\n        abi: multicall3Abi,\r\n        args: [calls],\r\n        functionName: 'aggregate3',\r\n      })\r\n\r\n      const data = await client.request({\r\n        method: 'eth_call',\r\n        params: [\r\n          {\r\n            data: calldata,\r\n            to: multicallAddress,\r\n          },\r\n          block,\r\n        ],\r\n      })\r\n\r\n      return decodeFunctionResult({\r\n        abi: multicall3Abi,\r\n        args: [calls],\r\n        functionName: 'aggregate3',\r\n        data: data || '0x',\r\n      })\r\n    },\r\n  })\r\n\r\n  const [{ returnData, success }] = await schedule({ data, to })\r\n\r\n  if (!success) throw new RawContractError({ data: returnData })\r\n  if (returnData === '0x') return { data: undefined }\r\n  return { data: returnData }\r\n}\r\n\r\ntype ToDeploylessCallViaBytecodeDataErrorType =\r\n  | EncodeDeployDataErrorType\r\n  | ErrorType\r\n\r\nfunction toDeploylessCallViaBytecodeData(parameters: {\r\n  code: Hex\r\n  data: Hex\r\n}) {\r\n  const { code, data } = parameters\r\n  return encodeDeployData({\r\n    abi: parseAbi(['constructor(bytes, bytes)']),\r\n    bytecode: deploylessCallViaBytecodeBytecode,\r\n    args: [code, data],\r\n  })\r\n}\r\n\r\ntype ToDeploylessCallViaFactoryDataErrorType =\r\n  | EncodeDeployDataErrorType\r\n  | ErrorType\r\n\r\nfunction toDeploylessCallViaFactoryData(parameters: {\r\n  data: Hex\r\n  factory: Address\r\n  factoryData: Hex\r\n  to: Address\r\n}) {\r\n  const { data, factory, factoryData, to } = parameters\r\n  return encodeDeployData({\r\n    abi: parseAbi(['constructor(address, bytes, address, bytes)']),\r\n    bytecode: deploylessCallViaFactoryBytecode,\r\n    args: [to, data, factory, factoryData],\r\n  })\r\n}\r\n\r\n/** @internal */\r\nexport type GetRevertErrorDataErrorType = ErrorType\r\n\r\n/** @internal */\r\nexport function getRevertErrorData(err: unknown) {\r\n  if (!(err instanceof BaseError)) return undefined\r\n  const error = err.walk() as RawContractError\r\n  return typeof error?.data === 'object' ? error.data?.data : error.data\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Hex } from '../types/misc.js'\r\nimport { stringify } from '../utils/stringify.js'\r\n\r\nimport { BaseError } from './base.js'\r\nimport { getUrl } from './utils.js'\r\n\r\nexport type OffchainLookupErrorType = OffchainLookupError & {\r\n  name: 'OffchainLookupError'\r\n}\r\nexport class OffchainLookupError extends BaseError {\r\n  constructor({\r\n    callbackSelector,\r\n    cause,\r\n    data,\r\n    extraData,\r\n    sender,\r\n    urls,\r\n  }: {\r\n    callbackSelector: Hex\r\n    cause: BaseError\r\n    data: Hex\r\n    extraData: Hex\r\n    sender: Address\r\n    urls: readonly string[]\r\n  }) {\r\n    super(\r\n      cause.shortMessage ||\r\n        'An error occurred while fetching for an offchain result.',\r\n      {\r\n        cause,\r\n        metaMessages: [\r\n          ...(cause.metaMessages || []),\r\n          cause.metaMessages?.length ? '' : [],\r\n          'Offchain Gateway Call:',\r\n          urls && [\r\n            '  Gateway URL(s):',\r\n            ...urls.map((url) => `    ${getUrl(url)}`),\r\n          ],\r\n          `  Sender: ${sender}`,\r\n          `  Data: ${data}`,\r\n          `  Callback selector: ${callbackSelector}`,\r\n          `  Extra data: ${extraData}`,\r\n        ].flat(),\r\n        name: 'OffchainLookupError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type OffchainLookupResponseMalformedErrorType =\r\n  OffchainLookupResponseMalformedError & {\r\n    name: 'OffchainLookupResponseMalformedError'\r\n  }\r\nexport class OffchainLookupResponseMalformedError extends BaseError {\r\n  constructor({ result, url }: { result: any; url: string }) {\r\n    super(\r\n      'Offchain gateway response is malformed. Response data must be a hex value.',\r\n      {\r\n        metaMessages: [\r\n          `Gateway URL: ${getUrl(url)}`,\r\n          `Response: ${stringify(result)}`,\r\n        ],\r\n        name: 'OffchainLookupResponseMalformedError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport type OffchainLookupSenderMismatchErrorType =\r\n  OffchainLookupSenderMismatchError & {\r\n    name: 'OffchainLookupSenderMismatchError'\r\n  }\r\nexport class OffchainLookupSenderMismatchError extends BaseError {\r\n  constructor({ sender, to }: { sender: Address; to: Address }) {\r\n    super(\r\n      'Reverted sender address does not match target contract address (`to`).',\r\n      {\r\n        metaMessages: [\r\n          `Contract address: ${to}`,\r\n          `OffchainLookup sender address: ${sender}`,\r\n        ],\r\n        name: 'OffchainLookupSenderMismatchError',\r\n      },\r\n    )\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport {\r\n  InvalidAddressError,\r\n  type InvalidAddressErrorType,\r\n} from '../../errors/address.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { isAddress } from './isAddress.js'\r\n\r\nexport type IsAddressEqualReturnType = boolean\r\nexport type IsAddressEqualErrorType = InvalidAddressErrorType | ErrorType\r\n\r\nexport function isAddressEqual(a: Address, b: Address) {\r\n  if (!isAddress(a, { strict: false }))\r\n    throw new InvalidAddressError({ address: a })\r\n  if (!isAddress(b, { strict: false }))\r\n    throw new InvalidAddressError({ address: b })\r\n  return a.toLowerCase() === b.toLowerCase()\r\n}\r\n", "import type { Abi, Address } from 'abitype'\r\n\r\nimport { type CallParameters, call } from '../actions/public/call.js'\r\nimport type { Transport } from '../clients/transports/createTransport.js'\r\nimport type { BaseError } from '../errors/base.js'\r\nimport {\r\n  OffchainLookupError,\r\n  type OffchainLookupErrorType as OffchainLookupErrorType_,\r\n  OffchainLookupResponseMalformedError,\r\n  type OffchainLookupResponseMalformedErrorType,\r\n  OffchainLookupSenderMismatchError,\r\n} from '../errors/ccip.js'\r\nimport {\r\n  HttpRequestError,\r\n  type HttpRequestErrorType,\r\n} from '../errors/request.js'\r\nimport type { Chain } from '../types/chain.js'\r\nimport type { Hex } from '../types/misc.js'\r\n\r\nimport type { Client } from '../clients/createClient.js'\r\nimport type { ErrorType } from '../errors/utils.js'\r\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\r\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\r\nimport { isAddressEqual } from './address/isAddressEqual.js'\r\nimport { concat } from './data/concat.js'\r\nimport { isHex } from './data/isHex.js'\r\nimport { stringify } from './stringify.js'\r\n\r\nexport const offchainLookupSignature = '0x556f1830'\r\nexport const offchainLookupAbiItem = {\r\n  name: 'OffchainLookup',\r\n  type: 'error',\r\n  inputs: [\r\n    {\r\n      name: 'sender',\r\n      type: 'address',\r\n    },\r\n    {\r\n      name: 'urls',\r\n      type: 'string[]',\r\n    },\r\n    {\r\n      name: 'callData',\r\n      type: 'bytes',\r\n    },\r\n    {\r\n      name: 'callbackFunction',\r\n      type: 'bytes4',\r\n    },\r\n    {\r\n      name: 'extraData',\r\n      type: 'bytes',\r\n    },\r\n  ],\r\n} as const satisfies Abi[number]\r\n\r\nexport type OffchainLookupErrorType = OffchainLookupErrorType_ | ErrorType\r\n\r\nexport async function offchainLookup<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockNumber,\r\n    blockTag,\r\n    data,\r\n    to,\r\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\r\n    data: Hex\r\n    to: Address\r\n  },\r\n): Promise<Hex> {\r\n  const { args } = decodeErrorResult({\r\n    data,\r\n    abi: [offchainLookupAbiItem],\r\n  })\r\n  const [sender, urls, callData, callbackSelector, extraData] = args\r\n\r\n  const { ccipRead } = client\r\n  const ccipRequest_ =\r\n    ccipRead && typeof ccipRead?.request === 'function'\r\n      ? ccipRead.request\r\n      : ccipRequest\r\n\r\n  try {\r\n    if (!isAddressEqual(to, sender))\r\n      throw new OffchainLookupSenderMismatchError({ sender, to })\r\n\r\n    const result = await ccipRequest_({ data: callData, sender, urls })\r\n\r\n    const { data: data_ } = await call(client, {\r\n      blockNumber,\r\n      blockTag,\r\n      data: concat([\r\n        callbackSelector,\r\n        encodeAbiParameters(\r\n          [{ type: 'bytes' }, { type: 'bytes' }],\r\n          [result, extraData],\r\n        ),\r\n      ]),\r\n      to,\r\n    } as CallParameters)\r\n\r\n    return data_!\r\n  } catch (err) {\r\n    throw new OffchainLookupError({\r\n      callbackSelector,\r\n      cause: err as BaseError,\r\n      data,\r\n      extraData,\r\n      sender,\r\n      urls,\r\n    })\r\n  }\r\n}\r\n\r\nexport type CcipRequestParameters = {\r\n  data: Hex\r\n  sender: Address\r\n  urls: readonly string[]\r\n}\r\n\r\nexport type CcipRequestReturnType = Hex\r\n\r\nexport type CcipRequestErrorType =\r\n  | HttpRequestErrorType\r\n  | OffchainLookupResponseMalformedErrorType\r\n  | ErrorType\r\n\r\nexport async function ccipRequest({\r\n  data,\r\n  sender,\r\n  urls,\r\n}: CcipRequestParameters): Promise<CcipRequestReturnType> {\r\n  let error = new Error('An unknown error occurred.')\r\n\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const method = url.includes('{data}') ? 'GET' : 'POST'\r\n    const body = method === 'POST' ? { data, sender } : undefined\r\n    const headers: HeadersInit =\r\n      method === 'POST' ? { 'Content-Type': 'application/json' } : {}\r\n\r\n    try {\r\n      const response = await fetch(\r\n        url.replace('{sender}', sender).replace('{data}', data),\r\n        {\r\n          body: JSON.stringify(body),\r\n          headers,\r\n          method,\r\n        },\r\n      )\r\n\r\n      let result: any\r\n      if (\r\n        response.headers.get('Content-Type')?.startsWith('application/json')\r\n      ) {\r\n        result = (await response.json()).data\r\n      } else {\r\n        result = (await response.text()) as any\r\n      }\r\n\r\n      if (!response.ok) {\r\n        error = new HttpRequestError({\r\n          body,\r\n          details: result?.error\r\n            ? stringify(result.error)\r\n            : response.statusText,\r\n          headers: response.headers,\r\n          status: response.status,\r\n          url,\r\n        })\r\n        continue\r\n      }\r\n\r\n      if (!isHex(result)) {\r\n        error = new OffchainLookupResponseMalformedError({\r\n          result,\r\n          url,\r\n        })\r\n        continue\r\n      }\r\n\r\n      return result\r\n    } catch (err) {\r\n      error = new HttpRequestError({\r\n        body,\r\n        details: (err as Error).message,\r\n        url,\r\n      })\r\n    }\r\n  }\r\n\r\n  throw error\r\n}\r\n"],
  "mappings": "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",
  "names": ["docsPath", "_a", "docsPath", "formatAbiItem", "docsPath", "size", "docsPath", "docsPath", "formatAbiItem", "docsPath", "size", "size", "size", "size", "size", "size", "encoder", "size", "hash", "size", "size", "length", "data", "length", "consumed", "value", "size", "formatAbiItem", "value", "docsPath", "docsPath", "docsPath", "formatAbiItem", "docsPath", "docsPath", "cause", "formatted", "args", "data", "offchainLookup", "offchainLookupSignature", "args", "size"]
}
